{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","../node_modules/vivus/dist/vivus.js","../node_modules/snapsvg-cjs/dist/snap.svg-cjs.js","../node_modules/eve/eve.js"],"names":["__webpack_require__","d","__webpack_exports__","_objectSpread","_defineProperty__WEBPACK_IMPORTED_MODULE_0__","target","i","arguments","length","source","ownKeys","Object","keys","getOwnPropertySymbols","concat","filter","sym","getOwnPropertyDescriptor","enumerable","forEach","key","_toConsumableArray","arr","Array","isArray","arr2","_arrayWithoutHoles","iter","Symbol","iterator","prototype","toString","call","from","_iterableToArray","TypeError","_nonIterableSpread","__WEBPACK_AMD_DEFINE_RESULT__","Pathformer","element","Error","constructor","String","document","getElementById","window","SVGElement","SVGGElement","test","nodeName","this","el","scan","setupEnv","requestAnimFrame","cancelAnimFrame","parsePositiveInt","Vivus","options","callback","isReady","setElement","setOptions","setCallback","init","TYPES","ATTR_WATCH","svg","pathData","pathDom","elements","querySelectorAll","join","fn","tagName","toLowerCase","parseAttr","attributes","pathMaker","parentNode","replaceChild","lineToPath","newElement","x1","y1","x2","y2","rectToPath","x","parseFloat","y","width","height","rx","ry","parseInt","Math","min","max","polylineToPath","path","points","trim","split","indexOf","formattedPoints","push","polygonToPath","ellipseToPath","cx","cy","startX","startY","endX","endY","circleToPath","r","attr","pathTag","createElementNS","name","setAttribute","value","output","LINEAR","EASE","cos","PI","EASE_OUT","pow","EASE_IN","EASE_OUT_BOUNCE","base","rate","rateR","abs","onLoad","parentEl","file","self","e","domSandbox","createElement","innerHTML","responseText","svgTag","querySelector","appendChild","oReq","XMLHttpRequest","addEventListener","open","send","SVGSVGElement","HTMLObjectElement","contentDocument","getAttribute","insertBefore","removeChild","allowedTypes","allowedStarts","undefined","type","start","isIE","navigator","userAgent","duration","delay","dashGap","forceRender","hasOwnProperty","reverseStack","selfDestroy","onReady","map","frameLength","currentFrame","delayUnit","speed","handle","ignoreInvisible","animTimingFunction","pathTimingFunction","Function","mapping","paths","pAttrs","pathObj","totalLength","lengthMeter","timePoint","isInvisible","ceil","getTotalLength","isNaN","console","warn","style","strokeDasharray","strokeDashoffset","renderPath","reverse","startAt","drawer","stop","reset","trace","destroy","instanceCallback","progress","floor","index","newPath","cloneNode","starter","play","listener","isInViewport","removeEventListener","getStatus","setFrameProgress","finish","round","rect","ignoreAttr","getBoundingClientRect","h","scrolled","scrollY","viewed","getViewportH","elBCR","elHeight","elTop","top","client","docElem","clientHeight","inner","innerHeight","pageYOffset","scrollTop","documentElement","requestAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","oRequestAnimationFrame","msRequestAnimationFrame","setTimeout","cancelAnimationFrame","webkitCancelAnimationFrame","mozCancelAnimationFrame","oCancelAnimationFrame","msCancelAnimationFrame","id","clearTimeout","defaultValue","apply","exports","module","eve","mina","requestID","animations","Date","getTime","a","idgen","idprefix","timer","now","sta","val","s","ds","b","dur","B","spd","stopit","update","pause","pdif","get","resume","frame","res","j","jj","end","easing","set","timeStamp","len","A","anim","linear","status","time","getById","n","easeout","easein","easeinout","q","Q","sqrt","t","backin","backout","elastic","sin","bounce","p","Snap","root","w","nodeType","wrap","is","Element","glob","doc","Paper","version","_","win","has","Str","toFloat","toInt","math","mmax","mmin","E","objectToString","colourRegExp","commaSpaces","separator","hsrg","hs","rg","pathCommand","tCommand","pathValues","ID","xlink","xmlns","hub","url","$","createTextNode","text","createComment","substring","getAttributeNS","nodeValue","setAttributeNS","removeAttribute","o","isFinite","slice","cacher","f","scope","postprocessor","newf","arg","args","cache","count","array","item","ii","splice","repush","shift","rad","deg","format","tokenRegex","objNotationRegex","str","obj","replace","all","quote","quotedName","isFunc","replacer","clone","angle","tan","asin","num","acos","atan","atan2","x3","y3","len2","closestPoint","distance2","dx","dy","best","bestLength","scanDistance","pathNode","node","pathLength","precision","pathSegList","numberOfItems","bestDistance","Infinity","scanLength","getPointAtLength","before","after","beforeLength","afterLength","beforeDistance","afterDistance","distance","snapTo","values","tolerance","rem","getRGB","colour","g","hex","error","rgbtoString","charAt","_toHex","red","green","blue","opacity","rgb","match","hsb2rgb","hsl2rgb","hsb","hsl","l","toFixed","color","getElementsByTagName","out","defaultView","getComputedStyle","getPropertyValue","hsbtoString","hsltoString","prepareRGB","string","clr","packageRGB","rgb2hsl","rgb2hsb","v","R","G","X","C","V","L","M","m","parsePathString","pathString","pth","paramCounts","c","u","z","data","params","parseTransformString","TString","svgTransform2string","tstr","rgTransform","transform2matrix","bbox","tdata","Matrix","bb","tlen","command","absolute","inver","invert","translate","rotate","scale","add","_unit2px","getSomeSVG","mgr","class","fill","getW","getBBox","getH","nam","contains","compareDocumentPosition","ownerSVGElement","select","add2group","list","children","childNodes","snap","paper","anims","transform","mask","pattern","symbol","method","Fragment","frag","make","parent","desc","defs","proto","ownerDocument","body","dom","getSomeDefs","pdefs","query","selectAll","nodelist","setInterval","firstDefined","json","att","parse","createDocumentFragment","full","div","firstChild","fragment","ch","toJSON","jsonFiller","on","nt","css","lastIndexOf","letter","cssAttr","alignment-baseline","baseline-shift","clip","clip-path","clip-rule","color-interpolation","color-interpolation-filters","color-profile","color-rendering","cursor","direction","display","dominant-baseline","enable-background","fill-opacity","fill-rule","flood-color","flood-opacity","font","font-family","font-size","font-size-adjust","font-stretch","font-style","font-variant","font-weight","glyph-orientation-horizontal","glyph-orientation-vertical","image-rendering","kerning","letter-spacing","lighting-color","marker","marker-end","marker-mid","marker-start","overflow","pointer-events","shape-rendering","stop-color","stop-opacity","stroke","stroke-dasharray","stroke-dashoffset","stroke-linecap","stroke-linejoin","stroke-miterlimit","stroke-opacity","stroke-width","text-anchor","text-decoration","text-rendering","unicode-bidi","visibility","word-spacing","writing-mode","toUpperCase","ajax","postData","req","pd","encodeURIComponent","setRequestHeader","once","onreadystatechange","readyState","load","getElementByPoint","canvas","elementFromPoint","opera","so","elem","box","clientTop","clientLeft","left","pageXOffset","scrollLeft","getOffset","sr","createSVGRect","hits","getIntersectionList","plugin","elproto","unit2px","isWithoutTransform","getClientRects","removed","localMatrix","original","href","pathfinder","deflt","bboxwt","realPath","matrix","propString","extractTransform","doReturn","papa","global","getCTM","local","ms","localString","toTransformString","globalMatrix","totalMatrix","diffMatrix","total","gradientTransform","patternTransform","append","it","appendTo","prepend","first","prependTo","nextSibling","insertAfter","remove","asPX","use","xlink:href","els","ids","uses","urltest","linktest","oldid","old","fs","fixids","toDefs","toPattern","patternUnits","viewBox","refX","refY","markerWidth","markerHeight","orient","eldata","chld","removeData","outerSVG","innerSVG","toDataURL","btoa","contents","unescape","matrixproto","norm","normalize","mag","aNew","bNew","multLeft","cNew","eNew","me","skewX","skew","skewY","fromCharCode","offset","determinant","row","scalex","shear","scaley","isSimple","isSuperSimple","noRotation","shorter","clipIt","reURLValue","URL","fillStroke","grad","gradient","attrs","deurl","gradrg","setFontSize","fontSize","getFontSize","tokens","stops","seed","step","k","toAbsolute","txt","className","baseVal","vb","tp","textPath","tuned","tuner","chunk","getter","setter","textExtract","chi","textContent","internal","rgNotSpace","addClass","clazz","finalValue","classes","curClasses","removeClass","pos","hasClass","toggleClass","flag","operators","+","-","/","*","reUnit","reAddon","getNumber","getUnit","unit","plus","evnt","atr","aUnit","op","bplus","to","circle","preload","onerror","src","img","cssText","onload","image","preserveAspectRatio","offsetWidth","offsetHeight","ellipse","group","vbx","vby","vbw","vbh","ptrn","vx","vy","vw","vh","line","polyline","polygon","Gstops","GaddStop","inserted","GgetBBox","GsetStops","addStop","gradientLinear","setStops","gradientRadial","fx","fy","unshift","gradientUnits","clear","next","p2s","ps","sleep","r1","r2","r0","rectPath","pathClone","pathArray","getPointAtSegmentLength","p1x","p1y","c1x","c1y","c2x","c2y","p2x","p2y","bezlen","findDotsAtSegment","x4","y4","ll","t2","getTotLen","getLengthFactory","istotal","subpath","O","onlystart","point","sp","subpaths","path2curve","getSubpathsAtLength","t1","t13","t12","t3","mx","my","nx","ny","alpha","bezierBBox","curveDim","isPointInsideBBox","isBBoxIntersect","bbox1","bbox2","base3","p1","p2","p3","p4","z2","Tvalues","Cvalues","sum","ct","xbase","ybase","comb","intersect","denominator","px","py","px2","py2","interHelper","bez1","bez2","justCount","n1","n2","dots1","dots2","xy","di","di1","dj","dj1","ci","cj","interPathHelper","path1","path2","x1m","y1m","x2m","y2m","pi","pj","intr","kk","segment1","segment2","pathBBox","Y","dim","xmin","ymin","ellipsePath","getPath","pathToAbsolute","pa0","pa","crz","dots","pop","catmullRom2bezier","l2c","q2c","ax","ay","x0","y0","b2ac","sqrtb2ac","tvalues","bounds","mt","jlen","curve","bx","by","qx","qy","attrs2","processPath","pcom","T","a2c","large_arc_flag","sweep_flag","recursive","_120","f1","f2","rx2","ry2","df","f2old","x2old","y2old","c1","s1","c2","s2","hx","hy","m1","m2","m3","m4","newres","fixArc","pp","pcoms1","pcoms2","fixM","a1","a2","pfirst","seg","seg2","seglen","seg2len","crp","iLen","getSubpath","closest","inside","found","intersection","intersectionNumber","isPointInside","toRelative","lowerCase","rel","toCubic","pathi","Set","items","bindings","setproto","thisArg","animate","Animation","each","begin","handler","cb","callbacker","bind","aname","unbound","insertion","tail","todel","arglen","exclude","names","getEmpty","getViewBox","getColour","path2array","isNumeric","equal","Number","tt1","tt2","maxlength","equaliseTransform","arr1","bUnit","supportsTouch","events","touchMap","mousedown","mousemove","mouseup","getScroll","preventTouch","originalEvent","preventDefault","stopTouch","stopPropagation","addEvent","realName","scrollX","targetTouches","olde","clientX","clientY","drag","dragMove","dragi","touch","touches","identifier","_drag","move_scope","dragUp","unmousemove","unmouseup","end_scope","start_scope","off","eventName","unbind","hover","f_in","f_out","scope_in","scope_out","mouseover","mouseout","unhover","unmouseover","unmouseout","draggable","onmove","onstart","onend","origTransform","undrag","unmousedown","pproto","rgurl","filstr","filterUnits","blur","def","shadow","grayscale","amount","sepia","saturate","hueRotate","amount2","brightness","contrast","firstLetter","getAlign","way","align","animation","inAnim","_attrs","_callback","curStatus","eq","fkeys","tkeys","saveColor","colors","A100","A200","A400","A700","mui","flat","pink","purple","deeppurple","indigo","lightblue","cyan","teal","lightgreen","lime","yellow","amber","orange","deeporange","brown","grey","bluegrey","turquoise","greensea","sunflower","emerland","nephritis","carrot","pumpkin","peterriver","belizehole","alizarin","pomegranate","amethyst","wisteria","clouds","silver","wetasphalt","midnightblue","concrete","asbestos","importMUIColors","current_event","comaseparator","numsort","lastDefined","objtos","ar","oldstop","listeners","indexed","queue","ce","zIndex","sort","_events","nes","es","sep","RegExp","exist","event","subname","cur","nts","inodes","funcs","prune"],"mappings":"4FAAAA,EAAAC,EAAAC,EAAA,sBAAAC,IAAA,IAAAC,EAAAJ,EAAA,IACe,SAAAG,EAAAE,GACf,QAAAC,EAAA,EAAiBA,EAAAC,UAAAC,OAAsBF,IAAA,CACvC,IAAAG,EAAA,MAAAF,UAAAD,GAAAC,UAAAD,GAAA,GACAI,EAAAC,OAAAC,KAAAH,GAEA,oBAAAE,OAAAE,wBACAH,IAAAI,OAAAH,OAAAE,sBAAAJ,GAAAM,OAAA,SAAAC,GACA,OAAAL,OAAAM,yBAAAR,EAAAO,GAAAE,eAIAR,EAAAS,QAAA,SAAAC,GACMT,OAAAP,EAAA,EAAAO,CAAcN,EAAAe,EAAAX,EAAAW,MAIpB,OAAAf,sCCde,SAAAgB,EAAAC,GACf,OCJe,SAAAA,GACf,GAAAC,MAAAC,QAAAF,GAAA,CACA,QAAAhB,EAAA,EAAAmB,EAAA,IAAAF,MAAAD,EAAAd,QAAiDF,EAAAgB,EAAAd,OAAgBF,IACjEmB,EAAAnB,GAAAgB,EAAAhB,GAGA,OAAAmB,GDFSC,CAAiBJ,IEJX,SAAAK,GACf,GAAAC,OAAAC,YAAAlB,OAAAgB,IAAA,uBAAAhB,OAAAmB,UAAAC,SAAAC,KAAAL,GAAA,OAAAJ,MAAAU,KAAAN,GFGmCO,CAAeZ,IGJnC,WACf,UAAAa,UAAA,mDHG2DC,GAJ3DpC,EAAAC,EAAAC,EAAA,sBAAAmB,uCIAA,IAAAgB,GAQA,WAmBA,SAAAC,EAAAC,GAEA,wBAAAA,EACA,UAAAC,MAAA,6DAIA,GAAAD,EAAAE,cAAAC,UACAH,EAAAI,SAAAC,eAAAL,IAGA,UAAAC,MAAA,kFAIA,KAAAD,aAAAM,OAAAC,YAAAP,aAAAM,OAAAE,aAAA,SAAAC,KAAAT,EAAAU,WAGA,UAAAT,MAAA,kFAFAU,KAAAC,GAAAZ,EAMAW,KAAAE,KAAAb,GAoPA,IAAAc,EAAAC,EAAAC,EAAAC,EAkDA,SAAAC,EAAAlB,EAAAmB,EAAAC,GACAN,IAEAH,KAAAU,SAAA,EACAV,KAAAW,WAAAtB,EAAAmB,GACAR,KAAAY,WAAAJ,GACAR,KAAAa,YAAAJ,GAEAT,KAAAU,SACAV,KAAAc,OArSA1B,EAAAR,UAAAmC,MAAA,wDASA3B,EAAAR,UAAAoC,WAAA,+DAQA5B,EAAAR,UAAAsB,KAAA,SAAAe,GAOA,IANA,IACA5B,EACA6B,EACAC,EACAC,EAAAH,EAAAI,iBAAArB,KAAAe,MAAAO,KAAA,MAEAlE,EAAA,EAAmBA,EAAAgE,EAAA9D,OAAqBF,IAGxC8D,GADAK,EAAAvB,MADAX,EAAA+B,EAAAhE,IACAoE,QAAAC,cAAA,WACAzB,KAAA0B,UAAArC,EAAAsC,aACAR,EAAAnB,KAAA4B,UAAAvC,EAAA6B,GACA7B,EAAAwC,WAAAC,aAAAX,EAAA9B,IAYAD,EAAAR,UAAAmD,WAAA,SAAA1C,GACA,IAAA2C,EAAA,GACAC,EAAA5C,EAAA4C,IAAA,EACAC,EAAA7C,EAAA6C,IAAA,EACAC,EAAA9C,EAAA8C,IAAA,EACAC,EAAA/C,EAAA+C,IAAA,EAEA,OADAJ,EAAAjF,EAAA,IAAAkF,EAAA,IAAAC,EAAA,IAAAC,EAAA,IAAAC,EACAJ,GAaA5C,EAAAR,UAAAyD,WAAA,SAAAhD,GACA,IAAA2C,EAAA,GACAM,EAAAC,WAAAlD,EAAAiD,IAAA,EACAE,EAAAD,WAAAlD,EAAAmD,IAAA,EACAC,EAAAF,WAAAlD,EAAAoD,QAAA,EACAC,EAAAH,WAAAlD,EAAAqD,SAAA,EAEA,GAAArD,EAAAsD,IAAAtD,EAAAuD,GAAA,CACA,IAAAD,EAAAE,SAAAxD,EAAAsD,GAAA,QACAC,EAAAC,SAAAxD,EAAAuD,GAAA,QACAD,EAAAG,KAAAC,IAAAD,KAAAE,IAAAL,EAAA,EAAAC,EAAAD,EAAA,GAAAF,EAAA,GACAG,EAAAE,KAAAC,IAAAD,KAAAE,IAAAJ,EAAA,EAAAD,EAAAC,EAAA,GAAAF,EAAA,GACAV,EAAAjF,EAAA,MAAAuF,EAAAK,GAAA,IAAAH,EAAA,OAAAF,EAAAG,EAAAE,GAAA,IAAAH,EAAA,MAAAG,EAAA,IAAAC,EAAA,WAAAN,EAAAG,GAAA,KAAAD,EAAAI,GAAA,OAAAN,EAAAG,GAAA,KAAAD,EAAAE,EAAAE,GAAA,MAAAD,EAAA,IAAAC,EAAA,WAAAN,EAAAG,EAAAE,GAAA,KAAAH,EAAAE,GAAA,OAAAJ,EAAAK,GAAA,KAAAH,EAAAE,GAAA,MAAAC,EAAA,IAAAC,EAAA,UAAAN,EAAA,KAAAE,EAAAE,EAAAE,GAAA,MAAAN,EAAA,KAAAE,EAAAI,GAAA,MAAAD,EAAA,IAAAC,EAAA,WAAAN,EAAAK,GAAA,IAAAH,OAEAR,EAAAjF,EAAA,IAAAuF,EAAA,IAAAE,EAAA,MAAAF,EAAAG,GAAA,IAAAD,EAAA,MAAAF,EAAAG,GAAA,KAAAD,EAAAE,GAAA,KAAAJ,EAAA,KAAAE,EAAAE,GAAA,KAGA,OAAAV,GAWA5C,EAAAR,UAAAqE,eAAA,SAAA5D,GACA,IAEAjC,EACA8F,EAHAlB,EAAA,GACAmB,EAAA9D,EAAA8D,OAAAC,OAAAC,MAAA,KAIA,QAAAhE,EAAA8D,OAAAG,QAAA,MACA,IAAAC,EAAA,GAEA,IAAAnG,EAAA,EAAiBA,EAAA+F,EAAA7F,OAAmBF,GAAA,EACpCmG,EAAAC,KAAAL,EAAA/F,GAAA,IAAA+F,EAAA/F,EAAA,IAGA+F,EAAAI,EAMA,IAFAL,EAAA,IAAAC,EAAA,GAEA/F,EAAA,EAAeA,EAAA+F,EAAA7F,OAAmBF,KAClC,IAAA+F,EAAA/F,GAAAkG,QAAA,OACAJ,GAAA,IAAAC,EAAA/F,IAKA,OADA4E,EAAAjF,EAAAmG,EACAlB,GAcA5C,EAAAR,UAAA6E,cAAA,SAAApE,GACA,IAAA2C,EAAA5C,EAAAR,UAAAqE,eAAA5D,GAEA,OADA2C,EAAAjF,GAAA,IACAiF,GAWA5C,EAAAR,UAAA8E,cAAA,SAAArE,GACA,IAAA2C,EAAA,GACAW,EAAAJ,WAAAlD,EAAAsD,KAAA,EACAC,EAAAL,WAAAlD,EAAAuD,KAAA,EACAe,EAAApB,WAAAlD,EAAAsE,KAAA,EACAC,EAAArB,WAAAlD,EAAAuE,KAAA,EACAC,EAAAF,EAAAhB,EACAmB,EAAAF,EACAG,EAAAxB,WAAAoB,GAAApB,WAAAI,GACAqB,EAAAJ,EAEA,OADA5B,EAAAjF,EAAA,IAAA8G,EAAA,IAAAC,EAAA,IAAAnB,EAAA,IAAAC,EAAA,UAAAmB,EAAA,IAAAC,EAAA,IAAArB,EAAA,IAAAC,EAAA,UAAAiB,EAAA,IAAAG,EACAhC,GAWA5C,EAAAR,UAAAqF,aAAA,SAAA5E,GACA,IAAA2C,EAAA,GACAkC,EAAA3B,WAAAlD,EAAA6E,IAAA,EACAP,EAAApB,WAAAlD,EAAAsE,KAAA,EACAC,EAAArB,WAAAlD,EAAAuE,KAAA,EACAC,EAAAF,EAAAO,EACAJ,EAAAF,EACAG,EAAAxB,WAAAoB,GAAApB,WAAA2B,GACAF,EAAAJ,EAEA,OADA5B,EAAAjF,EAAA,IAAA8G,EAAA,IAAAC,EAAA,IAAAI,EAAA,IAAAA,EAAA,UAAAH,EAAA,IAAAC,EAAA,IAAAE,EAAA,IAAAA,EAAA,UAAAL,EAAA,IAAAG,EACAhC,GAYA5C,EAAAR,UAAAgD,UAAA,SAAAvC,EAAA6B,GACA,IAAA9D,EACA+G,EACAC,EAAA3E,SAAA4E,gBAAA,qCAEA,IAAAjH,EAAA,EAAeA,EAAAiC,EAAAsC,WAAArE,OAA+BF,IAC9C+G,EAAA9E,EAAAsC,WAAAvE,IAEA,IAAA4C,KAAAgB,WAAAsC,QAAAa,EAAAG,OACAF,EAAAG,aAAAJ,EAAAG,KAAAH,EAAAK,OAIA,IAAApH,KAAA8D,EACAkD,EAAAG,aAAAnH,EAAA8D,EAAA9D,IAGA,OAAAgH,GAWAhF,EAAAR,UAAA8C,UAAA,SAAArC,GAIA,IAHA,IAAA8E,EACAM,EAAA,GAEArH,EAAA,EAAmBA,EAAAiC,EAAA/B,OAAoBF,IAAA,CAGvC,GAFA+G,EAAA9E,EAAAjC,IAEA,IAAA4C,KAAAgB,WAAAsC,QAAAa,EAAAG,QAAA,IAAAH,EAAAK,MAAAlB,QAAA,KACA,UAAAhE,MAAA,oIAGAmF,EAAAN,EAAAG,MAAAH,EAAAK,MAGA,OAAAC,GA6EAlE,EAAAmE,OAAA,SAAApC,GACA,OAAAA,GAGA/B,EAAAoE,KAAA,SAAArC,GACA,OAAAQ,KAAA8B,IAAAtC,EAAAQ,KAAA+B,IAAA,MAGAtE,EAAAuE,SAAA,SAAAxC,GACA,SAAAQ,KAAAiC,IAAA,EAAAzC,EAAA,IAGA/B,EAAAyE,QAAA,SAAA1C,GACA,OAAAQ,KAAAiC,IAAAzC,EAAA,IAGA/B,EAAA0E,gBAAA,SAAA3C,GACA,IAAA4C,EAAA,EAAApC,KAAA8B,IAAAtC,GAAA,GAAAQ,KAAA+B,KACAM,EAAArC,KAAAiC,IAAAG,EAAA,KACAE,EAAAtC,KAAAiC,IAAA,EAAAzC,EAAA,GAEA,SAAA8C,GADA,EAAAtC,KAAAuC,IAAAvC,KAAA8B,IAAAO,GAAA,IAAArC,KAAA+B,OACAO,GAgBA7E,EAAA3B,UAAA+B,WAAA,SAAAtB,EAAAmB,GACA,IAAA8E,EAEA,wBAAAjG,EACA,UAAAC,MAAA,wDAIA,GAAAD,EAAAE,cAAAC,UACAH,EAAAI,SAAAC,eAAAL,IAGA,UAAAC,MAAA,6EAMA,GAFAU,KAAAuF,SAAAlG,EAEAmB,KAAAgF,KAAA,CACA,IAAAC,EAAAzF,KAEAsF,EAAA,SAAAI,GACA,IAAAC,EAAAlG,SAAAmG,cAAA,OACAD,EAAAE,UAAA7F,KAAA8F,aACA,IAAAC,EAAAJ,EAAAK,cAAA,OAEA,IAAAD,EACA,UAAAzG,MAAA,0DAAAkB,EAAAgF,MAGAC,EAAAxF,GAAA8F,EACAN,EAAAxF,GAAAsE,aAAA,gBACAkB,EAAAxF,GAAAsE,aAAA,iBACAkB,EAAAF,SAAAU,YAAAR,EAAAxF,IACAwF,EAAA/E,SAAA,EACA+E,EAAA3E,OACA2E,EAAA,MAGA,IAAAS,EAAA,IAAAvG,OAAAwG,eAIA,OAHAD,EAAAE,iBAAA,OAAAd,GACAY,EAAAG,KAAA,MAAA7F,EAAAgF,WACAU,EAAAI,OAIA,OAAAjH,EAAAE,aACA,KAAAI,OAAA4G,cACA,KAAA5G,OAAAC,WACA,KAAAD,OAAAE,YACAG,KAAAC,GAAAZ,EACAW,KAAAU,SAAA,EACA,MAEA,KAAAf,OAAA6G,kBACAf,EAAAzF,MAEAsF,EAAA,SAAAI,GACA,IAAAD,EAAA/E,QAAA,CAMA,GAFA+E,EAAAxF,GAAAZ,EAAAoH,iBAAApH,EAAAoH,gBAAAT,cAAA,QAEAP,EAAAxF,IAAAyF,EACA,UAAApG,MAAA,+DACWmG,EAAAxF,KACXZ,EAAAqH,aAAA,oBACAjB,EAAAF,SAAAoB,aAAAlB,EAAAxF,GAAAZ,GACAoG,EAAAF,SAAAqB,YAAAvH,GACAoG,EAAAxF,GAAAsE,aAAA,gBACAkB,EAAAxF,GAAAsE,aAAA,kBAGAkB,EAAA/E,SAAA,EACA+E,EAAA3E,OACA2E,EAAA,YAKApG,EAAA+G,iBAAA,OAAAd,GAGA,MAEA,QACA,UAAAhG,MAAA,0FAYAiB,EAAA3B,UAAAgC,WAAA,SAAAJ,GACA,IAAAqG,EAAA,yEACAC,EAAA,oCAEA,QAAAC,IAAAvG,KAAAjB,cAAA9B,OACA,UAAA6B,MAAA,8DAMA,IAJAkB,KAAA,IAIAwG,OAAA,IAAAH,EAAAvD,QAAA9C,EAAAwG,MACA,UAAA1H,MAAA,wBAAAkB,EAAAwG,KAAA,wCAMA,GAJAhH,KAAAgH,KAAAxG,EAAAwG,MAAAH,EAAA,GAIArG,EAAAyG,QAAA,IAAAH,EAAAxD,QAAA9C,EAAAyG,OACA,UAAA3H,MAAA,wBAAAkB,EAAAyG,MAAA,sCAmBA,GAjBAjH,KAAAiH,MAAAzG,EAAAyG,OAAAH,EAAA,GAGA9G,KAAAkH,MAAA,IAAAvH,OAAAwH,UAAAC,UAAA9D,QAAA,cAAA3D,OAAAwH,UAAAC,UAAA9D,QAAA,kBAAA3D,OAAAwH,UAAAC,UAAA9D,QAAA,SACAtD,KAAAqH,SAAA/G,EAAAE,EAAA6G,SAAA,KACArH,KAAAsH,MAAAhH,EAAAE,EAAA8G,MAAA,MACAtH,KAAAuH,QAAAjH,EAAAE,EAAA+G,QAAA,GACAvH,KAAAwH,YAAAhH,EAAAiH,eAAA,iBAAAjH,EAAAgH,YAAAxH,KAAAkH,KACAlH,KAAA0H,eAAAlH,EAAAkH,aACA1H,KAAA2H,cAAAnH,EAAAmH,YACA3H,KAAA4H,QAAApH,EAAAoH,QACA5H,KAAA6H,IAAA,GACA7H,KAAA8H,YAAA9H,KAAA+H,aAAA/H,KAAAgI,UAAAhI,KAAAiI,MAAAjI,KAAAkI,OAAA,KACAlI,KAAAmI,kBAAA3H,EAAAiH,eAAA,sBAAAjH,EAAA2H,gBACAnI,KAAAoI,mBAAA5H,EAAA4H,oBAAA7H,EAAAmE,OACA1E,KAAAqI,mBAAA7H,EAAA6H,oBAAA9H,EAAAmE,OAEA1E,KAAAsH,OAAAtH,KAAAqH,SACA,UAAA/H,MAAA,6DAYAiB,EAAA3B,UAAAiC,YAAA,SAAAJ,GAEA,GAAAA,KAAAlB,cAAA+I,SACA,UAAAhJ,MAAA,gEAGAU,KAAAS,YAAA,cA6BAF,EAAA3B,UAAA2J,QAAA,WACA,IAAAnL,EAAAoL,EAAAtF,EAAAuF,EAAAC,EAAAC,EAAAC,EAAAC,EAIA,IAHAA,EAAAF,EAAAC,EAAA,EACAJ,EAAAxI,KAAAC,GAAAoB,iBAAA,QAEAjE,EAAA,EAAeA,EAAAoL,EAAAlL,OAAkBF,IACjC8F,EAAAsF,EAAApL,GAEA4C,KAAA8I,YAAA5F,KAIAwF,EAAA,CACAzI,GAAAiD,EACA5F,OAAAwF,KAAAiG,KAAA7F,EAAA8F,mBAGAC,MAAAP,EAAApL,QACAqC,OAAAuJ,iBAAAC,MACAD,QAAAC,KAAA,yDAAAjG,IAMAlD,KAAA6H,IAAArE,KAAAkF,GACAxF,EAAAkG,MAAAC,gBAAAX,EAAApL,OAAA,KAAAoL,EAAApL,OAAA,EAAA0C,KAAAuH,SACArE,EAAAkG,MAAAE,iBAAAZ,EAAApL,OAAA0C,KAAAuH,QACAmB,EAAApL,QAAA0C,KAAAuH,QACAoB,GAAAD,EAAApL,OACA0C,KAAAuJ,WAAAnM,KAWA,IARAuL,EAAA,IAAAA,EAAA,EAAAA,EACA3I,KAAAsH,MAAA,OAAAtH,KAAAsH,MAAAtH,KAAAqH,SAAA,EAAArH,KAAAsH,MACAtH,KAAAgI,UAAAhI,KAAAsH,OAAAkB,EAAAlL,OAAA,EAAAkL,EAAAlL,OAAA,KAEA0C,KAAA0H,cACA1H,KAAA6H,IAAA2B,UAGApM,EAAA,EAAeA,EAAA4C,KAAA6H,IAAAvK,OAAqBF,IAAA,CAGpC,OAFAsL,EAAA1I,KAAA6H,IAAAzK,GAEA4C,KAAAgH,MACA,cACA0B,EAAAe,QAAAzJ,KAAAgI,UAAA5K,EACAsL,EAAArB,SAAArH,KAAAqH,SAAArH,KAAAsH,MACA,MAEA,eACAoB,EAAAe,QAAAb,EAAAD,EAAA3I,KAAAqH,SACAqB,EAAArB,SAAAqB,EAAApL,OAAAqL,EAAA3I,KAAAqH,SACA,MAEA,WACA,YACA,YACAqB,EAAAe,QAAA,EACAf,EAAArB,SAAArH,KAAAqH,SACA,MAEA,oBACAnE,EAAAwF,EAAAzI,GACAwI,EAAAzI,KAAA0B,UAAAwB,GACAwF,EAAAe,QAAAZ,GAAAvI,EAAAmI,EAAA,cAAAzI,KAAAgI,YAAA,GACAU,EAAArB,SAAA/G,EAAAmI,EAAA,iBAAAzI,KAAAqH,UACAwB,OAAA9B,IAAA0B,EAAA,cAAAC,EAAAe,QAAAf,EAAAe,QAAAf,EAAArB,SACArH,KAAA8H,YAAAhF,KAAAE,IAAAhD,KAAA8H,YAAAY,EAAAe,QAAAf,EAAArB,UACA,MAEA,eACAnE,EAAAwF,EAAAzI,GACAwI,EAAAzI,KAAA0B,UAAAwB,GACAwF,EAAAe,QAAAnJ,EAAAmI,EAAA,cAAAzI,KAAAgI,YAAA,EACAU,EAAArB,SAAA/G,EAAAmI,EAAA,iBAAAzI,KAAAqH,UACArH,KAAA8H,YAAAhF,KAAAE,IAAAhD,KAAA8H,YAAAY,EAAAe,QAAAf,EAAArB,UAIAuB,GAAAF,EAAApL,OACA0C,KAAA8H,YAAA9H,KAAA8H,aAAA9H,KAAAqH,WAmBA9G,EAAA3B,UAAA8K,OAAA,WACA,IAAAjE,EAAAzF,KAGA,GAFAA,KAAA+H,cAAA/H,KAAAiI,MAEAjI,KAAA+H,cAAA,EACA/H,KAAA2J,OACA3J,KAAA4J,YACK,MAAA5J,KAAA+H,cAAA/H,KAAA8H,aAaL,OAJA9H,KAAA6J,aACA7J,KAAAkI,OAAA9H,EAAA,WACAqF,EAAAiE,YAVA1J,KAAA2J,OACA3J,KAAA+H,aAAA/H,KAAA8H,YACA9H,KAAA6J,QAEA7J,KAAA2H,aACA3H,KAAA8J,UAUA9J,KAAAS,SAAAT,MAEAA,KAAA+J,mBACA/J,KAAA+J,iBAAA/J,MACAA,KAAA+J,iBAAA,OAkBAxJ,EAAA3B,UAAAiL,MAAA,WACA,IAAAzM,EAAA4M,EAAA9G,EAAA6E,EAGA,IAFAA,EAAA/H,KAAAoI,mBAAApI,KAAA+H,aAAA/H,KAAA8H,aAAA9H,KAAA8H,YAEA1K,EAAA,EAAeA,EAAA4C,KAAA6H,IAAAvK,OAAqBF,IAEpC4M,GAAAjC,GADA7E,EAAAlD,KAAA6H,IAAAzK,IACAqM,SAAAvG,EAAAmE,SACA2C,EAAAhK,KAAAqI,mBAAAvF,KAAAE,IAAA,EAAAF,KAAAC,IAAA,EAAAiH,KAEA9G,EAAA8G,eACA9G,EAAA8G,WACA9G,EAAAjD,GAAAmJ,MAAAE,iBAAAxG,KAAAmH,MAAA/G,EAAA5F,QAAA,EAAA0M,IACAhK,KAAAuJ,WAAAnM,KAkBAmD,EAAA3B,UAAA2K,WAAA,SAAAW,GACA,GAAAlK,KAAAwH,aAAAxH,KAAA6H,KAAA7H,KAAA6H,IAAAqC,GAAA,CACA,IAAAxB,EAAA1I,KAAA6H,IAAAqC,GACAC,EAAAzB,EAAAzI,GAAAmK,WAAA,GACA1B,EAAAzI,GAAA4B,WAAAC,aAAAqI,EAAAzB,EAAAzI,IACAyI,EAAAzI,GAAAkK,IAcA5J,EAAA3B,UAAAkC,KAAA,WAEAd,KAAA8H,YAAA,EACA9H,KAAA+H,aAAA,EACA/H,KAAA6H,IAAA,GAEA,IAAAzI,EAAAY,KAAAC,IACAD,KAAAuI,UACAvI,KAAAqK,UAEArK,KAAA4H,SACA5H,KAAA4H,QAAA5H,OAcAO,EAAA3B,UAAAyL,QAAA,WACA,OAAArK,KAAAiH,OACA,aACA,OAEA,gBACAjH,KAAAsK,OACA,MAEA,iBACA,IAAA7E,EAAAzF,KACAuK,EAAA,SAAAA,IACA9E,EAAA+E,aAAA/E,EAAAF,SAAA,KACAE,EAAA6E,OACA3K,OAAA8K,oBAAA,SAAAF,KAIA5K,OAAAyG,iBAAA,SAAAmE,GACAA,MAgBAhK,EAAA3B,UAAA8L,UAAA,WACA,WAAA1K,KAAA+H,aAAA,QAAA/H,KAAA+H,eAAA/H,KAAA8H,YAAA,kBAWAvH,EAAA3B,UAAAgL,MAAA,WACA,OAAA5J,KAAA2K,iBAAA,IAWApK,EAAA3B,UAAAgM,OAAA,WACA,OAAA5K,KAAA2K,iBAAA,IASApK,EAAA3B,UAAA+L,iBAAA,SAAAX,GAIA,OAHAA,EAAAlH,KAAAC,IAAA,EAAAD,KAAAE,IAAA,EAAAgH,IACAhK,KAAA+H,aAAAjF,KAAA+H,MAAA7K,KAAA8H,YAAAkC,GACAhK,KAAA6J,QACA7J,MAgBAO,EAAA3B,UAAA0L,KAAA,SAAArC,EAAAxH,GAGA,GAFAT,KAAA+J,iBAAA,KAEA9B,GAAA,oBAAAA,EACAjI,KAAA+J,iBAAA9B,EAEAA,EAAA,UACK,GAAAA,GAAA,kBAAAA,EACL,UAAA3I,MAAA,+BAcA,OAVAmB,GAAA,oBAAAA,IAAAT,KAAA+J,mBACA/J,KAAA+J,iBAAAtJ,GAGAT,KAAAiI,SAAA,EAEAjI,KAAAkI,QACAlI,KAAA0J,SAGA1J,MASAO,EAAA3B,UAAA+K,KAAA,WAMA,OALA3J,KAAAkI,SACA7H,EAAAL,KAAAkI,QACAlI,KAAAkI,OAAA,MAGAlI,MAUAO,EAAA3B,UAAAkL,QAAA,WAEA,IAAA1M,EAAA8F,EAEA,IAHAlD,KAAA2J,OAGAvM,EAAA,EAAeA,EAAA4C,KAAA6H,IAAAvK,OAAqBF,KACpC8F,EAAAlD,KAAA6H,IAAAzK,IACA6C,GAAAmJ,MAAAE,iBAAA,KACApG,EAAAjD,GAAAmJ,MAAAC,gBAAA,KACArJ,KAAAuJ,WAAAnM,IAyBAmD,EAAA3B,UAAAkK,YAAA,SAAA7I,GACA,IAAA6K,EACAC,EAAA9K,EAAAyG,aAAA,eAEA,cAAAqE,EACA,UAAAA,IAGA/K,KAAAmI,oBACA2C,EAAA7K,EAAA+K,yBACAvI,QAAAqI,EAAApI,SAcAnC,EAAA3B,UAAA8C,UAAA,SAAArC,GACA,IAAA8E,EACAM,EAAA,GAEA,GAAApF,KAAAsC,WACA,QAAAvE,EAAA,EAAqBA,EAAAiC,EAAAsC,WAAArE,OAA+BF,IAEpDqH,GADAN,EAAA9E,EAAAsC,WAAAvE,IACAkH,MAAAH,EAAAK,MAIA,OAAAC,GAWAlE,EAAA3B,UAAA4L,aAAA,SAAAvK,EAAAgL,GACA,IAAAC,EAAAlL,KAAAmL,UACAC,EAAAF,EAAAlL,KAAAqL,eACAC,EAAArL,EAAA+K,wBACAO,EAAAD,EAAA5I,OACA8I,EAAAN,EAAAI,EAAAG,IAMA,OAAAD,EAAAD,GADAN,KAAA,IACAG,GALAI,EAAAD,GAKAL,GASA3K,EAAA3B,UAAAyM,aAAA,WACA,IAAAK,EAAA1L,KAAA2L,QAAAC,aACAC,EAAAlM,OAAAmM,YAEA,OAAAJ,EAAAG,EACAA,EAEAH,GAUAnL,EAAA3B,UAAAuM,QAAA,WACA,OAAAxL,OAAAoM,aAAA/L,KAAA2L,QAAAK,WAGA7L,EAAA,WACAI,EAAA3B,UAAA+M,UAUApL,EAAA3B,UAAA+M,QAAAhM,OAAAF,SAAAwM,gBAOA7L,EACAT,OAAAuM,uBAAAvM,OAAAwM,6BAAAxM,OAAAyM,0BAAAzM,OAAA0M,wBAAA1M,OAAA2M,yBAAA,SAEA7L,GACA,OAAAd,OAAA4M,WAAA9L,EAAA,SAUAJ,EACAV,OAAA6M,sBAAA7M,OAAA8M,4BAAA9M,OAAA+M,yBAAA/M,OAAAgN,uBAAAhN,OAAAiN,wBAAA,SAAAC,GACA,OAAAlN,OAAAmN,aAAAD,MAiBAvM,EAAA,SAAAkE,EAAAuI,GACA,IAAAtI,EAAA5B,SAAA2B,EAAA,IACA,OAAAC,GAAA,EAAAA,EAAAsI,QAOKhG,KAFQ5H,EAAA,WACb,OAAAoB,GACKyM,MAAAC,EAFM,OAENC,EAAAD,QAAA9N,GA1lCL,yBCRAQ,OAAAwN,IAAarQ,EAAQ,MAcrB,IAAAsQ,EAAA,SAAAD,GACA,IAKAE,EALAC,EAAA,GACAlN,EAAAT,OAAAuM,uBAAAvM,OAAAwM,6BAAAxM,OAAAyM,0BAAAzM,OAAA0M,wBAAA1M,OAAA2M,yBAAA,SAAA7L,GAEA,OADA8L,WAAA9L,EAAA,QAAA8M,MAAAC,YACA,GAGAlP,EAAAD,MAAAC,SAAA,SAAAmP,GACA,OAAAA,aAAApP,OAAA,kBAAAZ,OAAAmB,UAAAC,SAAAC,KAAA2O,IAEAC,EAAA,EACAC,EAAA,UAAAJ,MAAA1O,SAAA,IAoBA+O,EAAAL,KAAAM,KAAA,WACA,WAAAN,MAEAO,EAAA,SAAAC,GACA,IAAAN,EAAAzN,KAEA,SAAA+N,EACA,OAAAN,EAAAO,EAGA,IAAAC,EAAAR,EAAAO,EAAAD,EACAN,EAAAS,GAAAT,EAAAU,IAAAF,EACAR,EAAAW,GAAAX,EAAAU,IAAAF,EACAR,EAAAO,EAAAD,GAEA9F,EAAA,SAAA8F,GAGA,SAAAA,EACA,OAHA/N,KAGAqO,IAHArO,KAMAqO,IAAAN,GAEA1G,EAAA,SAAA0G,GACA,IAAAN,EAAAzN,KAEA,SAAA+N,EACA,OAAAN,EAAAU,IAGAV,EAAAO,EAAAP,EAAAO,EAAAD,EAAAN,EAAAU,IACAV,EAAAU,IAAAJ,GAEAO,EAAA,WACA,IAAAb,EAAAzN,YACAsN,EAAAG,EAAAZ,IACAY,EAAAc,SACApB,EAAA,aAAAM,EAAAZ,GAAAY,IAEAe,EAAA,WACA,IAAAf,EAAAzN,KAEAyN,EAAAgB,cAIAnB,EAAAG,EAAAZ,IACAY,EAAAc,SACAd,EAAAgB,KAAAhB,EAAAiB,MAAAjB,EAAAS,IAEAS,EAAA,WACA,IAAAlB,EAAAzN,KAEAyN,EAAAgB,OAIAhB,EAAAS,EAAAT,EAAAiB,MAAAjB,EAAAgB,YACAhB,EAAAgB,KACAnB,EAAAG,EAAAZ,IAAAY,EACAmB,MAEAL,EAAA,WACA,IACAM,EADApB,EAAAzN,KAGA,GAAA1B,EAAAmP,EAAAxG,OAAA,CACA4H,EAAA,GAEA,QAAAC,EAAA,EAAAC,EAAAtB,EAAAxG,MAAA3J,OAA0CwR,EAAAC,EAAQD,IAClDD,EAAAC,IAAArB,EAAAxG,MAAA6H,IAAArB,EAAAuB,IAAAF,GAAArB,EAAAxG,MAAA6H,IAAArB,EAAAwB,OAAAxB,EAAAO,QAGAa,GAAApB,EAAAxG,OAAAwG,EAAAuB,IAAAvB,EAAAxG,OAAAwG,EAAAwB,OAAAxB,EAAAO,GAGAP,EAAAyB,IAAAL,IAEAD,EAAA,SAAAA,EAAAO,GAEA,GAAAA,EAAA,CAUA,IAAAC,EAAA,EAEA,QAAAhS,KAAAkQ,EACA,GAAAA,EAAA7F,eAAArK,GAAA,CACA,IAAAqQ,EAAAH,EAAAlQ,GACA8Q,EAAAT,EAAAiB,MAEAU,IACA3B,EAAAO,GAAAE,EAAAT,EAAAS,IAAAT,EAAAU,IAAAV,EAAAY,KAEAZ,EAAAO,GAAA,WACAV,EAAAlQ,GACAqQ,EAAAO,EAAA,EACAoB,IAEA,SAAA3B,GACAlB,WAAA,WACAY,EAAA,eAAAM,EAAAZ,GAAAY,KAFA,CAIWA,IAGXA,EAAAc,SAIAlB,IAAA+B,GAAAhP,EAAAwO,QAlCAvB,IAEAA,EAAAjN,EAAAwO,KAqEAxB,EAAA,SAAAA,EAAAK,EAAA4B,EAAAnB,EAAAE,EAAAM,EAAAQ,EAAAD,GACA,IAAAK,EAAA,CACAzC,GA9KAc,GAAAD,KAAA7O,SAAA,IA+KAoI,MAAAwG,EACAuB,IAAAK,EACAnB,IACAF,EAAA,EACAG,IAAAC,EAAAF,EACAG,IAAA,EACAK,MACAQ,MACAD,UAAA7B,EAAAmC,OACAC,OAAA1B,EACA7F,QACAZ,WACAsC,KAAA2E,EACAE,QACAG,SACAJ,UAEAjB,EAAAgC,EAAAzC,IAAAyC,EACA,IACAlS,EADAgS,EAAA,EAGA,IAAAhS,KAAAkQ,EACA,GAAAA,EAAA7F,eAAArK,IAGA,KAFAgS,EAGA,MAMA,OADA,GAAAA,GAAAR,IACAU,GAuLA,OA1KAlC,EAAAqC,KAAA7B,EAUAR,EAAAsC,QAAA,SAAA7C,GACA,OAAAS,EAAAT,IAAA,MAYAO,EAAAmC,OAAA,SAAAI,GACA,OAAAA,GAYAvC,EAAAwC,QAAA,SAAAD,GACA,OAAA7M,KAAAiC,IAAA4K,EAAA,MAYAvC,EAAAyC,OAAA,SAAAF,GACA,OAAA7M,KAAAiC,IAAA4K,EAAA,MAYAvC,EAAA0C,UAAA,SAAAH,GACA,MAAAA,EACA,SAGA,MAAAA,EACA,SAGA,IAAAI,EAAA,IAAAJ,EAAA,KACAK,EAAAlN,KAAAmN,KAAA,MAAAF,KACAzN,EAAA0N,EAAAD,EAEAvN,GAAAwN,EAAAD,EAEAG,EAHApN,KAAAiC,IAAAjC,KAAAuC,IAAA/C,GAAA,MAAAA,EAAA,QAEAQ,KAAAiC,IAAAjC,KAAAuC,IAAA7C,GAAA,MAAAA,EAAA,QACA,GACA,YAAA0N,cAYA9C,EAAA+C,OAAA,SAAAR,GACA,MAAAA,EACA,SAGA,IAAA3B,EAAA,QACA,OAAA2B,MAAA3B,EAAA,GAAA2B,EAAA3B,IAYAZ,EAAAgD,QAAA,SAAAT,GACA,MAAAA,EACA,SAIA,IAAA3B,EAAA,QACA,OAFA2B,GAAA,GAEAA,IAAA3B,EAAA,GAAA2B,EAAA3B,GAAA,GAYAZ,EAAAiD,QAAA,SAAAV,GACA,OAAAA,OACAA,EAGA7M,KAAAiC,IAAA,MAAA4K,GAAA7M,KAAAwN,KAAAX,EAAA,SAAA7M,KAAA+B,IAAA,OAYAuI,EAAAmD,OAAA,SAAAZ,GACA,IAAA3B,EAAA,OACAwC,EAAA,KAoBA,OAjBAb,EAAA,EAAAa,EACAxC,EAAA2B,IAEAA,EAAA,EAAAa,EAEAxC,GADA2B,GAAA,IAAAa,GACAb,EAAA,IAEAA,EAAA,IAAAa,EAEAxC,GADA2B,GAAA,KAAAa,GACAb,EAAA,MAGA3B,GADA2B,GAAA,MAAAa,GACAb,EAAA,SAQAhQ,OAAAyN,OACAA,EAnZA,CAoZC,oBAAAD,IAAA,aAA2CA,KAe5CsD,EAAA,SAAAC,GAmBA,SAAAD,EAAAE,EAAA1F,GACA,GAAA0F,EAAA,CACA,GAAAA,EAAAC,SACA,OAAAC,EAAAF,GAGA,GAAAG,EAAAH,EAAA,UAAAF,EAAAvB,IACA,OAAAuB,EAAAvB,IAAAlC,MAAAyD,EAAAE,GAGA,GAAAA,aAAAI,EACA,OAAAJ,EAGA,SAAA1F,EACA,IAEA,OAAA4F,EADAF,EAAAK,EAAAC,IAAAjL,cAAAxG,OAAAmR,KAES,MAAAjL,GACT,aAOA,WAAAwL,EAFAP,EAAA,MAAAA,EAAA,OAAAA,EACA1F,EAAA,MAAAA,EAAA,OAAAA,GA3CAwF,EAAAU,QAAA,QA+CAV,EAAA5R,SAAA,WACA,eAAAmB,KAAAmR,SAGAV,EAAAW,EAAA,GACA,IAAAJ,EAAA,CACAK,IAAAX,EAAA/Q,OACAsR,IAAAP,EAAA/Q,OAAAF,UAEAgR,EAAAW,EAAAJ,OAEA,IAAAM,EAAA,iBACAC,EAAA/R,OACAgS,EAAAjP,WACAkP,EAAA5O,SACA6O,EAAA5O,KACA6O,EAAAD,EAAA1O,IACA4O,EAAAF,EAAA3O,IACAsC,EAAAqM,EAAArM,IAEAR,GADA6M,EAAA3M,IACA2M,EAAA7M,IAEAgN,GADAH,EAAA7G,MACA,IAEAiH,EAAArU,OAAAmB,UAAAC,SAEAkT,EAAA,mTAIAC,GAFAvB,EAAAW,EAAAa,UAAA,SAEA,eACAC,EAAA,CACAC,GAAA,EACAC,GAAA,GAEAC,EAAA,6DACAC,EAAA,8DACAC,EAAA,6CACA7E,EAAA,EACAC,EAAA,UAAAJ,MAAA1O,SAAA,IACA2T,EAAA,SAAAvS,GACA,OAAAA,KAAA+G,KAAA/G,EAAA+G,KAAA6K,GAAAlE,GAAAD,KAAA7O,SAAA,KAEA4T,EAAA,+BACAC,EAAA,6BACAC,EAAA,GAUAlC,EAAAmC,IAAA,SAAAA,GACA,eAAAA,EAAA,MAGA,SAAAC,EAAA5S,EAAAkE,GACA,GAAAA,EAAA,CAaA,GAZA,SAAAlE,IACAA,EAAA+Q,EAAAC,IAAA6B,eAAA3O,EAAA4O,MAAA5O,EAAA,eAGA,YAAAlE,IACAA,EAAA+Q,EAAAC,IAAA+B,cAAA7O,EAAA4O,MAAA5O,EAAA,eAGA,iBAAAlE,IACAA,EAAA4S,EAAA5S,IAGA,iBAAAkE,EACA,UAAAlE,EAAA2Q,SACA,UAAAzM,EAAA8O,UAAA,KACAhT,EAAAiT,eAAAT,EAAAtO,EAAA8O,UAAA,IAGA,QAAA9O,EAAA8O,UAAA,KACAhT,EAAAiT,eAAAR,EAAAvO,EAAA8O,UAAA,IAGAhT,EAAAyG,aAAAvC,GACS,QAAAA,EACTlE,EAAAkT,UAEA,KAIA,MAAAlT,EAAA2Q,UACA,QAAA1S,KAAAiG,EACA,GAAAA,EAAAmN,GAAApT,GAAA,CACA,IAAA6P,EAAAwD,EAAApN,EAAAjG,IAEA6P,EACA,UAAA7P,EAAA+U,UAAA,KACAhT,EAAAmT,eAAAX,EAAAvU,EAAA+U,UAAA,GAAAlF,GACe,QAAA7P,EAAA+U,UAAA,KACfhT,EAAAmT,eAAAV,EAAAxU,EAAA+U,UAAA,GAAAlF,GAEA9N,EAAAsE,aAAArG,EAAA6P,GAGA9N,EAAAoT,gBAAAnV,QAIO,SAAAiG,IACPlE,EAAAkT,UAAAhP,EAAA4O,WAGA9S,EAAA+Q,EAAAC,IAAA5M,gBAAAqO,EAAAzS,GAGA,OAAAA,EAyBA,SAAA6Q,EAAAwC,EAAAtM,GAGA,iBAFAA,EAAAuK,EAAA3S,UAAA6C,YAAA3C,KAAAkI,IAGAuM,SAAAD,KAGA,SAAAtM,KAAAsM,aAAAjV,aAAAC,SAAAD,MAAAC,QAAAgV,OAIA,QAAAtM,GAAA,OAAAsM,GAAAtM,UAAAsM,GAAA,OAAAA,GAAA,UAAAtM,GAAAsM,IAAA7V,OAAA6V,IAAAxB,EAAAhT,KAAAwU,GAAAE,MAAA,MAAA/R,eAAAuF,GA+EA,SAAAyM,EAAAC,EAAAC,EAAAC,GAkBA,OAjBA,SAAAC,IACA,IAAAC,EAAAzV,MAAAO,UAAA4U,MAAA1U,KAAAzB,UAAA,GACA0W,EAAAD,EAAAxS,KAAA,UACA0S,EAAAH,EAAAG,MAAAH,EAAAG,OAAA,GACAC,EAAAJ,EAAAI,MAAAJ,EAAAI,OAAA,GAEA,OAAAD,EAAA1C,GAAAyC,IAfA,SAAAG,EAAAC,GACA,QAAA/W,EAAA,EAAAgX,EAAAF,EAAA5W,OAAsCF,EAAAgX,EAAQhX,IAC9C,GAAA8W,EAAA9W,KAAA+W,EACA,OAAAD,EAAA1Q,KAAA0Q,EAAAG,OAAAjX,EAAA,OAaAkX,CAAAL,EAAAF,GACAH,IAAAI,EAAAD,IAAAC,EAAAD,KAGAE,EAAA3W,QAAA,YAAA0W,EAAAC,EAAAM,SACAN,EAAAzQ,KAAAuQ,GACAC,EAAAD,GAAAL,EAAA1G,MAAA2G,EAAAG,GACAF,IAAAI,EAAAD,IAAAC,EAAAD,KAuBA,SAAAS,EAAAC,GACA,OAAAA,EAAA,IAAA5P,EAAA,IAvJA4L,EAAAW,EAAAyB,IACApC,EAAAW,EAAAvE,GAAA2F,EAyDA/B,EAAAiE,OAAA,WACA,IAAAC,EAAA,gBACAC,EAAA,2DAmBA,gBAAAC,EAAAC,GACA,OAAAvD,EAAAsD,GAAAE,QAAAJ,EAAA,SAAAK,EAAA9W,GACA,OAnBA,SAAA8W,EAAA9W,EAAA4W,GACA,IAAAjG,EAAAiG,EAaA,OAZA5W,EAAA6W,QAAAH,EAAA,SAAAI,EAAA1Q,EAAA2Q,EAAAC,EAAAC,GACA7Q,KAAA4Q,EAEArG,IACAvK,KAAAuK,IACAA,IAAAvK,IAGA,mBAAAuK,GAAAsG,IAAAtG,UAGAA,GAAA,MAAAA,MAAAiG,EAAAE,EAAAnG,GAAA,GAMAuG,CAAAJ,EAAA9W,EAAA4W,MAvBA,GA4CArE,EAAAW,EAAAiE,MAhBA,SAAAA,EAAAP,GACA,sBAAAA,GAAArX,OAAAqX,OACA,OAAAA,EAGA,IAAAjG,EAAA,IAAAiG,EAAAvV,YAEA,QAAArB,KAAA4W,EACAA,EAAAxD,GAAApT,KACA2Q,EAAA3Q,GAAAmX,EAAAP,EAAA5W,KAIA,OAAA2Q,GAkCA4B,EAAAW,EAAAqC,SA0CAhD,EAAA+D,MAUA/D,EAAAgE,IA/BA,SAAAD,GACA,WAAAA,EAAA3P,EAAA,KAwCA4L,EAAAH,IAAA,SAAAgF,GACA,OAAA5D,EAAApB,IAAAG,EAAA+D,IAAAc,KAYA7E,EAAA8E,IAAA,SAAAD,GACA,OAAA5D,EAAA6D,IAAA9E,EAAA+D,IAAAc,KAYA7E,EAAA7L,IAAA,SAAA0Q,GACA,OAAA5D,EAAA9M,IAAA6L,EAAA+D,IAAAc,KAYA7E,EAAA+E,KAAA,SAAAC,GACA,OAAAhF,EAAAgE,IAAA/C,EAAA8D,KAAAC,KAYAhF,EAAAiF,KAAA,SAAAD,GACA,OAAAhF,EAAAgE,IAAA/C,EAAAgE,KAAAD,KAYAhF,EAAAkF,KAAA,SAAAF,GACA,OAAAhF,EAAAgE,IAAA/C,EAAAiE,KAAAF,KAYAhF,EAAAmF,MAAA,SAAAH,GACA,OAAAhF,EAAAgE,IAAA/C,EAAAkE,MAAAH,KAiBAhF,EAAA6E,MA5JA,SAAAA,EAAArT,EAAAC,EAAAC,EAAAC,EAAAyT,EAAAC,GACA,SAAAD,EAAA,CACA,IAAAvT,EAAAL,EAAAE,EACAK,EAAAN,EAAAE,EAEA,OAAAE,GAAAE,GAIA,QAAAkP,EAAAkE,OAAApT,GAAAF,GAAAuC,EAAA,SAHA,EAKA,OAAAyQ,EAAArT,EAAAC,EAAA2T,EAAAC,GAAAR,EAAAnT,EAAAC,EAAAyT,EAAAC,IA8JArF,EAAArB,IAAA,SAAAnN,EAAAC,EAAAC,EAAAC,GACA,OAAAU,KAAAmN,KAAAQ,EAAAsF,KAAA9T,EAAAC,EAAAC,EAAAC,KAeAqO,EAAAsF,KAAA,SAAA9T,EAAAC,EAAAC,EAAAC,GACA,OAAAH,EAAAE,IAAAF,EAAAE,IAAAD,EAAAE,IAAAF,EAAAE,IAqBAqO,EAAAuF,aAAA,SAAA9S,EAAAZ,EAAAE,GACA,SAAAyT,EAAAzF,GACA,IAAA0F,EAAA1F,EAAAlO,IACA6T,EAAA3F,EAAAhO,IACA,OAAA0T,IAAAC,IAUA,IAPA,IAGAC,EACAC,EAGAnW,EAAAoW,EAPAC,EAAArT,EAAAsT,KACAC,EAAAF,EAAAvN,iBACA0N,EAAAD,EAAAF,EAAAI,YAAAC,cAAA,KAGAC,EAAAC,IAEAC,EAAA,EAAgDA,GAAAN,EAA0BM,GAAAL,GAC1EJ,EAAAL,EAAA/V,EAAAqW,EAAAS,iBAAAD,KAAAF,IACAT,EAAAlW,EACAmW,EAAAU,EACAF,EAAAP,GAOA,IAFAI,GAAA,GAEAA,EAAA,KACA,IAAAO,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GAEAH,EAAAd,EAAAK,IAAA,IAAAW,EAAApB,EAAAgB,EAAAV,EAAAS,iBAAAG,KAAAN,GACAT,EAAAa,EACAZ,EAAAc,EACAN,EAAAQ,IACOD,EAAAf,EAAAK,IAAAD,IAAAa,EAAArB,EAAAiB,EAAAX,EAAAS,iBAAAI,KAAAP,GACPT,EAAAc,EACAb,EAAAe,EACAP,EAAAS,GAEAZ,GAAA,GAUA,OANAN,EAAA,CACA9T,EAAA8T,EAAA9T,EACAE,EAAA4T,EAAA5T,EACAlF,OAAA+Y,EACAkB,SAAAzU,KAAAmN,KAAA4G,KAeApG,EAAAK,KAYAL,EAAA+G,OAAA,SAAAC,EAAAjT,EAAAkT,GAGA,GAFAA,EAAA5G,EAAA4G,EAAA,UAAAA,EAAA,GAEA5G,EAAA2G,EAAA,UAGA,IAFA,IAAAra,EAAAqa,EAAAna,OAEAF,KACA,GAAAiI,EAAAoS,EAAAra,GAAAoH,IAAAkT,EACA,OAAAD,EAAAra,OAGK,CAEL,IAAAua,EAAAnT,GADAiT,MAGA,GAAAE,EAAAD,EACA,OAAAlT,EAAAmT,EAGA,GAAAA,EAAAF,EAAAC,EACA,OAAAlT,EAAAmT,EAAAF,EAIA,OAAAjT,GAsCAiM,EAAAmH,OAAAnE,EAAA,SAAAoE,GACA,IAAAA,MAAAtG,EAAAsG,IAAAvU,QAAA,OACA,OACAY,GAAA,EACA4T,GAAA,EACA5J,GAAA,EACA6J,IAAA,OACAC,MAAA,EACAnZ,SAAAoZ,GAIA,WAAAJ,EACA,OACA3T,GAAA,EACA4T,GAAA,EACA5J,GAAA,EACA6J,IAAA,OACAlZ,SAAAoZ,GAMA,IAFA/F,EAAAZ,GAAAuG,EAAApW,cAAAwR,UAAA,YAAA4E,EAAAK,WAAAL,EAAAM,EAAAN,KAEAA,EACA,OACA3T,GAAA,EACA4T,GAAA,EACA5J,GAAA,EACA6J,IAAA,OACAC,MAAA,EACAnZ,SAAAoZ,GAIA,IACAG,EACAC,EACAC,EACAC,EACArI,EACAuH,EACAe,EAAAX,EAAAY,MAAA1G,GAEA,OAAAyG,GACAA,EAAA,KACAF,EAAA7G,EAAA+G,EAAA,GAAAvF,UAAA,OACAoF,EAAA5G,EAAA+G,EAAA,GAAAvF,UAAA,SACAmF,EAAA3G,EAAA+G,EAAA,GAAAvF,UAAA,UAGAuF,EAAA,KACAF,EAAA7G,GAAAvB,EAAAsI,EAAA,GAAAN,OAAA,IAAAhI,EAAA,IACAmI,EAAA5G,GAAAvB,EAAAsI,EAAA,GAAAN,OAAA,IAAAhI,EAAA,IACAkI,EAAA3G,GAAAvB,EAAAsI,EAAA,GAAAN,OAAA,IAAAhI,EAAA,KAGAsI,EAAA,KACAf,EAAAe,EAAA,GAAAnV,MAAA2O,GACAoG,EAAA5G,EAAAiG,EAAA,IACA,KAAAA,EAAA,GAAAjE,OAAA,KAAA4E,GAAA,MACAC,EAAA7G,EAAAiG,EAAA,IACA,KAAAA,EAAA,GAAAjE,OAAA,KAAA6E,GAAA,MACAC,EAAA9G,EAAAiG,EAAA,IACA,KAAAA,EAAA,GAAAjE,OAAA,KAAA8E,GAAA,MACA,QAAAE,EAAA,GAAA/W,cAAA+R,MAAA,OAAA+E,EAAA/G,EAAAiG,EAAA,KACAA,EAAA,SAAAA,EAAA,GAAAjE,OAAA,KAAA+E,GAAA,MAGAC,EAAA,IACAf,EAAAe,EAAA,GAAAnV,MAAA2O,GACAoG,EAAA5G,EAAAiG,EAAA,IACA,KAAAA,EAAA,GAAAjE,OAAA,KAAA4E,GAAA,KACAC,EAAA7G,EAAAiG,EAAA,IACA,KAAAA,EAAA,GAAAjE,OAAA,KAAA6E,GAAA,KACAC,EAAA9G,EAAAiG,EAAA,IACA,KAAAA,EAAA,GAAAjE,OAAA,KAAA8E,GAAA,MACA,OAAAb,EAAA,GAAAjE,OAAA,YAAAiE,EAAA,GAAAjE,OAAA,MAAA4E,GAAA,KACA,QAAAI,EAAA,GAAA/W,cAAA+R,MAAA,OAAA+E,EAAA/G,EAAAiG,EAAA,KACAA,EAAA,SAAAA,EAAA,GAAAjE,OAAA,KAAA+E,GAAA,KACA9H,EAAAiI,QAAAN,EAAAC,EAAAC,EAAAC,IAGAC,EAAA,IACAf,EAAAe,EAAA,GAAAnV,MAAA2O,GACAoG,EAAA5G,EAAAiG,EAAA,IACA,KAAAA,EAAA,GAAAjE,OAAA,KAAA4E,GAAA,KACAC,EAAA7G,EAAAiG,EAAA,IACA,KAAAA,EAAA,GAAAjE,OAAA,KAAA6E,GAAA,KACAC,EAAA9G,EAAAiG,EAAA,IACA,KAAAA,EAAA,GAAAjE,OAAA,KAAA8E,GAAA,MACA,OAAAb,EAAA,GAAAjE,OAAA,YAAAiE,EAAA,GAAAjE,OAAA,MAAA4E,GAAA,KACA,QAAAI,EAAA,GAAA/W,cAAA+R,MAAA,OAAA+E,EAAA/G,EAAAiG,EAAA,KACAA,EAAA,SAAAA,EAAA,GAAAjE,OAAA,KAAA+E,GAAA,KACA9H,EAAAkI,QAAAP,EAAAC,EAAAC,EAAAC,KAGAH,EAAAxG,EAAAF,EAAA7G,MAAAuN,GAAA,KACAC,EAAAzG,EAAAF,EAAA7G,MAAAwN,GAAA,KACAC,EAAA1G,EAAAF,EAAA7G,MAAAyN,GAAA,KACAC,EAAA3G,EAAAD,EAAA4G,EAAA,OACAC,EAAA,CACAtU,EAAAkU,EACAN,EAAAO,EACAnK,EAAAoK,EACAzZ,SAAAoZ,IAEAF,IAAA,cAAAO,EAAAD,GAAA,EAAAD,GAAA,IAAAvZ,SAAA,IAAA2U,MAAA,GACAgF,EAAAD,QAAAzH,EAAAyH,EAAA,UAAAA,EAAA,EACAC,IAGA,CACAtU,GAAA,EACA4T,GAAA,EACA5J,GAAA,EACA6J,IAAA,OACAC,MAAA,EACAnZ,SAAAoZ,IAEGxH,GAYHA,EAAAmI,IAAAnF,EAAA,SAAAxI,EAAA+C,EAAAE,GACA,OAAAuC,EAAAiI,QAAAzN,EAAA+C,EAAAE,GAAA6J,MAaAtH,EAAAoI,IAAApF,EAAA,SAAAxI,EAAA+C,EAAA8K,GACA,OAAArI,EAAAkI,QAAA1N,EAAA+C,EAAA8K,GAAAf,MAaAtH,EAAA+H,IAAA/E,EAAA,SAAAvP,EAAA4T,EAAA5J,EAAAoF,GACA,GAAAxC,EAAAwC,EAAA,WACA,IAAAzI,EAAA6G,EAAA7G,MACA,eAAAA,EAAA3G,GAAA2G,EAAAiN,GAAAjN,EAAAqD,IAAAoF,EAAAyF,QAAA,QAGA,oBAAA7K,EAAA4J,GAAA,EAAA5T,GAAA,IAAArF,SAAA,IAAA2U,MAAA,KAGA,IAAA2E,EAAA,SAAAa,GACA,IAAA5b,EAAA4T,EAAAC,IAAAgI,qBAAA,YAAAjI,EAAAC,IAAAgI,qBAAA,UACAb,EAAA,iBAWA,OAVAD,EAAA1E,EAAA,SAAAuF,GACA,UAAAA,EAAAvX,cACA,OAAA2W,EAGAhb,EAAAgM,MAAA4P,MAAAZ,EACAhb,EAAAgM,MAAA4P,QACA,IAAAE,EAAAlI,EAAAC,IAAAkI,YAAAC,iBAAAhc,EAAAyU,GAAAwH,iBAAA,SACA,OAAAH,GAAAd,EAAA,KAAAc,KAEAF,IAEAM,EAAA,WACA,cAAAtZ,KAAAiL,EAAAjL,KAAAgO,EAAAhO,KAAAkO,GAAA,KAEAqL,EAAA,WACA,cAAAvZ,KAAAiL,EAAAjL,KAAAgO,EAAAhO,KAAA8Y,GAAA,KAEAb,EAAA,WACA,UAAAjY,KAAAuY,SAAA,MAAAvY,KAAAuY,QAAAvY,KAAA+X,IAAA,SAAA/X,KAAAkE,EAAAlE,KAAA8X,EAAA9X,KAAAkO,EAAAlO,KAAAuY,SAAA,KAEAiB,EAAA,SAAAtV,EAAA4T,EAAA5J,GAOA,GANA,MAAA4J,GAAAhH,EAAA5M,EAAA,iBAAAA,GAAA,MAAAA,GAAA,MAAAA,IACAgK,EAAAhK,EAAAgK,EACA4J,EAAA5T,EAAA4T,EACA5T,OAGA,MAAA4T,GAAAhH,EAAA5M,EAAAuV,QAAA,CACA,IAAAC,EAAAjJ,EAAAmH,OAAA1T,GACAA,EAAAwV,EAAAxV,EACA4T,EAAA4B,EAAA5B,EACA5J,EAAAwL,EAAAxL,EASA,OANAhK,EAAA,GAAA4T,EAAA,GAAA5J,EAAA,KACAhK,GAAA,IACA4T,GAAA,IACA5J,GAAA,KAGA,CAAAhK,EAAA4T,EAAA5J,IAEAyL,EAAA,SAAAzV,EAAA4T,EAAA5J,EAAAoF,GAIA,IAAAkF,EAAA,CACAtU,EAJAA,EAAAwN,EAAA7G,MAAA,IAAA3G,GAKA4T,EAJAA,EAAApG,EAAA7G,MAAA,IAAAiN,GAKA5J,EAJAA,EAAAwD,EAAA7G,MAAA,IAAAqD,GAKAqK,QAAAzH,EAAAwC,EAAA,UAAAA,EAAA,EACAyE,IAAAtH,EAAA+H,IAAAtU,EAAA4T,EAAA5J,GACArP,SAAAoZ,GAGA,OADAnH,EAAAwC,EAAA,YAAAkF,EAAAD,QAAAjF,GACAkF,GAuBA/H,EAAAuI,MAAA,SAAAU,GACA,IAAAlB,EAsCA,OApCA1H,EAAA4I,EAAA,iBAAAA,GAAA,MAAAA,GAAA,MAAAA,GACAlB,EAAA/H,EAAAiI,QAAAgB,GACAA,EAAAxV,EAAAsU,EAAAtU,EACAwV,EAAA5B,EAAAU,EAAAV,EACA4B,EAAAxL,EAAAsK,EAAAtK,EACAwL,EAAAnB,QAAA,EACAmB,EAAA3B,IAAAS,EAAAT,KACKjH,EAAA4I,EAAA,iBAAAA,GAAA,MAAAA,GAAA,MAAAA,GACLlB,EAAA/H,EAAAkI,QAAAe,GACAA,EAAAxV,EAAAsU,EAAAtU,EACAwV,EAAA5B,EAAAU,EAAAV,EACA4B,EAAAxL,EAAAsK,EAAAtK,EACAwL,EAAAnB,QAAA,EACAmB,EAAA3B,IAAAS,EAAAT,MAEAjH,EAAA4I,EAAA,YACAA,EAAAjJ,EAAAmH,OAAA8B,IAGA5I,EAAA4I,EAAA,iBAAAA,GAAA,MAAAA,GAAA,MAAAA,KAAA,UAAAA,IACAlB,EAAA/H,EAAAmJ,QAAAF,GACAA,EAAAzO,EAAAuN,EAAAvN,EACAyO,EAAA1L,EAAAwK,EAAAxK,EACA0L,EAAAZ,EAAAN,EAAAM,EACAN,EAAA/H,EAAAoJ,QAAAH,GACAA,EAAAI,EAAAtB,EAAAtK,KAEAwL,EAAA,CACA3B,IAAA,SAEA7T,EAAAwV,EAAA5B,EAAA4B,EAAAxL,EAAAwL,EAAAzO,EAAAyO,EAAA1L,EAAA0L,EAAAI,EAAAJ,EAAAZ,GAAA,EACAY,EAAA1B,MAAA,IAIA0B,EAAA7a,SAAAoZ,EACAyB,GAoBAjJ,EAAAiI,QAAA,SAAAzN,EAAA+C,EAAA8L,EAAAxG,GASA,IAAAyG,EAAAC,EAAA5L,EAAA6L,EAAAC,EASA,OAjBApJ,EAAA7F,EAAA,iBAAAA,GAAA,MAAAA,GAAA,MAAAA,IACA6O,EAAA7O,EAAAiD,EACAF,EAAA/C,EAAA+C,EACAsF,EAAArI,EAAAqI,EACArI,OAOAgP,GADAC,EAAAJ,EAAA9L,IACA,EAAA3I,GAFA4F,GAFAA,GAAA,KAEA,QAEA,MACA8O,EAAAC,EAAA5L,EAAA0L,EAAAI,EAKAP,EAHAI,GAAA,CAAAG,EAAAD,EAAA,IAAAA,EAAAC,GADAjP,OAEA+O,GAAA,CAAAC,EAAAC,IAAAD,EAAA,KAAAhP,GACAmD,GAAA,KAAA6L,EAAAC,IAAAD,GAAAhP,GACAqI,IAoBA7C,EAAAkI,QAAA,SAAA1N,EAAA+C,EAAA8K,EAAAxF,GAcA,IAAAyG,EAAAC,EAAA5L,EAAA6L,EAAAC,EASA,OAtBApJ,EAAA7F,EAAA,iBAAAA,GAAA,MAAAA,GAAA,MAAAA,IACA6N,EAAA7N,EAAA6N,EACA9K,EAAA/C,EAAA+C,EACA/C,QAGAA,EAAA,GAAA+C,EAAA,GAAA8K,EAAA,KACA7N,GAAA,IACA+C,GAAA,IACA8K,GAAA,KAOAmB,GADAC,EAAA,EAAAlM,GAAA8K,EAAA,GAAAA,EAAA,EAAAA,KACA,EAAAzT,GAFA4F,GAFAA,GAAA,KAEA,QAEA,MACA8O,EAAAC,EAAA5L,EAAA0K,EAAAoB,EAAA,EAKAP,EAHAI,GAAA,CAAAG,EAAAD,EAAA,IAAAA,EAAAC,GADAjP,OAEA+O,GAAA,CAAAC,EAAAC,IAAAD,EAAA,KAAAhP,GACAmD,GAAA,KAAA6L,EAAAC,IAAAD,GAAAhP,GACAqI,IAmBA7C,EAAAoJ,QAAA,SAAA3V,EAAA4T,EAAA5J,GAKA,IAAAiM,EAAAD,EAMA,OATAhW,GADAgK,EAAAsL,EAAAtV,EAAA4T,EAAA5J,IACA,GACA4J,EAAA5J,EAAA,GACAA,IAAA,GAOA,CACAjD,IAJA,IADAiP,GADAC,EAAAxI,EAAAzN,EAAA4T,EAAA5J,IACA0D,EAAA1N,EAAA4T,EAAA5J,IACA,KAAAiM,GAAAjW,GAAA4T,EAAA5J,GAAAgM,EAAAC,GAAArC,GAAA5J,EAAAhK,GAAAgW,EAAA,GAAAhW,EAAA4T,GAAAoC,EAAA,GACA,cAIAlM,EAHA,GAAAkM,EAAA,EAAAA,EAAAC,EAIAjM,EAAAiM,EACAtb,SAAAya,IAoBA7I,EAAAmJ,QAAA,SAAA1V,EAAA4T,EAAA5J,GAKA,IAAAkM,EAAAC,EAAAC,EAAAJ,EAQA,OAXAhW,GADAgK,EAAAsL,EAAAtV,EAAA4T,EAAA5J,IACA,GACA4J,EAAA5J,EAAA,GACAA,IAAA,GAOAkM,IALAC,EAAA1I,EAAAzN,EAAA4T,EAAA5J,KACAoM,EAAA1I,EAAA1N,EAAA4T,EAAA5J,KAIA,EAEA,CACAjD,IALA,IADAiP,EAAAG,EAAAC,GACA,KAAAD,GAAAnW,GAAA4T,EAAA5J,GAAAgM,EAAAG,GAAAvC,GAAA5J,EAAAhK,GAAAgW,EAAA,GAAAhW,EAAA4T,GAAAoC,EAAA,GACA,cAKAlM,EAHA,GAAAkM,EAAA,EAAAE,EAAA,GAAAF,GAAA,EAAAE,GAAAF,GAAA,IAAAE,GAIAtB,EAAAsB,EACAvb,SAAA0a,IAgBA9I,EAAA8J,gBAAA,SAAAC,GACA,IAAAA,EACA,YAGA,IAAAC,EAAAhK,EAAAvN,KAAAsX,GAEA,GAAAC,EAAArc,IACA,OAAAqS,EAAAvN,KAAAmS,MAAAoF,EAAArc,KAGA,IAAAsc,EAAA,CACAjN,EAAA,EACAkN,EAAA,EACArH,EAAA,EACArI,EAAA,EACA6N,EAAA,EACAwB,EAAA,EACApW,EAAA,EACA6L,EAAA,EACA/B,EAAA,EACAkC,EAAA,EACA4J,EAAA,EACAc,EAAA,EACAC,EAAA,GAEAC,EAAA,GAuCA,OArCAhK,EAAA0J,EAAA,UAAA1J,EAAA0J,EAAA,cAEAM,EAAArK,EAAAvN,KAAAmS,MAAAmF,IAGAM,EAAAxd,QACAiU,EAAAiJ,GAAAzF,QAAA1C,EAAA,SAAA5E,EAAAS,EAAAyM,GACA,IAAAI,EAAA,GACAzW,EAAA4J,EAAAzM,cAeA,GAdAkZ,EAAA5F,QAAAxC,EAAA,SAAA9E,EAAAS,GACAA,GAAA6M,EAAAvX,MAAA0K,KAGA,KAAA5J,GAAAyW,EAAAzd,OAAA,IACAwd,EAAAtX,KAAA,CAAA0K,GAAAtQ,OAAAmd,EAAA1G,OAAA,OACA/P,EAAA,IACA4J,EAAA,KAAAA,EAAA,SAGA,KAAA5J,GAAA,GAAAyW,EAAAzd,QACAwd,EAAAtX,KAAA,CAAA0K,EAAA6M,EAAA,KAGA,KAAAzW,EACAwW,EAAAtX,KAAA,CAAA0K,GAAAtQ,OAAAmd,SACS,KAAAA,EAAAzd,QAAAod,EAAApW,KACTwW,EAAAtX,KAAA,CAAA0K,GAAAtQ,OAAAmd,EAAA1G,OAAA,EAAAqG,EAAApW,MAEAoW,EAAApW,SAOAwW,EAAAjc,SAAA4R,EAAAvN,KAAArE,SACA4b,EAAArc,IAAAqS,EAAAvN,KAAAmS,MAAAyF,GACAA,GAcA,IAAAE,EAAAvK,EAAAuK,qBAAA,SAAAC,GACA,IAAAA,EACA,YAGA,IAMAH,EAAA,GAmBA,OAjBAhK,EAAAmK,EAAA,UAAAnK,EAAAmK,EAAA,cAEAH,EAAArK,EAAAvN,KAAAmS,MAAA4F,IAGAH,EAAAxd,QACAiU,EAAA0J,GAAAlG,QAAAzC,EAAA,SAAA7E,EAAAS,EAAAyM,GACA,IAAAI,EAAA,GACA7M,EAAAzM,cACAkZ,EAAA5F,QAAAxC,EAAA,SAAA9E,EAAAS,GACAA,GAAA6M,EAAAvX,MAAA0K,KAEA4M,EAAAtX,KAAA,CAAA0K,GAAAtQ,OAAAmd,MAIAD,EAAAjc,SAAA4R,EAAAvN,KAAArE,SACAic,GAqCArK,EAAAW,EAAA8J,oBAlCA,SAAAC,GACA,IAAAtM,EAAA,GA8BA,OA7BAsM,IAAApG,QAAA,qCAAAC,EAAA1Q,EAAAyW,GA2BA,OA1BAA,IAAA1X,MAAA,eAEA,UAAAiB,GAAA,GAAAyW,EAAAzd,QACAyd,EAAAvX,KAAA,KAGA,SAAAc,IACAyW,EAAAzd,OAAA,EACAyd,IAAAvH,MAAA,KACS,GAAAuH,EAAAzd,QACTyd,EAAAvX,KAAA,KAGA,GAAAuX,EAAAzd,QACAyd,EAAAvX,KAAAuX,EAAA,SAIA,SAAAzW,EACAuK,EAAArL,KAAA,SAAAkO,EAAA6D,IAAAf,EAAAuG,EAAA,aACO,SAAAzW,EACPuK,EAAArL,KAAA,OAAAkO,EAAA6D,IAAAf,EAAAuG,EAAA,eAEAlM,EAAArL,KAAA,CAAAc,EAAA4T,OAAA,IAAAta,OAAAmd,IAGA/F,IAEAnG,GAIA4B,EAAAW,EAAAgK,YAAA,sBA0EA3K,EAAAW,EAAAiK,iBAxEA,SAAAF,EAAAG,GACA,IAAAC,EAAAP,EAAAG,GACAb,EAAA,IAAA7J,EAAA+K,OAEA,GAAAD,EACA,QAAAne,EAAA,EAAAgX,EAAAmH,EAAAje,OAAwCF,EAAAgX,EAAQhX,IAAA,CAChD,IAKA6E,EACAC,EACAC,EACAC,EACAqZ,EATAvL,EAAAqL,EAAAne,GACAse,EAAAxL,EAAA5S,OACAqe,EAAApK,EAAArB,EAAA,IAAAzO,cACAma,EAAA1L,EAAA,IAAAyL,EACAE,EAAAD,EAAAtB,EAAAwB,SAAA,EAOA,KAAAH,GAAA,GAAAD,EACApB,EAAAyB,UAAA7L,EAAA,MACS,KAAAyL,GAAA,GAAAD,EACTE,GACA3Z,EAAA4Z,EAAAvZ,EAAA,KACAJ,EAAA2Z,EAAArZ,EAAA,KACAL,EAAA0Z,EAAAvZ,EAAA4N,EAAA,GAAAA,EAAA,IACA9N,EAAAyZ,EAAArZ,EAAA0N,EAAA,GAAAA,EAAA,IACAoK,EAAAyB,UAAA5Z,EAAAF,EAAAG,EAAAF,IAEAoY,EAAAyB,UAAA7L,EAAA,GAAAA,EAAA,IAES,KAAAyL,EACT,GAAAD,GACAD,KAAAH,EACAhB,EAAA0B,OAAA9L,EAAA,GAAAuL,EAAAnZ,EAAAmZ,EAAAhZ,MAAA,EAAAgZ,EAAAjZ,EAAAiZ,EAAA/Y,OAAA,IACW,GAAAgZ,IACXE,GACAzZ,EAAA0Z,EAAAvZ,EAAA4N,EAAA,GAAAA,EAAA,IACA9N,EAAAyZ,EAAArZ,EAAA0N,EAAA,GAAAA,EAAA,IACAoK,EAAA0B,OAAA9L,EAAA,GAAA/N,EAAAC,IAEAkY,EAAA0B,OAAA9L,EAAA,GAAAA,EAAA,GAAAA,EAAA,KAGS,KAAAyL,EACT,GAAAD,GAAA,GAAAA,GACAD,KAAAH,EACAhB,EAAA2B,MAAA/L,EAAA,GAAAA,EAAAwL,EAAA,GAAAD,EAAAnZ,EAAAmZ,EAAAhZ,MAAA,EAAAgZ,EAAAjZ,EAAAiZ,EAAA/Y,OAAA,IACW,GAAAgZ,EACXE,GACAzZ,EAAA0Z,EAAAvZ,EAAA4N,EAAA,GAAAA,EAAA,IACA9N,EAAAyZ,EAAArZ,EAAA0N,EAAA,GAAAA,EAAA,IACAoK,EAAA2B,MAAA/L,EAAA,GAAAA,EAAA,GAAA/N,EAAAC,IAEAkY,EAAA2B,MAAA/L,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,IAEW,GAAAwL,IACXE,GACAzZ,EAAA0Z,EAAAvZ,EAAA4N,EAAA,GAAAA,EAAA,IACA9N,EAAAyZ,EAAArZ,EAAA0N,EAAA,GAAAA,EAAA,IACAoK,EAAA2B,MAAA/L,EAAA,GAAAA,EAAA,GAAA/N,EAAAC,IAEAkY,EAAA2B,MAAA/L,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,KAGS,KAAAyL,GAAA,GAAAD,GACTpB,EAAA4B,IAAAhM,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,IAKA,OAAAoK,GAIA7J,EAAA0L,SAsCA,SAAAlc,EAAAqE,EAAAE,GACA,IAAAvD,EAAAmb,EAAAnc,GAAAuW,KACA0C,EAAA,GACAmD,EAAApb,EAAA+E,cAAA,cAEAqW,IACAA,EAAAxJ,EAAA,QACAA,EAAAwJ,EAAA,CACA/Z,GAAA,IACAE,GAAA,IACAC,MAAA,GACAC,OAAA,GACA4Z,MAAA,YACAC,KAAA,SAEAtb,EAAAgF,YAAAoW,IAGA,SAAAG,EAAAzO,GACA,SAAAA,EACA,OAAA8D,EAGA,GAAA9D,MACA,OAAAA,EAGA8E,EAAAwJ,EAAA,CACA5Z,MAAAsL,IAGA,IACA,OAAAsO,EAAAI,UAAAha,MACO,MAAAiD,GACP,UAIA,SAAAgX,EAAA3O,GACA,SAAAA,EACA,OAAA8D,EAGA,GAAA9D,MACA,OAAAA,EAGA8E,EAAAwJ,EAAA,CACA3Z,OAAAqL,IAGA,IACA,OAAAsO,EAAAI,UAAA/Z,OACO,MAAAgD,GACP,UAIA,SAAAwJ,EAAAyN,EAAAjJ,GACA,MAAApP,EACA4U,EAAAyD,GAAAjJ,EAAAzT,EAAAkE,KAAAwY,IAAA,GACOA,GAAArY,IACP4U,EAAAxF,EAAA,MAAAlP,EAAAvE,EAAAkE,KAAAwY,IAAA,EAAAnY,IAIA,OAAAvE,EAAA+G,MACA,WACAkI,EAAA,KAAAsN,GACAtN,EAAA,KAAAwN,GAEA,YACAxN,EAAA,QAAAsN,GACAtN,EAAA,SAAAwN,GAEA,WACAxN,EAAA,IAAAsN,GACAtN,EAAA,IAAAwN,GACA,MAEA,aACAxN,EAAA,KAAAsN,GACAtN,EAAA,KAAAwN,GACAxN,EAAA,IAAAsN,GACA,MAEA,cACAtN,EAAA,KAAAsN,GACAtN,EAAA,KAAAwN,GACAxN,EAAA,KAAAsN,GACAtN,EAAA,KAAAwN,GACA,MAEA,WACAxN,EAAA,KAAAsN,GACAtN,EAAA,KAAAsN,GACAtN,EAAA,KAAAwN,GACAxN,EAAA,KAAAwN,GACA,MAEA,aACAxN,EAAA,OAAAsN,GACAtN,EAAA,cAAAsN,GACAtN,EAAA,OAAAwN,GACAxN,EAAA,eAAAwN,GACA,MAEA,qBACAxN,EAAA,KAAAsN,GACAtN,EAAA,KAAAwN,GACA,MAEA,YACAxN,EAAA,KAAAsN,GACAtN,EAAA,KAAAwN,GACA,MAEA,QACAxN,EAAA5K,EAAAkY,GAIA,OADAvb,EAAA2F,YAAAyV,GACAnD,GA/JAlI,EAAAC,IAAA2L,UAAA5L,EAAAC,IAAA4L,wBA8BA,SAAAT,EAAAnc,GACA,OAAAA,EAAAuW,KAAAsG,iBAAAjM,EAAA5Q,EAAAuW,KAAAsG,kBAAArM,EAAAsM,OAAA,OAqKA,SAAAC,EAAAC,GACAnM,EAAAmM,EAAA,WACAA,EAAA5e,MAAAO,UAAA4U,MAAA1U,KAAAzB,UAAA,IAOA,IAJA,IAAAD,EAAA,EACA0R,EAAA,EACA0H,EAAAxW,KAAAwW,KAEAxW,KAAA5C,WACA4C,KAAA5C,KAGA,IAAAA,EAAA,EAAeA,EAAA6f,EAAA3f,OAAiBF,IAChC,OAAA6f,EAAA7f,GAAA4J,KACAiW,EAAA7f,GAAAa,QAAA,SAAAgC,GACAuW,EAAAvQ,YAAAhG,EAAAuW,QAGAA,EAAAvQ,YAAAgX,EAAA7f,GAAAoZ,MAIA,IAAA0G,EAAA1G,EAAA2G,WAEA,IAAA/f,EAAA,EAAeA,EAAA8f,EAAA5f,OAAqBF,IACpC4C,KAAA8O,KAAA+B,EAAAqM,EAAA9f,IAGA,OAAA4C,KAiBA,SAAA+Q,EAAA9Q,GACA,GAAAA,EAAAmd,QAAAzK,EACA,OAAAA,EAAA1S,EAAAmd,MAGA,IAAAnc,EAEA,IACAA,EAAAhB,EAAA6c,gBACK,MAAApX,IAeL1F,KAAAwW,KAAAvW,EAEAgB,IACAjB,KAAAqd,MAAA,IAAAnM,EAAAjQ,IAUAjB,KAAAgH,KAAA/G,EAAAuB,SAAAvB,EAAAF,SACA,IAAA8M,EAAA7M,KAAA6M,GAAA2F,EAAAxS,MAYA,GAXAA,KAAAsd,MAAA,GACAtd,KAAAoR,EAAA,CACAmM,UAAA,IAEAtd,EAAAmd,KAAAvQ,EACA8F,EAAA9F,GAAA7M,KAEA,KAAAA,KAAAgH,OACAhH,KAAAkc,IAAAc,GAGAhd,KAAAgH,OAAA,CACA8Q,EAAA,EACA0F,KAAA,EACAC,QAAA,EACAC,OAAA,GAEA,QAAAC,KAAAzM,EAAAtS,UACAsS,EAAAtS,UAAA0S,GAAAqM,KACA3d,KAAA2d,GAAAzM,EAAAtS,UAAA+e,IA6GA,SAAAC,EAAAC,GACA7d,KAAAwW,KAAAqH,EAoCA,SAAAC,EAAAxZ,EAAAyZ,GACA,IAAAlP,EAAAgE,EAAAvO,GAGA,OAFAyZ,EAAA9X,YAAA4I,GACAgC,EAAAhC,GAIA,SAAAqC,EAAAP,EAAA1F,GACA,IAAA4D,EACAmP,EACAC,EACAC,EAAAhN,EAAAtS,UAEA,GAAA+R,KAAAnP,SAAA,OAAAmP,EAAAnP,QAAAC,cAAA,CACA,GAAAkP,EAAAyM,QAAAzK,EACA,OAAAA,EAAAhC,EAAAyM,MAGA,IAAAnM,EAAAN,EAAAwN,cAkBA,QAAAjgB,KAjBA2Q,EAAA,IAAAkC,EAAAJ,GACAqN,EAAArN,EAAAsI,qBAAA,WACAgF,EAAAtN,EAAAsI,qBAAA,WAEA+E,KACAA,EAAAnL,EAAA,SACA5M,YAAAgL,EAAA6B,eAAA,sBACAjE,EAAA2H,KAAAvQ,YAAA+X,IAGAC,IACAA,EAAApL,EAAA,QACAhE,EAAA2H,KAAAvQ,YAAAgY,IAGApP,EAAAoP,OAEAC,EACAA,EAAA5M,GAAApT,KACA2Q,EAAA3Q,GAAAggB,EAAAhgB,IAIA2Q,EAAAwO,MAAAxO,EAAA6B,KAAA7B,OAGAgE,GADAhE,EAAAiP,EAAA,MAAA9M,EAAAC,IAAAmN,OACA5H,KAAA,CACA9T,OAAAuI,EACAkG,QAAA,IACA1O,MAAAkO,EACA+B,UAIA,OAAA7D,EAGA,SAAAgC,EAAAwN,GACA,OAAAA,EAIAA,aAAAtN,GAAAsN,aAAAT,EACAS,EAGAA,EAAA7c,SAAA,OAAA6c,EAAA7c,QAAAC,cACA,IAAAyP,EAAAmN,GAGAA,EAAA7c,SAAA,UAAA6c,EAAA7c,QAAAC,eAAA,iBAAA4c,EAAArX,KACA,IAAAkK,EAAAmN,EAAA5X,gBAAAwS,qBAAA,WAGA,IAAAlI,EAAAsN,GAfAA,EAtdA5N,EAAAW,EAAAkN,YAhBA,SAAAre,GACA,IAAAuQ,EAAAvQ,EAAAuW,KAAAsG,iBAAAjM,EAAA5Q,EAAAuW,KAAAsG,kBAAA7c,EAAAuW,KAAA3U,YAAAgP,EAAA5Q,EAAAuW,KAAA3U,aAAA4O,EAAAsM,OAAA,QAAAtM,EAAA,KACA8N,EAAA/N,EAAAuM,OAAA,QACAkB,EAAA,MAAAM,KAAA/H,KAMA,OAJAyH,IACAA,EAAAH,EAAA,OAAAtN,EAAAgG,YAGAyH,GAQAxN,EAAAW,EAAAgL,aAwIA3L,EAAAsM,OAAA,SAAAyB,GAEA,OADAA,EAAAjN,EAAAiN,GAAAzJ,QAAA,qBACAlE,EAAAG,EAAAC,IAAAjL,cAAAwY,KAYA/N,EAAAgO,UAAA,SAAAD,GAIA,IAHA,IAAAE,EAAA1N,EAAAC,IAAA5P,iBAAAmd,GACAtP,GAAAuB,EAAAvB,KAAA7Q,SAEAjB,EAAA,EAAmBA,EAAAshB,EAAAphB,OAAqBF,IACxC8R,EAAA1L,KAAAqN,EAAA6N,EAAAthB,KAGA,OAAA8R,GAoCAyP,YAAA,WACA,QAAAzgB,KAAAyU,EACA,GAAAA,EAAArB,GAAApT,GAAA,CACA,IAAA+B,EAAA0S,EAAAzU,GACAsY,EAAAvW,EAAAuW,MAEA,OAAAvW,EAAA+G,OAAAwP,EAAAsG,iBAAA,OAAA7c,EAAA+G,QAAAwP,EAAA3U,YAAA,oBAAA2U,EAAA3U,aAAA2U,EAAAsG,0BACAnK,EAAAzU,KAIG,KA4FH6S,EAAAnS,UAAAuF,KAAA,SAAA4W,EAAAvW,GACA,IACAgS,EADAxW,KACAwW,KAEA,IAAAuE,EAAA,CACA,MAAAvE,EAAA5F,SACA,OACAmC,KAAAyD,EAAArD,WAOA,IAHA,IAAAhP,EAAAqS,EAAA7U,WACAuX,EAAA,GAEA9b,EAAA,EAAAgX,EAAAjQ,EAAA7G,OAAuCF,EAAAgX,EAAQhX,IAC/C8b,EAAA/U,EAAA/G,GAAA2C,UAAAoE,EAAA/G,GAAA+V,UAGA,OAAA+F,EAGA,GAAApI,EAAAiK,EAAA,WACA,KAAA1d,UAAAC,OAAA,GAKA,OAAA6P,IAAA,qBAAA4N,EA1BA/a,MA0BA4e,eAJA,IAAAC,EAAA,GACAA,EAAA9D,GAAAvW,EACAuW,EAAA8D,EAMA,QAAAC,KAAA/D,EACAA,EAAAzJ,GAAAwN,IACA3R,IAAA,kBAAA2R,EAhCA9e,KAgCA+a,EAAA+D,IAIA,OApCA9e,MAiDAyQ,EAAAsO,MAAA,SAAA9d,GACA,IAAAyS,EAAA1C,EAAAC,IAAA+N,yBACAC,GAAA,EACAC,EAAAlO,EAAAC,IAAArL,cAAA,OAWA,IAVA3E,EAAAsQ,EAAAtQ,IAEAwX,MAAA,yBACAxX,EAAA,QAAAA,EAAA,SACAge,GAAA,GAGAC,EAAArZ,UAAA5E,EACAA,EAAAie,EAAAjG,qBAAA,UAGA,GAAAgG,EACAvL,EAAAzS,OAEA,KAAAA,EAAAke,YACAzL,EAAAzN,YAAAhF,EAAAke,YAKA,WAAAvB,EAAAlK,IAiBAjD,EAAA2O,SAAA,WAIA,IAHA,IAAArL,EAAA1V,MAAAO,UAAA4U,MAAA1U,KAAAzB,UAAA,GACAqW,EAAA1C,EAAAC,IAAA+N,yBAEA5hB,EAAA,EAAAgX,EAAAL,EAAAzW,OAAqCF,EAAAgX,EAAQhX,IAAA,CAC7C,IAAA+W,EAAAJ,EAAA3W,GAEA+W,EAAAqC,MAAArC,EAAAqC,KAAA5F,UACA8C,EAAAzN,YAAAkO,EAAAqC,MAGArC,EAAAvD,UACA8C,EAAAzN,YAAAkO,GAGA,iBAAAA,GACAT,EAAAzN,YAAAwK,EAAAsO,MAAA5K,GAAAqC,MAIA,WAAAoH,EAAAlK,IA+EAjD,EAAAW,EAAA0M,OACArN,EAAAW,EAAAP,OAyBAK,EAAAtS,UAAAqB,GAAA,SAAAqE,EAAAH,GACA,IAAAlE,EAAA6d,EAAAxZ,EAAAtE,KAAAwW,MAEA,OADArS,GAAAlE,EAAAkE,QACAlE,GAWA8Q,EAAAnS,UAAAse,SAAA,WAIA,IAHA,IAAAhE,EAAA,GACAmG,EAAArf,KAAAwW,KAAA2G,WAEA/f,EAAA,EAAAgX,EAAAiL,EAAA/hB,OAAmCF,EAAAgX,EAAQhX,IAC3C8b,EAAA9b,GAAAqT,EAAA4O,EAAAjiB,IAGA,OAAA8b,GA+BAnI,EAAAnS,UAAA0gB,OAAA,WACA,IAAApG,EAAA,GAEA,OA/BA,SAAAqG,EAAA7O,EAAA4C,GACA,QAAAlW,EAAA,EAAAgX,EAAA1D,EAAApT,OAAqCF,EAAAgX,EAAQhX,IAAA,CAC7C,IAAA+W,EAAA,CACAnN,KAAA0J,EAAAtT,GAAA4J,KACA7C,KAAAuM,EAAAtT,GAAA+G,QAEA+Y,EAAAxM,EAAAtT,GAAA8f,WACA5J,EAAA9P,KAAA2Q,GAEA+I,EAAA5f,QACAiiB,EAAArC,EAAA/I,EAAAgJ,WAAA,KAoBAoC,CAAA,CAAAvf,MAAAkZ,GACAA,EAAA,IAIA/L,IAAAqS,GAAA,+BACA,IAAAV,EAAA3R,IAAAsS,KAEAC,GADAZ,IAAA7L,UAAA6L,EAAAa,YAAA,SACA5K,QAAA,kBAAA6K,GACA,UAAAA,EAAAne,gBAGA,OAAAoe,EAAAvO,GAAAoO,GACA1f,KAAAwW,KAAA2H,cAAAhF,YAAAC,iBAAApZ,KAAAwW,KAAA,MAAA6C,iBAAAqG,GAEA7M,EAAA7S,KAAAwW,KAAAsI,KAGA,IAAAe,EAAA,CACAC,qBAAA,EACAC,iBAAA,EACAC,KAAA,EACAC,YAAA,EACAC,YAAA,EACAlH,MAAA,EACAmH,sBAAA,EACAC,8BAAA,EACAC,gBAAA,EACAC,kBAAA,EACAC,OAAA,EACAC,UAAA,EACAC,QAAA,EACAC,oBAAA,EACAC,oBAAA,EACApE,KAAA,EACAqE,eAAA,EACAC,YAAA,EACAhjB,OAAA,EACAijB,cAAA,EACAC,gBAAA,EACAC,KAAA,EACAC,cAAA,EACAC,YAAA,EACAC,mBAAA,EACAC,eAAA,EACAC,aAAA,EACAC,eAAA,EACAC,cAAA,EACAC,+BAAA,EACAC,6BAAA,EACAC,kBAAA,EACAC,QAAA,EACAC,iBAAA,EACAC,iBAAA,EACAC,OAAA,EACAC,aAAA,EACAC,aAAA,EACAC,eAAA,EACAzE,KAAA,EACAjF,QAAA,EACA2J,SAAA,EACAC,iBAAA,EACAC,kBAAA,EACAC,aAAA,EACAC,eAAA,EACAC,OAAA,EACAC,mBAAA,EACAC,oBAAA,EACAC,iBAAA,EACAC,kBAAA,EACAC,oBAAA,EACAC,iBAAA,EACAC,eAAA,EACAC,cAAA,EACAC,kBAAA,EACAC,iBAAA,EACAC,eAAA,EACAC,WAAA,EACAC,eAAA,EACAC,eAAA,GAEAlW,IAAAqS,GAAA,0BAAAhb,GACA,IAAAsa,EAAA3R,IAAAsS,KACAtb,EAAA,GAEAA,EADA2a,IAAA7L,UAAA6L,EAAAa,YAAA,SACAnb,EACA,IAAA4E,EAAA0V,EAAA/J,QAAA,mBAAAC,EAAA4K,GACA,OAAAA,EAAA0D,gBAEA5D,EAAAZ,EAAA/J,QAAA,kBAAA6K,GACA,UAAAA,EAAAne,gBAGAoe,EAAAvO,GAAAoO,GACA1f,KAAAwW,KAAApN,SAAA,MAAA5E,EAAAqN,EAAArN,EAEAqO,EAAA7S,KAAAwW,KAAArS,KAIsB+M,EAAAtS,UAoBtB6R,EAAA8S,KAAA,SAAA3Q,EAAA4Q,EAAA/iB,EAAAkT,GACA,IAAA8P,EAAA,IAAAtd,eACA0G,EAAA2F,IAEA,GAAAiR,EAAA,CACA,GAAA3S,EAAA0S,EAAA,YACA7P,EAAAlT,EACAA,EAAA+iB,EACAA,EAAA,UACO,GAAA1S,EAAA0S,EAAA,WACP,IAAAE,EAAA,GAEA,QAAAxlB,KAAAslB,EACAA,EAAA/b,eAAAvJ,IACAwlB,EAAAlgB,KAAAmgB,mBAAAzlB,GAAA,IAAAylB,mBAAAH,EAAAtlB,KAIAslB,EAAAE,EAAApiB,KAAA,KAqBA,OAlBAmiB,EAAApd,KAAAmd,EAAA,aAAA5Q,GAAA,GAEA4Q,IACAC,EAAAG,iBAAA,qCACAH,EAAAG,iBAAA,qDAGAnjB,IACA0M,IAAA0W,KAAA,aAAAhX,EAAA,KAAApM,GACA0M,IAAA0W,KAAA,aAAAhX,EAAA,OAAApM,GACA0M,IAAA0W,KAAA,aAAAhX,EAAA,OAAApM,IAGAgjB,EAAAK,mBAAA,WACA,GAAAL,EAAAM,YACA5W,IAAA,aAAAN,EAAA,IAAA4W,EAAAjU,OAAAmE,EAAA8P,IAGA,GAAAA,EAAAM,WACAN,GAGAA,EAAAnd,KAAAkd,GACAC,KAeAhT,EAAAuT,KAAA,SAAApR,EAAAnS,EAAAkT,GACAlD,EAAA8S,KAAA3Q,EAAA,SAAA6Q,GACA,IAAA/P,EAAAjD,EAAAsO,MAAA0E,EAAA3d,cACA6N,EAAAlT,EAAA3B,KAAA6U,EAAAD,GAAAjT,EAAAiT,MA8EA,OA9CAjD,EAAAwT,kBAAA,SAAA3hB,EAAAE,GACAxC,KACAkkB,OADA,IAEA/mB,EAAA6T,EAAAC,IAAAkT,iBAAA7hB,EAAAE,GAEA,GAAAwO,EAAAK,IAAA+S,OAAA,OAAAjnB,EAAAqE,QAAA,CACA,IAAA6iB,EAlCA,SAAAC,GACA,IAAAC,EAAAD,EAAAtZ,wBACAiG,EAAAqT,EAAAnG,cACAC,EAAAnN,EAAAmN,KACAzS,EAAAsF,EAAAhF,gBACAuY,EAAA7Y,EAAA6Y,WAAApG,EAAAoG,WAAA,EACAC,EAAA9Y,EAAA8Y,YAAArG,EAAAqG,YAAA,EAGA,OACAjiB,EAHA+hB,EAAA9Y,KAAAqM,EAAAzG,IAAAtF,aAAAJ,EAAAK,WAAAoS,EAAApS,WAAAwY,EAIAliB,EAHAiiB,EAAAG,MAAA5M,EAAAzG,IAAAsT,aAAAhZ,EAAAiZ,YAAAxG,EAAAwG,YAAAH,GA0BAI,CAAA1nB,GACA2nB,EAAA3nB,EAAA4nB,gBACAD,EAAAxiB,IAAA+hB,EAAA/hB,EACAwiB,EAAAtiB,IAAA6hB,EAAA7hB,EACAsiB,EAAAriB,MAAAqiB,EAAApiB,OAAA,EACA,IAAAsiB,EAAA7nB,EAAA8nB,oBAAAH,EAAA,MAEAE,EAAA1nB,SACAH,EAAA6nB,IAAA1nB,OAAA,IAIA,OAAAH,EAIA0T,EAAA1T,GAHA,MAsBAsT,EAAAyU,OAAA,SAAAxR,GACAA,EAAAjD,EAAAM,EAAAG,EAAAF,EAAA4M,IAGA5M,EAAAK,IAAAZ,OACAA,EA3oEA,CA4oEC9Q,QAAAK,MAeDyQ,EAAAyU,OAAA,SAAAzU,EAAAM,EAAAG,EAAAF,EAAA4M,GACA,IAAAuH,EAAApU,EAAAnS,UACAkS,EAAAL,EAAAK,GACAS,EAAA/R,OACA4lB,EAAA3U,EAAA0L,SACAtJ,EAAApC,EAAAW,EAAAyB,EACAiL,EAAArN,EAAAW,EAAA0M,KACAQ,EAAA7N,EAAAW,EAAAkN,YAEAzN,EAAAJ,EAAAW,EAAAP,KA2BAsU,EAAA1I,QAAA,SAAA4I,GACA,YAAArlB,KAAAgH,KACA,OAAAyJ,EAAAW,EAAAmT,IAAAvkB,KAAAwW,KAAA8O,iBAAAnR,KAAA,IAGA,IAAA1D,EAAA+K,SAAA/K,EAAAvN,KACA,OAAAlD,KAAAwW,KAAAiG,UAGA,IAAAxc,EAAAD,KACAsa,EAAA,IAAA7J,EAAA+K,OAEA,GAAAvb,EAAAslB,QACA,OAAA9U,EAAAW,EAAAmT,MAGA,YAAAtkB,EAAA+G,MAKA,GAJAqe,IACA/K,IAAA4B,IAAAjc,EAAAsd,YAAAiI,YAAAzJ,UAAA9b,EAAAkE,KAAA,QAAAlE,EAAAkE,KAAA,WAGAlE,EAAAwlB,SACAxlB,IAAAwlB,aACO,CACP,IAAAC,EAAAzlB,EAAAkE,KAAA,cACAlE,IAAAwlB,SAAAxlB,EAAAuW,KAAA2H,cAAAze,eAAAgmB,EAAAzS,UAAAyS,EAAApiB,QAAA,SAIA,IAAA8N,EAAAnR,EAAAmR,EACAuU,EAAAlV,EAAAvN,KAAAwL,IAAAzO,EAAA+G,OAAAyJ,EAAAvN,KAAAwL,IAAAkX,MAEA,IACA,OAAAP,GACAjU,EAAAyU,OAAAF,EAAAlV,EAAAvN,KAAAuZ,QAAAxc,EAAA6lB,SAAAH,EAAA1lB,IAAAwQ,EAAAW,EAAAmT,IAAAtkB,EAAAuW,KAAAiG,WACAhM,EAAAW,EAAAmT,IAAAnT,EAAAyU,UAEA5lB,EAAA6lB,SAAAH,EAAA1lB,GACAA,EAAA8lB,OAAA9lB,EAAAsd,YAAAiI,YACApU,EAAAkK,KAAA7K,EAAAvN,KAAAuZ,QAAAhM,EAAAvN,KAAA2E,IAAA5H,EAAA6lB,SAAAxL,EAAA4B,IAAAjc,EAAA8lB,UACAtV,EAAAW,EAAAmT,IAAAnT,EAAAkK,OAEK,MAAA5V,GAEL,OAAA+K,EAAAW,EAAAmT,QAIA,IAAAyB,EAAA,WACA,OAAAhmB,KAAAyZ,QAGA,SAAAwM,EAAAhmB,EAAAkb,GACA,SAAAA,EAAA,CACA,IAAA+K,GAAA,EAUA,KAPA/K,EADA,kBAAAlb,EAAA+G,MAAA,kBAAA/G,EAAA+G,KACA/G,EAAAuW,KAAA9P,aAAA,qBACO,WAAAzG,EAAA+G,KACP/G,EAAAuW,KAAA9P,aAAA,oBAEAzG,EAAAuW,KAAA9P,aAAA,cAIA,WAAA+J,EAAA+K,OAGAL,EAAA1K,EAAAW,EAAA8J,oBAAAC,QAKAA,EAHA1K,EAAAW,EAAAgK,YAAAtb,KAAAqb,GAGA5J,EAAA4J,GAAApG,QAAA,gBAAuC9U,EAAAmR,EAAAmM,WAAA,IAFvC9M,EAAAW,EAAA8J,oBAAAC,GAKArK,EAAAqK,EAAA,WACAA,EAAA1K,EAAAvN,KAAAuN,EAAAvN,KAAArE,SAAAC,KAAAqc,GAAA5J,EAAA4J,IAGAlb,EAAAmR,EAAAmM,UAAApC,EAGA,IAAAb,EAAA7J,EAAAW,EAAAiK,iBAAAF,EAAAlb,EAAAwc,QAAA,IAEA,GAAAyJ,EACA,OAAA5L,EAEAra,EAAA8lB,OAAAzL,EAyBA6K,EAAA5H,UAAA,SAAApC,GACA,IAAA/J,EAAApR,KAAAoR,EAEA,SAAA+J,EAAA,CAUA,IATA,IAKA/d,EALA+oB,EAAAnmB,KACAomB,EAAA,IAAA3V,EAAA+K,OAAAxb,KAAAwW,KAAA6P,UACAC,EAAAL,EAAAjmB,MACAumB,EAAA,CAAAD,GACAhM,EAAA,IAAA7J,EAAA+K,OAEAgL,EAAAF,EAAAG,oBACAhN,EAAAlI,EAAA+U,IAAA/U,EAAAvR,KAAA+lB,QAAAxU,EAAAH,EAAAmM,WAAAiJ,EAEA,OAAAL,EAAAnf,OAAAmf,IAAApI,WACAwI,EAAA/iB,KAAAyiB,EAAAE,IAKA,IAFA/oB,EAAAmpB,EAAAjpB,OAEAF,KACAkd,EAAA4B,IAAAqK,EAAAnpB,IAGA,OACAqc,SACAiN,aAAAN,EACAO,YAAArM,EACAkL,YAAAc,EACAM,WAAAR,EAAA/Q,QAAA6G,IAAAoK,EAAAxK,UACAsK,SAAAK,oBACAI,MAAAvM,EAAAmM,oBACAH,MAAAE,EACA3nB,SAAAmnB,GA2BA,OAvBA7K,aAAA1K,EAAA+K,QACAxb,KAAA+lB,OAAA5K,EACAnb,KAAAoR,EAAAmM,UAAApC,EAAAsL,qBAEAR,EAAAjmB,KAAAmb,GAGAnb,KAAAwW,OACA,kBAAAxW,KAAAgH,MAAA,kBAAAhH,KAAAgH,KACA6L,EAAA7S,KAAAwW,KAAA,CACAsQ,kBAAA9mB,KAAA+lB,SAEO,WAAA/lB,KAAAgH,KACP6L,EAAA7S,KAAAwW,KAAA,CACAuQ,iBAAA/mB,KAAA+lB,SAGAlT,EAAA7S,KAAAwW,KAAA,CACA+G,UAAAvd,KAAA+lB,UAKA/lB,MAYAmlB,EAAApH,OAAA,WACA,OAAAlN,EAAA7Q,KAAAwW,KAAA3U,aAoBAsjB,EAAA6B,OAAA7B,EAAAjJ,IAAA,SAAAjc,GACA,GAAAA,EAAA,CACA,UAAAA,EAAA+G,KAAA,CACA,IAAAigB,EAAAjnB,KAIA,OAHAC,EAAAhC,QAAA,SAAAgC,GACAgnB,EAAA/K,IAAAjc,KAEAD,KAGAC,EAAA4Q,EAAA5Q,GACAD,KAAAwW,KAAAvQ,YAAAhG,EAAAuW,MACAvW,EAAAod,MAAArd,KAAAqd,MAGA,OAAArd,MAaAmlB,EAAA+B,SAAA,SAAAjnB,GAMA,OALAA,IACAA,EAAA4Q,EAAA5Q,IACA+mB,OAAAhnB,MAGAA,MAaAmlB,EAAAgC,QAAA,SAAAlnB,GACA,GAAAA,EAAA,CACA,UAAAA,EAAA+G,KAAA,CACA,IACAogB,EADAH,EAAAjnB,KAWA,OATAC,EAAAhC,QAAA,SAAAgC,GACAmnB,EACAA,EAAAlQ,MAAAjX,GAEAgnB,EAAAE,QAAAlnB,GAGAmnB,EAAAnnB,IAEAD,KAIA,IAAA+d,GADA9d,EAAA4Q,EAAA5Q,IACA8d,SACA/d,KAAAwW,KAAA7P,aAAA1G,EAAAuW,KAAAxW,KAAAwW,KAAA2I,YACAnf,KAAAkc,KAAAlc,KAAAkc,MACAjc,EAAAod,MAAArd,KAAAqd,MACArd,KAAA+d,UAAA/d,KAAA+d,SAAA7B,MACA6B,KAAA7B,MAGA,OAAAlc,MAaAmlB,EAAAkC,UAAA,SAAApnB,GAGA,OAFAA,EAAA4Q,EAAA5Q,IACAknB,QAAAnnB,MACAA,MAaAmlB,EAAAlO,OAAA,SAAAhX,GACA,UAAAA,EAAA+G,KAAA,CACA,IAAAigB,EAAAjnB,KAOA,OANAC,EAAAhC,QAAA,SAAAgC,GACA,IAAA8d,EAAA9d,EAAA8d,SACAkJ,EAAAzQ,KAAA3U,WAAA8E,aAAA1G,EAAAuW,KAAAyQ,EAAAzQ,MACAuH,KAAA7B,QAEAlc,KAAA+d,SAAA7B,MACAlc,KAIA,IAAA+d,GADA9d,EAAA4Q,EAAA5Q,IACA8d,SAKA,OAJA/d,KAAAwW,KAAA3U,WAAA8E,aAAA1G,EAAAuW,KAAAxW,KAAAwW,MACAxW,KAAA+d,UAAA/d,KAAA+d,SAAA7B,MACA6B,KAAA7B,MACAjc,EAAAod,MAAArd,KAAAqd,MACArd,MAaAmlB,EAAAjO,MAAA,SAAAjX,GAEA,IAAA8d,GADA9d,EAAA4Q,EAAA5Q,IACA8d,SAWA,OATA/d,KAAAwW,KAAA8Q,YACAtnB,KAAAwW,KAAA3U,WAAA8E,aAAA1G,EAAAuW,KAAAxW,KAAAwW,KAAA8Q,aAEAtnB,KAAAwW,KAAA3U,WAAAoE,YAAAhG,EAAAuW,MAGAxW,KAAA+d,UAAA/d,KAAA+d,SAAA7B,MACA6B,KAAA7B,MACAjc,EAAAod,MAAArd,KAAAqd,MACArd,MAaAmlB,EAAAxe,aAAA,SAAA1G,GACAA,EAAA4Q,EAAA5Q,GACA,IAAA8d,EAAA/d,KAAA+d,SAKA,OAJA9d,EAAAuW,KAAA3U,WAAA8E,aAAA3G,KAAAwW,KAAAvW,EAAAuW,MACAxW,KAAAqd,MAAApd,EAAAod,MACAU,KAAA7B,MACAjc,EAAA8d,UAAA9d,EAAA8d,SAAA7B,MACAlc,MAaAmlB,EAAAoC,YAAA,SAAAtnB,GACAA,EAAA4Q,EAAA5Q,GACA,IAAA8d,EAAA/d,KAAA+d,SAKA,OAJA9d,EAAAuW,KAAA3U,WAAA8E,aAAA3G,KAAAwW,KAAAvW,EAAAuW,KAAA8Q,aACAtnB,KAAAqd,MAAApd,EAAAod,MACAU,KAAA7B,MACAjc,EAAA8d,UAAA9d,EAAA8d,SAAA7B,MACAlc,MAWAmlB,EAAAqC,OAAA,WACA,IAAAzJ,EAAA/d,KAAA+d,SAKA,OAJA/d,KAAAwW,KAAA3U,YAAA7B,KAAAwW,KAAA3U,WAAA+E,YAAA5G,KAAAwW,aACAxW,KAAAqd,MACArd,KAAAulB,SAAA,EACAxH,KAAA7B,MACAlc,MAaAmlB,EAAApI,OAAA,SAAAyB,GACA,OAAA3N,EAAA7Q,KAAAwW,KAAAxQ,cAAAwY,KAaA2G,EAAA1G,UAAA,SAAAD,GAIA,IAHA,IAAAE,EAAA1e,KAAAwW,KAAAnV,iBAAAmd,GACAtP,GAAAuB,EAAAvB,KAAA7Q,SAEAjB,EAAA,EAAmBA,EAAAshB,EAAAphB,OAAqBF,IACxC8R,EAAA1L,KAAAqN,EAAA6N,EAAAthB,KAGA,OAAA8R,GAcAiW,EAAAsC,KAAA,SAAAtjB,EAAAK,GAKA,OAJA,MAAAA,IACAA,EAAAxE,KAAAmE,UAGAihB,EAAAplB,KAAAmE,EAAAK,IAaA2gB,EAAAuC,IAAA,WACA,IAAAA,EACA7a,EAAA7M,KAAAwW,KAAA3J,GAmBA,OAjBAA,IACAA,EAAA7M,KAAA6M,GACAgG,EAAA7S,KAAAwW,KAAA,CACA3J,QAKA6a,EADA,kBAAA1nB,KAAAgH,MAAA,kBAAAhH,KAAAgH,MAAA,WAAAhH,KAAAgH,KACA8W,EAAA9d,KAAAgH,KAAAhH,KAAAwW,KAAA3U,YAEAic,EAAA,MAAA9d,KAAAwW,KAAA3U,YAGAgR,EAAA6U,EAAAlR,KAAA,CACAmR,aAAA,IAAA9a,IAEA6a,EAAAjC,SAAAzlB,KACA0nB,GAuFAvC,EAAA9P,MAAA,WACA,IAAAA,EAAAxE,EAAA7Q,KAAAwW,KAAApM,WAAA,IAUA,OARAyI,EAAAwC,EAAAmB,KAAA,OACA3D,EAAAwC,EAAAmB,KAAA,CACA3J,GAAAwI,EAAAxI,KAzFA,SAAA5M,GACA,IACAgnB,EADAW,EAAA3nB,EAAAwe,UAAA,KAEA7L,EAAA,8BACAiV,EAAA,GACAC,EAAA,GAEA,SAAAC,EAAAd,EAAA3iB,GACA,IAAAyJ,EAAA8E,EAAAoU,EAAAzQ,KAAAlS,IAEAyJ,GADAA,OAAA0K,MAAA7F,KACA7E,EAAA,KAEA,KAAAA,EAAAmK,WACAnK,IAAAkF,UAAA,MAMA6U,EAAA/Z,IAAA+Z,EAAA/Z,IAAA,IAAAnQ,OAAA,SAAAiP,GACA,IAAA1I,EAAA,GACAA,EAAAG,GAAAmM,EAAAmC,IAAA/F,GACAgG,EAAAoU,EAAAzQ,KAAArS,MAKA,SAAA6jB,EAAAf,GACA,IAAAlZ,EAAA8E,EAAAoU,EAAAzQ,KAAA,cAEAzI,GAAA,KAAAA,EAAAmK,WACAnK,IAAAkF,UAAA,MAMA6U,EAAA/Z,IAAA+Z,EAAA/Z,IAAA,IAAAnQ,OAAA,SAAAiP,GACAoa,EAAA9iB,KAAA,iBAAA0I,MAKA,QAAAzP,EAAA,EAAAgX,EAAAwT,EAAAtqB,OAAoCF,EAAAgX,EAAQhX,IAAA,CAE5C2qB,EADAd,EAAAW,EAAAxqB,GACA,QACA2qB,EAAAd,EAAA,UACAc,EAAAd,EAAA,UACAc,EAAAd,EAAA,QACAc,EAAAd,EAAA,aACAe,EAAAf,GACA,IAAAgB,EAAApV,EAAAoU,EAAAzQ,KAAA,MAEAyR,IACApV,EAAAoU,EAAAzQ,KAAA,CACA3J,GAAAoa,EAAApa,KAEAgb,EAAArkB,KAAA,CACA0kB,IAAAD,EACApb,GAAAoa,EAAApa,MAKA,IAAAzP,EAAA,EAAAgX,EAAAyT,EAAAvqB,OAAgCF,EAAAgX,EAAQhX,IAAA,CACxC,IAAA+qB,EAAAL,EAAAD,EAAAzqB,GAAA8qB,KAEA,GAAAC,EACA,QAAArZ,EAAA,EAAAC,EAAAoZ,EAAA7qB,OAAuCwR,EAAAC,EAAQD,IAC/CqZ,EAAArZ,GAAA+Y,EAAAzqB,GAAAyP,KAwBAub,CAAA/S,GACAA,EAAAkS,YAAAvnB,MACAqV,GAYA8P,EAAAkD,OAAA,WAGA,OAFA/J,EAAAte,MACAiG,YAAAjG,KAAAwW,MACAxW,MA2BAmlB,EAAA1H,QAAA0H,EAAAmD,UAAA,SAAAhmB,EAAAE,EAAAC,EAAAC,GACA,IAAA8N,EAAAsN,EAAA,UAAAQ,EAAAte,OAuBA,OArBA,MAAAsC,IACAA,EAAAtC,KAAAyc,WAGA3L,EAAAxO,EAAA,iBAAAA,IACAE,EAAAF,EAAAE,EACAC,EAAAH,EAAAG,MACAC,EAAAJ,EAAAI,OACAJ,OAGAuQ,EAAArC,EAAAgG,KAAA,CACAlU,IACAE,IACAC,QACAC,SACA6lB,aAAA,iBACA1b,GAAA2D,EAAA3D,GACA2b,QAAA,CAAAlmB,EAAAE,EAAAC,EAAAC,GAAApB,KAAA,OAEAkP,EAAAgG,KAAAvQ,YAAAjG,KAAAwW,MACAhG,GAuBA2U,EAAArD,OAAA,SAAAxf,EAAAE,EAAAC,EAAAC,EAAA+lB,EAAAC,GACA,IAAAlY,EAAAsN,EAAA,SAAAQ,EAAAte,OAyBA,OAvBA,MAAAsC,IACAA,EAAAtC,KAAAyc,WAGA3L,EAAAxO,EAAA,iBAAAA,IACAE,EAAAF,EAAAE,EACAC,EAAAH,EAAAG,MACAC,EAAAJ,EAAAI,OACA+lB,EAAAnmB,EAAAmmB,MAAAnmB,EAAAqB,GACA+kB,EAAApmB,EAAAomB,MAAApmB,EAAAsB,GACAtB,OAGAuQ,EAAArC,EAAAgG,KAAA,CACAgS,QAAA,CAAAlmB,EAAAE,EAAAC,EAAAC,GAAApB,KAAA,KACAqnB,YAAAlmB,EACAmmB,aAAAlmB,EACAmmB,OAAA,OACAJ,QAAA,EACAC,QAAA,EACA7b,GAAA2D,EAAA3D,KAEA2D,EAAAgG,KAAAvQ,YAAAjG,KAAAwW,MACAhG,GAGA,IAAAsY,EAAA,GAqGA,SAAAjqB,EAAAmI,GACA,kBACA,IAAA6H,EAAA7H,EAAA,IAAAhH,KAAAgH,KAAA,GACA7C,EAAAnE,KAAAwW,KAAA7U,WACAonB,EAAA/oB,KAAAwW,KAAA2G,WAEA,GAAAnW,EACA,QAAA5J,EAAA,EAAAgX,EAAAjQ,EAAA7G,OAAyCF,EAAAgX,EAAQhX,IACjDyR,GAAA,IAAA1K,EAAA/G,GAAAkH,KAAA,KAAAH,EAAA/G,GAAAoH,MAAAuQ,QAAA,gBAIA,GAAAgU,EAAAzrB,OAAA,CAGA,IAFA0J,IAAA6H,GAAA,KAEAzR,EAAA,EAAAgX,EAAA2U,EAAAzrB,OAAqCF,EAAAgX,EAAQhX,IAC7C,GAAA2rB,EAAA3rB,GAAAwT,SACA/B,GAAAka,EAAA3rB,GAAA+V,UACW,GAAA4V,EAAA3rB,GAAAwT,WACX/B,GAAAgC,EAAAkY,EAAA3rB,IAAAyB,YAIAmI,IAAA6H,GAAA,KAAA7O,KAAAgH,KAAA,UAEAA,IAAA6H,GAAA,MAGA,OAAAA,GAxGAsW,EAAArK,KAAA,SAAA5c,EAAAsG,GACA,IAAAsW,EAAAgO,EAAA9oB,KAAA6M,IAAAic,EAAA9oB,KAAA6M,KAAA,GAEA,MAAAxP,UAAAC,OAEA,OADA6P,IAAA,iBAAAnN,KAAA6M,GAAA7M,KAAA8a,EAAA,MACAA,EAGA,MAAAzd,UAAAC,OAAA,CACA,GAAAmT,EAAAK,GAAA5S,EAAA,WACA,QAAAd,KAAAc,EACAA,EAAA,eAAAd,IACA4C,KAAA8a,KAAA1d,EAAAc,EAAAd,IAIA,OAAA4C,KAIA,OADAmN,IAAA,iBAAAnN,KAAA6M,GAAA7M,KAAA8a,EAAA5c,MACA4c,EAAA5c,GAKA,OAFA4c,EAAA5c,GAAAsG,EACA2I,IAAA,iBAAAnN,KAAA6M,GAAA7M,KAAAwE,EAAAtG,GACA8B,MAaAmlB,EAAA6D,WAAA,SAAA9qB,GAOA,OANA,MAAAA,EACA4qB,EAAA9oB,KAAA6M,IAAA,GAEAic,EAAA9oB,KAAA6M,YAAAic,EAAA9oB,KAAA6M,IAAA3O,GAGA8B,MAoBAmlB,EAAA8D,SAAA9D,EAAAtmB,WAAA,GASAsmB,EAAA+D,SAAArqB,IAkCAsmB,EAAAgE,UAAA,WACA,GAAAxpB,eAAAypB,KAAA,CACA,IAAA3N,EAAAzb,KAAAyc,UACAxb,EAAAwP,EAAAiE,OAAA,yLAA6M,CAC7MpS,GAAAmZ,EAAAnZ,EAAAyW,QAAA,GACAvW,GAAAiZ,EAAAjZ,EAAAuW,QAAA,GACAtW,OAAAgZ,EAAAhZ,MAAAsW,QAAA,GACArW,QAAA+Y,EAAA/Y,OAAAqW,QAAA,GACAsQ,SAAArpB,KAAAipB,aAEA,mCAAiCG,KAAAE,SAAA3F,mBAAA1iB,OAWjC2c,EAAAhf,UAAAme,OAAAoI,EAAApI,OAQAa,EAAAhf,UAAA6f,UAAA0G,EAAA1G,YAeAhO,EAAAyU,OAAA,SAAAzU,EAAAM,EAAAG,EAAAF,EAAA4M,GACA,IAAA9L,EAAArU,OAAAmB,UAAAC,SACA0S,EAAA/R,OACAkS,EAAA5O,KAGA,SAAA0Y,EAAA/N,EAAAS,EAAAyM,EAAA5d,EAAA2I,EAAAgO,GACA,SAAAxF,GAAA,sBAAA4D,EAAAhT,KAAA2O,GAOA,OANAzN,KAAAyN,MACAzN,KAAAkO,EAAAT,EAAAS,EACAlO,KAAA2a,EAAAlN,EAAAkN,EACA3a,KAAAjD,EAAA0Q,EAAA1Q,EACAiD,KAAA0F,EAAA+H,EAAA/H,OACA1F,KAAA0T,EAAAjG,EAAAiG,GAIA,MAAAjG,GACAzN,KAAAyN,KACAzN,KAAAkO,KACAlO,KAAA2a,KACA3a,KAAAjD,KACAiD,KAAA0F,KACA1F,KAAA0T,OAEA1T,KAAAyN,EAAA,EACAzN,KAAAkO,EAAA,EACAlO,KAAA2a,EAAA,EACA3a,KAAAjD,EAAA,EACAiD,KAAA0F,EAAA,EACA1F,KAAA0T,EAAA,IAIA,SAAA6V,GAsOA,SAAAC,EAAA/b,GACA,OAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAGA,SAAAgc,EAAAhc,GACA,IAAAic,EAAAhY,EAAAzB,KAAAuZ,EAAA/b,IACAA,EAAA,KAAAA,EAAA,IAAAic,GACAjc,EAAA,KAAAA,EAAA,IAAAic,GA9NAH,EAAArN,IAAA,SAAAzO,EAAAS,EAAAyM,EAAA5d,EAAA2I,EAAAgO,GACA,GAAAjG,gBAAA+N,EACA,OAAAxb,KAAAkc,IAAAzO,MAAAS,EAAAT,EAAAkN,EAAAlN,EAAA1Q,EAAA0Q,EAAA/H,EAAA+H,EAAAiG,GAGA,IAAAiW,EAAAlc,EAAAzN,KAAAyN,EAAAS,EAAAlO,KAAA2a,EACAiP,EAAAnc,EAAAzN,KAAAkO,IAAAlO,KAAAjD,EAOA,OANAiD,KAAA0F,KAAA1F,KAAAyN,EAAAiG,EAAA1T,KAAA2a,EACA3a,KAAA0T,GAAAhO,EAAA1F,KAAAkO,EAAAwF,EAAA1T,KAAAjD,EACAiD,KAAA2a,IAAA3a,KAAAyN,EAAA1Q,EAAAiD,KAAA2a,EACA3a,KAAAjD,EAAA4d,EAAA3a,KAAAkO,EAAAnR,EAAAiD,KAAAjD,EACAiD,KAAAyN,EAAAkc,EACA3pB,KAAAkO,EAAA0b,EACA5pB,MAkBAwb,EAAA5c,UAAAirB,SAAA,SAAApc,EAAAS,EAAAyM,EAAA5d,EAAA2I,EAAAgO,GACA,GAAAjG,gBAAA+N,EACA,OAAAxb,KAAA6pB,SAAApc,MAAAS,EAAAT,EAAAkN,EAAAlN,EAAA1Q,EAAA0Q,EAAA/H,EAAA+H,EAAAiG,GAGA,IAAAiW,EAAAlc,EAAAzN,KAAAyN,EAAAkN,EAAA3a,KAAAkO,EACA4b,EAAArc,EAAAzN,KAAA2a,IAAA3a,KAAAjD,EACAgtB,EAAAtc,EAAAzN,KAAA0F,EAAAiV,EAAA3a,KAAA0T,EAAAhO,EAOA,OANA1F,KAAAkO,IAAAlO,KAAAyN,EAAA1Q,EAAAiD,KAAAkO,EACAlO,KAAAjD,EAAAmR,EAAAlO,KAAA2a,EAAA5d,EAAAiD,KAAAjD,EACAiD,KAAA0T,EAAAxF,EAAAlO,KAAA0F,EAAA3I,EAAAiD,KAAA0T,IACA1T,KAAAyN,EAAAkc,EACA3pB,KAAA2a,EAAAmP,EACA9pB,KAAA0F,EAAAqkB,EACA/pB,MAWAupB,EAAAzN,OAAA,WACA,IAAAkO,EAAAhqB,KACAsC,EAAA0nB,EAAAvc,EAAAuc,EAAAjtB,EAAAitB,EAAA9b,EAAA8b,EAAArP,EACA,WAAAa,EAAAwO,EAAAjtB,EAAAuF,GAAA0nB,EAAA9b,EAAA5L,GAAA0nB,EAAArP,EAAArY,EAAA0nB,EAAAvc,EAAAnL,GAAA0nB,EAAArP,EAAAqP,EAAAtW,EAAAsW,EAAAjtB,EAAAitB,EAAAtkB,GAAApD,GAAA0nB,EAAA9b,EAAA8b,EAAAtkB,EAAAskB,EAAAvc,EAAAuc,EAAAtW,GAAApR,IAWAinB,EAAAlU,MAAA,WACA,WAAAmG,EAAAxb,KAAAyN,EAAAzN,KAAAkO,EAAAlO,KAAA2a,EAAA3a,KAAAjD,EAAAiD,KAAA0F,EAAA1F,KAAA0T,IAYA6V,EAAAxN,UAAA,SAAAzZ,EAAAE,GAGA,OAFAxC,KAAA0F,GAAApD,EAAAtC,KAAAyN,EAAAjL,EAAAxC,KAAA2a,EACA3a,KAAA0T,GAAApR,EAAAtC,KAAAkO,EAAA1L,EAAAxC,KAAAjD,EACAiD,MAeAupB,EAAAtN,MAAA,SAAA3Z,EAAAE,EAAAmB,EAAAC,GAQA,OAPA,MAAApB,MAAAF,IACAqB,GAAAC,IAAA5D,KAAA+b,UAAApY,EAAAC,GACA5D,KAAAyN,GAAAnL,EACAtC,KAAAkO,GAAA5L,EACAtC,KAAA2a,GAAAnY,EACAxC,KAAAjD,GAAAyF,GACAmB,GAAAC,IAAA5D,KAAA+b,WAAApY,GAAAC,GACA5D,MAaAupB,EAAAvN,OAAA,SAAAvO,EAAAnL,EAAAE,GACAiL,EAAAgD,EAAA+D,IAAA/G,GACAnL,KAAA,EACAE,KAAA,EACA,IAAAoC,GAAA8M,EAAA9M,IAAA6I,GAAAsL,QAAA,GACAzI,GAAAoB,EAAApB,IAAA7C,GAAAsL,QAAA,GAEA,OADA/Y,KAAAkc,IAAAtX,EAAA0L,KAAA1L,EAAAtC,EAAAE,GACAxC,KAAAkc,IAAA,SAAA5Z,GAAAE,IAWA+mB,EAAAU,MAAA,SAAA3nB,GACA,OAAAtC,KAAAkqB,KAAA5nB,EAAA,IAWAinB,EAAAY,MAAA,SAAA3nB,GACA,OAAAxC,KAAAkqB,KAAA,EAAA1nB,IAYA+mB,EAAAW,KAAA,SAAA5nB,EAAAE,GACAF,KAAA,EACAE,KAAA,EACAF,EAAAmO,EAAA+D,IAAAlS,GACAE,EAAAiO,EAAA+D,IAAAhS,GACA,IAAAmY,EAAAjJ,EAAA6D,IAAAjT,GAAAyW,QAAA,GACA7K,EAAAwD,EAAA6D,IAAA/S,GAAAuW,QAAA,GACA,OAAA/Y,KAAAkc,IAAA,EAAAhO,EAAAyM,EAAA,QAaA4O,EAAAjnB,EAAA,SAAAA,EAAAE,GACA,OAAAF,EAAAtC,KAAAyN,EAAAjL,EAAAxC,KAAA2a,EAAA3a,KAAA0F,GAaA6jB,EAAA/mB,EAAA,SAAAF,EAAAE,GACA,OAAAF,EAAAtC,KAAAkO,EAAA1L,EAAAxC,KAAAjD,EAAAiD,KAAA0T,GAGA6V,EAAA7a,IAAA,SAAAtR,GACA,OAAA4C,KAAAuR,EAAA6Y,aAAA,GAAAhtB,IAAA2b,QAAA,IAGAwQ,EAAA1qB,SAAA,WACA,iBAAAmB,KAAA0O,IAAA,GAAA1O,KAAA0O,IAAA,GAAA1O,KAAA0O,IAAA,GAAA1O,KAAA0O,IAAA,GAAA1O,KAAA0O,IAAA,GAAA1O,KAAA0O,IAAA,IAAApN,OAAA,KAGAioB,EAAAc,OAAA,WACA,OAAArqB,KAAA0F,EAAAqT,QAAA,GAAA/Y,KAAA0T,EAAAqF,QAAA,KAqBAwQ,EAAAe,YAAA,WACA,OAAAtqB,KAAAyN,EAAAzN,KAAAjD,EAAAiD,KAAAkO,EAAAlO,KAAA2a,GAkBA4O,EAAAlmB,MAAA,WACA,IAAA6V,EAAA,GAEAA,EAAAhD,GAAAlW,KAAA0F,EACAwT,EAAA/C,GAAAnW,KAAA0T,EAEA,IAAA6W,EAAA,EAAAvqB,KAAAyN,EAAAzN,KAAAkO,GAAA,CAAAlO,KAAA2a,EAAA3a,KAAAjD,IACAmc,EAAAsR,OAAA9Y,EAAAzB,KAAAuZ,EAAAe,EAAA,KACAd,EAAAc,EAAA,IACArR,EAAAuR,MAAAF,EAAA,MAAAA,EAAA,MAAAA,EAAA,MAAAA,EAAA,MACAA,EAAA,IAAAA,EAAA,MAAAA,EAAA,MAAArR,EAAAuR,MAAAF,EAAA,MAAAA,EAAA,MAAArR,EAAAuR,OACAvR,EAAAwR,OAAAhZ,EAAAzB,KAAAuZ,EAAAe,EAAA,KACAd,EAAAc,EAAA,IACArR,EAAAuR,OAAAvR,EAAAwR,OAEA1qB,KAAAsqB,cAAA,IACApR,EAAAsR,QAAAtR,EAAAsR,QAIA,IAAAla,EAAAia,EAAA,MACA3lB,EAAA2lB,EAAA,MAeA,OAbA3lB,EAAA,GACAsU,EAAA8C,OAAAvL,EAAAgE,IAAA/C,EAAAgE,KAAA9Q,IAEA0L,EAAA,IACA4I,EAAA8C,OAAA,IAAA9C,EAAA8C,SAGA9C,EAAA8C,OAAAvL,EAAAgE,IAAA/C,EAAA8D,KAAAlF,IAGA4I,EAAAyR,WAAAzR,EAAAuR,MAAA1R,QAAA,KAAAG,EAAAsR,OAAAzR,QAAA,IAAAG,EAAAwR,OAAA3R,QAAA,KAAAG,EAAA8C,QACA9C,EAAA0R,gBAAA1R,EAAAuR,MAAA1R,QAAA,IAAAG,EAAAsR,OAAAzR,QAAA,IAAAG,EAAAwR,OAAA3R,QAAA,KAAAG,EAAA8C,OACA9C,EAAA2R,aAAA3R,EAAAuR,MAAA1R,QAAA,KAAAG,EAAA8C,OACA9C,GAWAqQ,EAAA9C,kBAAA,SAAAqE,GACA,IAAA9c,EAAA8c,GAAA9qB,KAAAqD,QAEA,OAAA2K,EAAAyc,MAAA1R,QAAA,GAMA,KAAA/Y,KAAA0O,IAAA,GAAA1O,KAAA0O,IAAA,GAAA1O,KAAA0O,IAAA,GAAA1O,KAAA0O,IAAA,GAAA1O,KAAA0O,IAAA,GAAA1O,KAAA0O,IAAA,KALAV,EAAAwc,QAAAxc,EAAAwc,OAAAzR,QAAA,GACA/K,EAAA0c,QAAA1c,EAAA0c,OAAA3R,QAAA,GACA/K,EAAAgO,QAAAhO,EAAAgO,OAAAjD,QAAA,IACA/K,EAAAkI,IAAAlI,EAAAmI,GAAA,MAAAnI,EAAAkI,GAAA6C,QAAA,IAAA/K,EAAAmI,GAAA4C,QAAA,IA/VA,KA+VA/K,EAAAgO,OAAA,MAAAhO,EAAAgO,OAAAjD,QAAA,QA/VA,KA+VA,GAAA/K,EAAAwc,QAAA,GAAAxc,EAAA0c,OAAA,KAAA1c,EAAAwc,OAAAxc,EAAA0c,OAAA,KA/VA,MA8BA,CAsUGlP,EAAA5c,WAUH6R,EAAA+K,SAmBA/K,EAAAsV,OAAA,SAAAtY,EAAAS,EAAAyM,EAAA5d,EAAA2I,EAAAgO,GACA,WAAA8H,EAAA/N,EAAAS,EAAAyM,EAAA5d,EAAA2I,EAAAgO,MAgBAjD,EAAAyU,OAAA,SAAAzU,EAAAM,EAAAG,EAAAF,EAAA4M,GACA,IAoDAmN,EAnDAjN,EAAArN,EAAAW,EAAA0M,KACAjN,EAAAJ,EAAAW,EAAAP,KACAC,EAAAL,EAAAK,GACAwN,EAAA7N,EAAAW,EAAAkN,YACA0M,EAAA,4BACAnY,EAAApC,EAAAW,EAAAyB,EACAoY,EAAAxa,EAAAmC,IACArB,EAAA/R,OACAyS,EAAAxB,EAAAW,EAAAa,UACAJ,EAAA,GAgFA,SAAAqZ,EAAA5mB,GACA,gBAAAE,GASA,GARA2I,IAAAxD,OAEAnF,aAAAoZ,GAAA,GAAApZ,EAAAgS,KAAA2G,WAAA7f,SAAA,kBAAAkH,EAAAgS,KAAA2I,WAAA3d,SAAA,kBAAAgD,EAAAgS,KAAA2I,WAAA3d,SAAA,WAAAgD,EAAAgS,KAAA2I,WAAA3d,WACAgD,IAAAgS,KAAA2I,WACAb,EAAAte,MAAAiG,YAAAzB,GACAA,EAAAqM,EAAArM,IAGAA,aAAAuM,EACA,qBAAAvM,EAAAwC,MAAA,kBAAAxC,EAAAwC,MAAA,WAAAxC,EAAAwC,KAAA,CACAxC,EAAAgS,KAAA3J,IACAgG,EAAArO,EAAAgS,KAAA,CACA3J,GAAArI,EAAAqI,KAIA,IAAA0P,EAAA0O,EAAAzmB,EAAAgS,KAAA3J,SAEA0P,EAAA/X,EAAAL,KAAAG,QAKA,IAFAiY,EAAA9L,EAAAuI,MAAAxU,IAEAwT,MAAA,CACA,IAAAmT,EAAA1a,EAAA6N,EAAAte,MAAA8c,iBAAAsO,SAAA5mB,GAEA2mB,GACAA,EAAA3U,KAAA3J,IACAgG,EAAAsY,EAAA3U,KAAA,CACA3J,GAAAse,EAAAte,KAIA0P,EAAA0O,EAAAE,EAAA3U,KAAA3J,KAEA0P,EAAA/X,OAGA+X,EAAAhL,EAAAgL,GAIA,IAAA8O,EAAA,GACAA,EAAA/mB,GAAAiY,EACA1J,EAAA7S,KAAAwW,KAAA6U,GACArrB,KAAAwW,KAAApN,MAAA9E,GAAAuN,GArHApB,EAAA6a,MAAA,SAAA9mB,GACA,IAAAqK,EAAArP,OAAAgF,GAAAiU,MAAAuS,GACA,OAAAnc,IAAA,GAAArK,GAIA2I,IAAAqS,GAAA,+BAAAhb,GACA,GAAAA,aAAAuM,GAAAvM,aAAAoZ,EAAA,CASA,GARAzQ,IAAAxD,OAEAnF,aAAAoZ,GAAA,GAAApZ,EAAAgS,KAAA2G,WAAA7f,SACAkH,IAAAgS,KAAA2I,WACAb,EAAAte,MAAAiG,YAAAzB,GACAA,EAAAqM,EAAArM,IAGA,QAAAA,EAAAwC,KACA,IAAAwW,EAAAhZ,OAEAgZ,EAAAM,EAAA,OAAAQ,EAAAte,QACAwW,KAAAvQ,YAAAzB,EAAAgS,OAGAgH,EAAAhH,KAAA3J,IAAAgG,EAAA2K,EAAAhH,KAAA,CACA3J,GAAA2Q,EAAA3Q,KAEAgG,EAAA7S,KAAAwW,KAAA,CACAgH,KAAAyN,EAAAzN,EAAA3Q,SAKAke,EAIG,SAAAvmB,GACH,GAAAA,aAAAuM,GAAAvM,aAAAoZ,EAAA,CACAzQ,IAAAxD,OAIA,IAHA,IAAAqW,EACAxJ,EAAAhS,EAAAgS,KAEAA,GAAA,CACA,gBAAAA,EAAAzW,SAAA,CACAigB,EAAA,IAAAjP,EAAAyF,GACA,MAGA,WAAAA,EAAAzW,SAAA,CACAigB,OAAAjZ,EACA,MAGAyP,IAAA3U,WAGAme,KACAA,EAAAlC,EAAA,WAAAQ,EAAAte,QACAwW,KAAAvQ,YAAAzB,EAAAgS,OACAwJ,EAAAxJ,KAAA3J,IAAAgG,EAAAmN,EAAAxJ,KAAA,CACA3J,GAAAmT,EAAAnT,MAIAgG,EAAA7S,KAAAwW,KAAA,CACAyJ,YAAAgL,EAAAjL,EAAAxJ,KAAA3J,IAAAmT,EAAAnT,QAhCAM,IAAAqS,GAAA,sBAAAuL,GACA5d,IAAAqS,GAAA,2BAAAuL,GACA5d,IAAAqS,GAAA,0BAAAuL,GAsFA5d,IAAAqS,GAAA,sBAAA0L,EAAA,SACA/d,IAAAqS,GAAA,wBAAA0L,EAAA,WACA,IAAAK,EAAA,gCAoOA,SAAAC,EAAAhnB,GACA2I,IAAAxD,OAEAnF,QACAA,GAAA,MAGAxE,KAAAwW,KAAApN,MAAAqiB,SAAAjnB,EA2JA,SAAAknB,IAEA,OADAve,IAAAxD,OACA3J,KAAAwW,KAAApN,MAAAqiB,SAvYAte,IAAAqS,GAAA,gCAAA/F,GAEA,IAAAkS,GADAlS,EAAAlI,EAAAkI,IACAhB,MAAA8S,GAEA,IAAAI,EACA,YAGA,IAAA3kB,EAAA2kB,EAAA,GACA5Q,EAAA4Q,EAAA,GACAC,EAAAD,EAAA,GAKA,IAJA5Q,IAAA1X,MAAA,WAAAwE,IAAA,SAAA5H,GACA,OAAAA,aAGA3C,QAAA,GAAAyd,EAAA,KACAA,EAAA,IAgBA,IAAA3L,GAZAwc,GADAA,IAAAvoB,MAAA,MACAwE,IAAA,SAAA5H,GAEA,IAAAiZ,EAAA,CACAF,OAFA/Y,IAAAoD,MAAA,MAEA,IAOA,OAJApD,EAAA,KACAiZ,EAAAmR,OAAA9nB,WAAAtC,EAAA,KAGAiZ,KAEA5b,OACA2J,EAAA,EACA6H,EAAA,EAEA,SAAA+c,EAAAzuB,EAAA4R,GAGA,IAFA,IAAA8c,GAAA9c,EAAA/H,IAAA7J,EAAA0R,GAEAid,EAAAjd,EAAqBid,EAAA3uB,EAAO2uB,IAC5BH,EAAAG,GAAA1B,UAAApjB,EAAA6kB,GAAAC,EAAAjd,IAAAiK,QAAA,GAGAjK,EAAA1R,EACA6J,EAAA+H,EAGAI,IAEA,QAAAhS,EAAA,EAAmBA,EAAAgS,EAAShS,IAC5B,WAAAwuB,EAAAxuB,IACAyuB,EAAAzuB,EAAAwuB,EAAAxuB,GAAAitB,QAMA,OAFAuB,EAAAxc,GAAAib,OAAAuB,EAAAxc,GAAAib,QAAA,IACAwB,EAAAzc,EAAAwc,EAAAxc,GAAAib,QACA,CACArjB,OACA+T,SACA6Q,WAGAze,IAAAqS,GAAA,4BAAAhb,GACA2I,IAAAxD,OAEAmH,EAAAtM,EAAA,UAAAsM,EAAAtM,EAAA,cACAA,EAAAiM,EAAAvN,KAAArE,SAAAC,KAAA0F,KAGAA,EAAA+M,EAAA/M,IAEAiU,MAAA,YACAjU,EAAAiM,EAAAvN,KAAA8oB,WAAAxnB,IAGAqO,EAAA7S,KAAAwW,KAAA,CACAzZ,EAAAyH,KAdA2I,EAgBG,GACHA,IAAAqS,GAAA,gCAAAhb,GACA2I,IAAAxD,OACAnF,EAAA+M,EAAA/M,GAGA,IAFA,IAAAynB,EAAAjb,EAAAC,IAAA6B,eAAAtO,GAEAxE,KAAAwW,KAAA2I,YACAnf,KAAAwW,KAAA5P,YAAA5G,KAAAwW,KAAA2I,YAGAnf,KAAAwW,KAAAvQ,YAAAgmB,IATA9e,EAUG,GACHA,IAAAqS,GAAA,+BAAAhb,GACA2I,IAAAxD,OACA3J,KAAAmE,KAAA,CACApH,EAAAyH,KAHA2I,EAKG,GACHA,IAAAqS,GAAA,gCAAAhb,GACA2I,IAAAxD,OACA3J,KAAAwW,KAAA0V,UAAAC,QAAA3nB,GAFA2I,EAGG,GACHA,IAAAqS,GAAA,kCAAAhb,GACA,IAAA4nB,EAGAA,EADAtb,EAAAtM,EAAA,iBAAAA,EACA,CAAAA,EAAAlC,EAAAkC,EAAAhC,EAAAgC,EAAA/B,MAAA+B,EAAA9B,QAAApB,KAAA,KACKwP,EAAAtM,EAAA,SACLA,EAAAlD,KAAA,KAEAkD,EAGAqO,EAAA7S,KAAAwW,KAAA,CACAgS,QAAA4D,IAEAjf,IAAAxD,QAdAwD,EAeG,GACHA,IAAAqS,GAAA,oCAAAhb,GACAxE,KAAAud,UAAA/Y,GACA2I,IAAAxD,QAFAwD,EAGG,GACHA,IAAAqS,GAAA,4BAAAhb,GACA,QAAAxE,KAAAgH,OACAmG,IAAAxD,OACAkJ,EAAA7S,KAAAwW,KAAA,CACA7T,GAAA6B,EACA5B,GAAA4B,MALA2I,EAQG,GACHA,IAAAqS,GAAA,mCAAAhb,GAGA,GAFA2I,IAAAxD,OAEA,QAAA3J,KAAAgH,KAAA,CACA,IAAA6F,EAAAwf,EAAA7V,EAEA,IAAAhS,GAAAxE,KAAAssB,SAAA,CAGA,IAFAD,EAAArsB,KAAAssB,SAEAD,EAAA7V,KAAA2I,YACAnf,KAAAwW,KAAAvQ,YAAAomB,EAAA7V,KAAA2I,YAKA,OAFAkN,EAAA7E,qBACAxnB,KAAAssB,SAIA,GAAAxb,EAAAtM,EAAA,WACA,IAAAyZ,EAAAK,EAAAte,MACAkD,EAAA2N,EAAAoN,EAAApc,YAAAqB,KAAAsB,GACAyZ,EAAAhY,YAAA/C,EAAAsT,MACA3J,EAAA3J,EAAA2J,GACA3J,EAAAiB,KAAA,CACA0I,YAGArI,EAAAqM,EAAArM,cAEAuM,KACAlE,EAAArI,EAAAL,KAAA,SAGA0I,EAAArI,EAAAqI,GACArI,EAAAL,KAAA,CACA0I,SAMA,GAAAA,EAIA,GAHAwf,EAAArsB,KAAAssB,SACA9V,EAAAxW,KAAAwW,KAEA6V,EACAA,EAAAloB,KAAA,CACAwjB,aAAA,IAAA9a,QAES,CAKT,IAJAwf,EAAAxZ,EAAA,YACA8U,aAAA,IAAA9a,IAGA2J,EAAA2I,YACAkN,EAAApmB,YAAAuQ,EAAA2I,YAGA3I,EAAAvQ,YAAAomB,GACArsB,KAAAssB,SAAAzb,EAAAwb,MA3DAlf,EA+DG,GACHA,IAAAqS,GAAA,+BAAAhb,GACA,WAAAxE,KAAAgH,KAAA,CAkBA,IAjBA,IACAwP,EAAAxW,KAAAwW,KAgBAA,EAAA2I,YACA3I,EAAA5P,YAAA4P,EAAA2I,YAKA,IAFA,IAAAoN,EAnBA,SAAAC,EAAAC,GACA,IAAAvT,EAAArG,EAAA,SAEA,GAAA/B,EAAA2b,EAAA,SACA,QAAArvB,EAAA,EAAyBA,EAAAqvB,EAAAnvB,OAAkBF,IAC3C8b,EAAAjT,YAAAumB,EAAAC,EAAArvB,UAGA8b,EAAAjT,YAAA+K,EAAAC,IAAA6B,eAAA2Z,IAIA,OADAvT,EAAAuQ,WAAAvQ,EAAAuQ,YACAvQ,EAOAsT,CAAAhoB,GAEA+nB,EAAApN,YACA3I,EAAAvQ,YAAAsmB,EAAApN,YAIAhS,IAAAxD,QA9BAwD,EA+BG,GAYHA,IAAAqS,GAAA,0BAAAgM,EAAAre,EAAA,GACAA,IAAAqS,GAAA,2BAAAgM,EAAAre,EAAA,GACAA,IAAAqS,GAAA,yCAEA,OADArS,IAAAxD,OACA3J,KAAAud,aAFApQ,EAGG,GACHA,IAAAqS,GAAA,wCAEA,OADArS,IAAAxD,OACA3J,KAAAssB,UAFAnf,EAGG,GAEH,WACA,SAAAuf,EAAA1d,GACA,kBACA7B,IAAAxD,OACA,IAAAP,EAAA4H,EAAAC,IAAAkI,YAAAC,iBAAApZ,KAAAwW,KAAA,MAAA6C,iBAAA,UAAArK,GAEA,cAAA5F,EACAA,EAEAqH,EAAAO,EAAAC,IAAAvR,eAAA0J,EAAAqP,MAAAuS,GAAA,MAKA,SAAA2B,EAAA3d,GACA,gBAAAxK,GACA2I,IAAAxD,OACA,IAAArF,EAAA,SAAA0K,EAAAkJ,OAAA,GAAAoL,cAAAtU,EAAAiE,UAAA,GAEA,OAAAzO,MAKA,aAAAA,EAAAwC,KAAA,CACA,IAAA6F,EAAArI,EAAAgS,KAAA3J,GASA,OAPAA,GACAgG,EAAArO,EAAAgS,KAAA,CACA3J,GAAArI,EAAAqI,UAIA7M,KAAAwW,KAAApN,MAAA9E,GAAA2mB,EAAApe,UAbA7M,KAAAwW,KAAApN,MAAA9E,GAAA,QAmBA6I,IAAAqS,GAAA,+BAAAkN,EAAA,OAAAvf,EAAA,GACAA,IAAAqS,GAAA,8BAAAkN,EAAA,OAAAvf,EAAA,GACAA,IAAAqS,GAAA,iCAAAkN,EAAA,SAAAvf,EAAA,GACAA,IAAAqS,GAAA,gCAAAkN,EAAA,SAAAvf,EAAA,GACAA,IAAAqS,GAAA,+BAAAkN,EAAA,OAAAvf,EAAA,GACAA,IAAAqS,GAAA,8BAAAkN,EAAA,OAAAvf,EAAA,GACAA,IAAAqS,GAAA,4BAAAmN,EAAA,OAAAxf,EAAA,GACAA,IAAAqS,GAAA,2BAAAmN,EAAA,OAAAxf,EAAA,GACAA,IAAAqS,GAAA,8BAAAmN,EAAA,SAAAxf,EAAA,GACAA,IAAAqS,GAAA,6BAAAmN,EAAA,SAAAxf,EAAA,GACAA,IAAAqS,GAAA,4BAAAmN,EAAA,OAAAxf,EAAA,GACAA,IAAAqS,GAAA,2BAAAmN,EAAA,OAAAxf,EAAA,GAlDA,GAqDAA,IAAAqS,GAAA,iCACA,WAAAxf,KAAAgH,MAAA6L,EAAA7S,KAAAwW,KAAA,OAAA3D,EAAA7S,KAAAwW,KAAA,MAEA,OADArJ,IAAAxD,OACAkJ,EAAA7S,KAAAwW,KAAA,OAHArJ,EAKG,GAyBHA,IAAAqS,GAAA,oCACA,WAAAxf,KAAAgH,MAAA,SAAAhH,KAAAgH,KAAA,CACAmG,IAAAxD,OACA,IAAAuP,EA1BA,SAAA0T,EAAApW,GAIA,IAHA,IAAA0C,EAAA,GACAgE,EAAA1G,EAAA2G,WAEA/f,EAAA,EAAAgX,EAAA8I,EAAA5f,OAAyCF,EAAAgX,EAAQhX,IAAA,CACjD,IAAAyvB,EAAA3P,EAAA9f,GAEA,GAAAyvB,EAAAjc,UACAsI,EAAA1V,KAAAqpB,EAAA1Z,WAGA,SAAA0Z,EAAArrB,UACA,GAAAqrB,EAAA1P,WAAA7f,QAAA,GAAAuvB,EAAA1N,WAAAvO,SACAsI,EAAA1V,KAAAqpB,EAAA1N,WAAAhM,WAEA+F,EAAA1V,KAAAopB,EAAAC,KAKA,OAAA3T,EAMA0T,CAAA5sB,KAAAwW,MACA,UAAA0C,EAAA5b,OAAA4b,EAAA,GAAAA,IAJA/L,EAMG,GACHA,IAAAqS,GAAA,qCACA,OAAAxf,KAAAwW,KAAAsW,aADA3f,EAEG,GACHA,IAAAqS,GAAA,kCAAAuN,GACA,IAAAA,EAAA,CAIA5f,IAAAxD,OACA,IAAAnF,EAAA2I,IAAA,yBAAAnN,MAAA,GAAA4e,eACA,OAAAnO,IAAA6a,MAAA9mB,SAPA2I,EAQG,GACHA,IAAAqS,GAAA,oCAAAuN,GACA,IAAAA,EAAA,CAIA5f,IAAAxD,OACA,IAAAnF,EAAA2I,IAAA,2BAAAnN,MAAA,GAAA4e,eACA,OAAAnO,IAAA6a,MAAA9mB,SAPA2I,EAQG,GACHA,IAAAqS,GAAA,uCACArS,IAAAxD,OACA,IAAAyiB,EAAAvZ,EAAA7S,KAAAwW,KAAA,WAEA,OAAA4V,GACAA,IAAA/oB,MAAA4O,GACAxB,EAAAW,EAAAmT,KAAA6H,EAAA,IAAAA,EAAA,IAAAA,EAAA,IAAAA,EAAA,UAEA,GARAjf,EAUG,GACHA,IAAAqS,GAAA,sCACA,IAAAhP,EAAAqC,EAAA7S,KAAAwW,KAAA,UAGA,OAFArJ,IAAAxD,OAEA6G,EACAA,EAAAnN,MAAA4O,QAEA,GAPA9E,EASG,GACHA,IAAAqS,GAAA,oCACA,IAAAhP,EAAAqC,EAAA7S,KAAAwW,KAAA,KAEA,OADArJ,IAAAxD,OACA6G,GAHArD,EAIG,GACHA,IAAAqS,GAAA,qCACA,OAAAxf,KAAAwW,KAAA0V,UAAAC,SADAhf,EAEG,GAOHA,IAAAqS,GAAA,6BAAAkM,EAAAve,EAAA,GACAA,IAAAqS,GAAA,8BAAAkM,EAAAve,EAAA,KAeAsD,EAAAyU,OAAA,SAAAzU,EAAAM,EAAAG,EAAAF,EAAA4M,GACA,IAAAoP,EAAA,OAGAzb,EAAA/R,OACA2lB,EAAApU,EAAAnS,UAWAumB,EAAA8H,SAAA,SAAAzoB,GACA,IAIAsK,EAEAoe,EACAC,EAPAC,EAAA7b,EAAA/M,GAAA,IAAAiU,MAAAuU,IAAA,GACA1I,EAAAtkB,KAAAwW,KACA0V,EAAA5H,EAAA4H,UAAAC,QACAkB,EAAAnB,EAAAzT,MAAAuU,IAAA,GAMA,GAAAI,EAAA9vB,OAAA,CAGA,IAFAwR,EAAA,EAEAoe,EAAAE,EAAAte,OACAue,EAAA/pB,QAAA4pB,IAGAG,EAAA7pB,KAAA0pB,GAMAhB,IAFAiB,EAAAE,EAAA/rB,KAAA,QAGAgjB,EAAA4H,UAAAC,QAAAgB,GAIA,OAAAntB,MAaAmlB,EAAAmI,YAAA,SAAA9oB,GACA,IAIAsK,EACAye,EACAL,EACAC,EAPAC,EAAA7b,EAAA/M,GAAA,IAAAiU,MAAAuU,IAAA,GACA1I,EAAAtkB,KAAAwW,KACA0V,EAAA5H,EAAA4H,UAAAC,QACAkB,EAAAnB,EAAAzT,MAAAuU,IAAA,GAMA,GAAAK,EAAA/vB,OAAA,CAGA,IAFAwR,EAAA,EAEAoe,EAAAE,EAAAte,QACAye,EAAAF,EAAA/pB,QAAA4pB,KAGAG,EAAAhZ,OAAAkZ,EAAA,GAMArB,IAFAiB,EAAAE,EAAA/rB,KAAA,QAGAgjB,EAAA4H,UAAAC,QAAAgB,GAIA,OAAAntB,MAaAmlB,EAAAqI,SAAA,SAAAhpB,GAIA,UAHAxE,KAAAwW,KACA0V,UAAAC,QACA1T,MAAAuU,IAAA,IACA1pB,QAAAkB,IAeA2gB,EAAAsI,YAAA,SAAAjpB,EAAAkpB,GACA,SAAAA,EACA,OAAAA,EACA1tB,KAAAitB,SAAAzoB,GAEAxE,KAAAstB,YAAA9oB,GAIA,IAIAsK,EACAye,EACAL,EACAC,EAPAC,GAAA5oB,GAAA,IAAAiU,MAAAuU,IAAA,GACA1I,EAAAtkB,KAAAwW,KACA0V,EAAA5H,EAAA4H,UAAAC,QACAkB,EAAAnB,EAAAzT,MAAAuU,IAAA,GAOA,IAFAle,EAAA,EAEAoe,EAAAE,EAAAte,QACAye,EAAAF,EAAA/pB,QAAA4pB,IAGAG,EAAAhZ,OAAAkZ,EAAA,GAEAF,EAAA7pB,KAAA0pB,GAUA,OAJAhB,IAFAiB,EAAAE,EAAA/rB,KAAA,QAGAgjB,EAAA4H,UAAAC,QAAAgB,GAGAntB,QAgBAyQ,EAAAyU,OAAA,SAAAzU,EAAAM,EAAAG,EAAAF,EAAA4M,GACA,IAAA+P,EAAA,CACAC,IAAA,SAAAtrB,EAAAE,GACA,OAAAF,EAAAE,GAEAqrB,IAAA,SAAAvrB,EAAAE,GACA,OAAAF,EAAAE,GAEAsrB,IAAA,SAAAxrB,EAAAE,GACA,OAAAF,EAAAE,GAEAurB,IAAA,SAAAzrB,EAAAE,GACA,OAAAF,EAAAE,IAGA+O,EAAA/R,OACAwuB,EAAA,WACAC,EAAA,uDAEA,SAAAC,EAAAngB,GACA,OAAAA,EAGA,SAAAogB,EAAAC,GACA,gBAAArgB,GACA,OAAAA,EAAAgL,QAAA,GAAAqV,GAIAjhB,IAAAqS,GAAA,0BAAAzR,GACA,IAAAsgB,EAAA9c,EAAAxD,GAAA0K,MAAAwV,GAEA,GAAAI,EAAA,CACA,IAAAC,EAAAnhB,IAAAsS,KACAnb,EAAAgqB,EAAArb,UAAAqb,EAAA3O,YAAA,QACAlS,EAAAzN,KAAAmE,KAAAG,GACAiqB,EAAA,GACAphB,IAAAxD,OACA,IAAAykB,EAAAC,EAAA,OACAG,EAAA/gB,EAAAgL,MAAAuV,GACAS,EAAAd,EAAAU,EAAA,IASA,GAPAG,MAAAJ,EACArgB,EAAA0gB,EAAAlsB,WAAAkL,IAAA4gB,EAAA,KAEA5gB,EAAAzN,KAAAynB,KAAAnjB,GACAyJ,EAAA0gB,EAAAzuB,KAAAynB,KAAAnjB,GAAAtE,KAAAynB,KAAAnjB,EAAA+pB,EAAA,GAAAD,KAGAnlB,MAAAwE,IAAAxE,MAAA8E,GACA,OAGAwgB,EAAAjqB,GAAAyJ,EACA/N,KAAAmE,KAAAoqB,KAzBAphB,EA2BG,IACHA,IAAAqS,GAAA,2BAAAlb,EAAA4J,GACA,IAEAT,EAAA8D,EAAAvR,KAAAmE,KAAAG,IAAA,IAEAoqB,EAAAnd,EAAArD,GAAAuK,MAAAwV,GAEA,GAAAS,EAAA,CACAvhB,IAAAxD,OACA,IAAAykB,EAAAM,EAAA,OACAF,EAAA/gB,EAAAgL,MAAAuV,GACAS,EAAAd,EAAAe,EAAA,IAEA,OAAAF,MAAAJ,EACA,CACArvB,KAAAwD,WAAAkL,GACAkhB,GAAAF,EAAAlsB,WAAAkL,IAAAihB,EAAA,IACAhb,EAAAya,EAAAK,IAIA,CACAzvB,KAFA0O,EAAAzN,KAAAynB,KAAAnjB,GAGAqqB,GAAAF,EAAAhhB,EAAAzN,KAAAynB,KAAAnjB,EAAAoqB,EAAA,GAAAN,IACA1a,EAAAwa,KAxBA/gB,EA4BG,MAeHsD,EAAAyU,OAAA,SAAAzU,EAAAM,EAAAG,EAAAF,EAAA4M,GACA,IAAAM,EAAAhN,EAAAtS,UACAkS,EAAAL,EAAAK,GAsBAoN,EAAApT,KAAA,SAAAxI,EAAAE,EAAAmO,EAAA1F,EAAAtI,EAAAC,GACA,IAAAuB,EAsBA,OApBA,MAAAvB,IACAA,EAAAD,GAGAmO,EAAAxO,EAAA,8BAAAA,EACA6B,EAAA7B,EACK,MAAAA,IACL6B,EAAA,CACA7B,IACAE,IACAC,MAAAkO,EACAjO,OAAAuI,GAGA,MAAAtI,IACAwB,EAAAxB,KACAwB,EAAAvB,OAIA5C,KAAAC,GAAA,OAAAkE,IAkBA+Z,EAAA0Q,OAAA,SAAAjrB,EAAAC,EAAAM,GACA,IAAAC,EAYA,OAVA2M,EAAAnN,EAAA,8BAAAA,EACAQ,EAAAR,EACK,MAAAA,IACLQ,EAAA,CACAR,KACAC,KACAM,MAIAlE,KAAAC,GAAA,SAAAkE,IAGA,IAAA0qB,EAAA,WACA,SAAAC,IACA9uB,KAAA6B,WAAA+E,YAAA5G,MAGA,gBAAA+uB,EAAArb,GACA,IAAAsb,EAAAhe,EAAAC,IAAArL,cAAA,OACAwY,EAAApN,EAAAC,IAAAmN,KACA4Q,EAAA5lB,MAAA6lB,QAAA,6CAEAD,EAAAE,OAAA,WACAxb,EAAA5U,KAAAkwB,GACAA,EAAAE,OAAAF,EAAAF,QAAA,KACA1Q,EAAAxX,YAAAooB,IAGAA,EAAAF,UACA1Q,EAAAnY,YAAA+oB,GACAA,EAAAD,OAlBA,GAyCA7Q,EAAAiR,MAAA,SAAAJ,EAAAzsB,EAAAE,EAAAC,EAAAC,GACA,IAAAzC,EAAAD,KAAAC,GAAA,SAEA,GAAA6Q,EAAAie,EAAA,mBAAAA,EACA9uB,EAAAkE,KAAA4qB,QACK,SAAAA,EAAA,CACL,IAAA7f,EAAA,CACAyY,aAAAoH,EACAK,oBAAA,QAGA,MAAA9sB,GAAA,MAAAE,IACA0M,EAAA5M,IACA4M,EAAA1M,KAGA,MAAAC,GAAA,MAAAC,GACAwM,EAAAzM,QACAyM,EAAAxM,UAEAmsB,EAAAE,EAAA,WACAte,EAAAW,EAAAyB,EAAA5S,EAAAuW,KAAA,CACA/T,MAAAzC,KAAAqvB,YACA3sB,OAAA1C,KAAAsvB,iBAKA7e,EAAAW,EAAAyB,EAAA5S,EAAAuW,KAAAtH,GAGA,OAAAjP,GAmBAie,EAAAqR,QAAA,SAAA5rB,EAAAC,EAAAjB,EAAAC,GACA,IAAAuB,EAaA,OAXA2M,EAAAnN,EAAA,8BAAAA,EACAQ,EAAAR,EACK,MAAAA,IACLQ,EAAA,CACAR,KACAC,KACAjB,KACAC,OAIA5C,KAAAC,GAAA,UAAAkE,IAmCA+Z,EAAAhb,KAAA,SAAAnG,GACA,IAAAoH,EAUA,OARA2M,EAAA/T,EAAA,YAAA+T,EAAA/T,EAAA,SACAoH,EAAApH,EACKA,IACLoH,EAAA,CACApH,MAIAiD,KAAAC,GAAA,OAAAkE,IA8BA+Z,EAAAsR,MAAAtR,EAAApG,EAAA,SAAAsP,GACA,IACAnnB,EAAAD,KAAAC,GAAA,KAQA,OANA,GAAA5C,UAAAC,QAAA8pB,MAAApgB,KACA/G,EAAAkE,KAAAijB,GACK/pB,UAAAC,QACL2C,EAAAic,IAAA7d,MAAAO,UAAA4U,MAAA1U,KAAAzB,UAAA,IAGA4C,GAqBAie,EAAAjd,IAAA,SAAAqB,EAAAE,EAAAC,EAAAC,EAAA+sB,EAAAC,EAAAC,EAAAC,GACA,IAAAvE,EAAA,GA0BA,OAxBAva,EAAAxO,EAAA,iBAAAE,EACA6oB,EAAA/oB,GAEA,MAAAA,IACA+oB,EAAA/oB,KAGA,MAAAE,IACA6oB,EAAA7oB,KAGA,MAAAC,IACA4oB,EAAA5oB,SAGA,MAAAC,IACA2oB,EAAA3oB,UAGA,MAAA+sB,GAAA,MAAAC,GAAA,MAAAC,GAAA,MAAAC,IACAvE,EAAA7C,QAAA,CAAAiH,EAAAC,EAAAC,EAAAC,KAIA5vB,KAAAC,GAAA,MAAAorB,IAaAnN,EAAAV,KAAA,SAAA4J,GACA,IACAnnB,EAAAD,KAAAC,GAAA,QAQA,OANA,GAAA5C,UAAAC,QAAA8pB,MAAApgB,KACA/G,EAAAkE,KAAAijB,GACK/pB,UAAAC,QACL2C,EAAAic,IAAA7d,MAAAO,UAAA4U,MAAA1U,KAAAzB,UAAA,IAGA4C,GAqBAie,EAAA2R,KAAA,SAAAvtB,EAAAE,EAAAC,EAAAC,EAAAotB,EAAAC,EAAAC,EAAAC,GACA,GAAAnf,EAAAxO,EAAA,UACA,IAAA6B,EAAA7B,OAEA6B,EAAA,CACAokB,aAAA,kBAGAjmB,IACA6B,EAAA7B,KAGAE,IACA2B,EAAA3B,KAGA,MAAAC,IACA0B,EAAA1B,SAGA,MAAAC,IACAyB,EAAAzB,UAIAyB,EAAAqkB,QADA,MAAAsH,GAAA,MAAAC,GAAA,MAAAC,GAAA,MAAAC,EACA,CAAAH,EAAAC,EAAAC,EAAAC,GAEA,CAAA3tB,GAAA,EAAAE,GAAA,EAAAC,GAAA,EAAAC,GAAA,GAIA,OAAA1C,KAAAC,GAAA,UAAAkE,IAgBA+Z,EAAAwJ,IAAA,SAAA7a,GACA,aAAAA,GACAA,aAAAkE,IACAlE,EAAA1I,KAAA,OACA0I,EAAA1I,KAAA,CACA0I,GAAA4D,EAAAW,EAAAvE,QAIAA,IAAA1I,KAAA,OAGA,KAAA3E,OAAAqN,GAAAqL,WACArL,IAAAoG,UAAA,IAGAjT,KAAAC,GAAA,OACA0nB,aAAA,IAAA9a,KAGAkE,EAAAnS,UAAA8oB,IAAA5oB,KAAAkB,OAiBAke,EAAAR,OAAA,SAAAoS,EAAAC,EAAAC,EAAAC,GACA,IAAA9rB,EAAA,GAMA,OAJA,MAAA2rB,GAAA,MAAAC,GAAA,MAAAC,GAAA,MAAAC,IACA9rB,EAAAqkB,QAAA,CAAAsH,EAAAC,EAAAC,EAAAC,IAGAjwB,KAAAC,GAAA,SAAAkE,IAwBA+Z,EAAAnL,KAAA,SAAAzQ,EAAAE,EAAAuQ,GACA,IAAA5O,EAAA,GAYA,OAVA2M,EAAAxO,EAAA,UACA6B,EAAA7B,EACK,MAAAA,IACL6B,EAAA,CACA7B,IACAE,IACAuQ,QAAA,KAIA/S,KAAAC,GAAA,OAAAkE,IAmBA+Z,EAAAgS,KAAA,SAAAjuB,EAAAC,EAAAC,EAAAC,GACA,IAAA+B,EAAA,GAaA,OAXA2M,EAAA7O,EAAA,UACAkC,EAAAlC,EACK,MAAAA,IACLkC,EAAA,CACAlC,KACAE,KACAD,KACAE,OAIApC,KAAAC,GAAA,OAAAkE,IAmBA+Z,EAAAiS,SAAA,SAAAhtB,GACA9F,UAAAC,OAAA,IACA6F,EAAA9E,MAAAO,UAAA4U,MAAA1U,KAAAzB,UAAA,IAGA,IAAA8G,EAAA,GAUA,OARA2M,EAAA3N,EAAA,YAAA2N,EAAA3N,EAAA,SACAgB,EAAAhB,EACK,MAAAA,IACLgB,EAAA,CACAhB,WAIAnD,KAAAC,GAAA,WAAAkE,IAUA+Z,EAAAkS,QAAA,SAAAjtB,GACA9F,UAAAC,OAAA,IACA6F,EAAA9E,MAAAO,UAAA4U,MAAA1U,KAAAzB,UAAA,IAGA,IAAA8G,EAAA,GAUA,OARA2M,EAAA3N,EAAA,YAAA2N,EAAA3N,EAAA,SACAgB,EAAAhB,EACK,MAAAA,IACLgB,EAAA,CACAhB,WAIAnD,KAAAC,GAAA,UAAAkE,IAIA,WACA,IAAA0O,EAAApC,EAAAW,EAAAyB,EAWA,SAAAwd,IACA,OAAArwB,KAAAye,UAAA,QAcA,SAAA6R,EAAAtX,EAAAqR,GACA,IAAA1gB,EAAAkJ,EAAA,QACA1O,EAAA,CACAkmB,UAAA,KAEArR,EAAAvI,EAAAuI,SACA7U,EAAA,cAAA6U,EAAAjB,IAEAiB,EAAAT,QAAA,IACApU,EAAA,gBAAA6U,EAAAT,SAGA1F,EAAAlJ,EAAAxF,GAIA,IAHA,IACAosB,EADA3E,EAAA5rB,KAAA4rB,QAGAxuB,EAAA,EAAqBA,EAAAwuB,EAAAtuB,OAAkBF,IAAA,CAGvC,GAFAmF,WAAAqpB,EAAAxuB,GAAA+G,KAAA,WAEAkmB,EAAA,CACArqB,KAAAwW,KAAA7P,aAAAgD,EAAAiiB,EAAAxuB,GAAAoZ,MACA+Z,GAAA,EACA,OAQA,OAJAA,GACAvwB,KAAAwW,KAAAvQ,YAAA0D,GAGA3J,KAGA,SAAAwwB,IACA,qBAAAxwB,KAAAgH,KAAA,CACA,IAAA/E,EAAA4Q,EAAA7S,KAAAwW,KAAA,SACArU,EAAA0Q,EAAA7S,KAAAwW,KAAA,SACAtU,EAAA2Q,EAAA7S,KAAAwW,KAAA,SACApU,EAAAyQ,EAAA7S,KAAAwW,KAAA,SACA,OAAA/F,EAAAW,EAAAmT,IAAAtiB,EAAAC,EAAAwP,KAAArM,IAAAlD,EAAAF,GAAAyP,KAAArM,IAAAjD,EAAAF,IAEA,IAAAyB,EAAA3D,KAAAwW,KAAA7S,IAAA,GACAC,EAAA5D,KAAAwW,KAAA5S,IAAA,GACAM,EAAAlE,KAAAwW,KAAAtS,GAAA,EACA,OAAAuM,EAAAW,EAAAmT,IAAA5gB,EAAAO,EAAAN,EAAAM,EAAA,EAAAA,EAAA,EAAAA,GAgBA,SAAAusB,EAAA5b,GACA,IAAAsW,EAAAtW,EACA+W,EAAA5rB,KAAA4rB,QAMA,GAJA,iBAAA/W,IACAsW,EAAAhe,IAAA,yCAAA0H,GAAA+J,eAAAgN,OAGAnb,EAAAK,GAAAqa,EAAA,UAIA,QAAA/tB,EAAA,EAAqBA,EAAAwuB,EAAAtuB,OAAkBF,IACvC,GAAA+tB,EAAA/tB,GAAA,CACA,IAAA4b,EAAAvI,EAAAuI,MAAAmS,EAAA/tB,GAAA4b,OACA7U,EAAA,CACAkmB,OAAAc,EAAA/tB,GAAAitB,OAAA,KAEAlmB,EAAA,cAAA6U,EAAAjB,IAEAiB,EAAAT,QAAA,IACApU,EAAA,gBAAA6U,EAAAT,SAGAqT,EAAAxuB,GAAA+G,aAEAynB,EAAAxuB,GAAAoqB,SAIA,IAAApqB,EAAAwuB,EAAAtuB,OAA4BF,EAAA+tB,EAAA7tB,OAAiBF,IAC7C4C,KAAA0wB,QAAAvF,EAAA/tB,GAAA4b,MAAAmS,EAAA/tB,GAAAitB,QAGA,OAAArqB,MAoCA,SAAA2wB,EAAA1S,EAAAhc,EAAAC,EAAAC,EAAAC,GACA,IAAAnC,EAAAwQ,EAAAW,EAAA0M,KAAA,iBAAAG,GAgBA,OAdAhe,EAAA2rB,MAAAyE,EACApwB,EAAAywB,QAAAJ,EACArwB,EAAAwc,QAAA+T,EACAvwB,EAAA2wB,SAAAH,EAEA,MAAAxuB,GACA4Q,EAAA5S,EAAAuW,KAAA,CACAvU,KACAC,KACAC,KACAC,OAIAnC,EAGA,SAAA4wB,EAAA5S,EAAAta,EAAAC,EAAAM,EAAA4sB,EAAAC,GACA,IAAA9wB,EAAAwQ,EAAAW,EAAA0M,KAAA,iBAAAG,GAqBA,OAnBAhe,EAAA2rB,MAAAyE,EACApwB,EAAAywB,QAAAJ,EACArwB,EAAAwc,QAAA+T,EAEA,MAAA7sB,GACAkP,EAAA5S,EAAAuW,KAAA,CACA7S,KACAC,KACAM,MAIA,MAAA4sB,GAAA,MAAAC,GACAle,EAAA5S,EAAAuW,KAAA,CACAsa,KACAC,OAIA9wB,EAyCAie,EAAAkN,SAAA,SAAAvW,GACA,OArHA,SAAAoJ,EAAApJ,GACA,IACA5U,EADAkrB,EAAAhe,IAAA,4BAAA0H,GAAA+J,eAGA,IAAAuM,EACA,YAGAA,EAAApQ,OAAAiW,QAAA/S,GAGAhe,EADA,KAAAkrB,EAAAnkB,KAAAvF,cACAkvB,EAAA3jB,MAAA,EAAAme,EAAApQ,QAEA8V,EAAA7jB,MAAA,EAAAme,EAAApQ,QAGAoQ,EAAAnkB,MAAAmkB,EAAAnkB,KAAAvF,eACAoR,EAAA5S,EAAAuW,KAAA,CACAya,cAAA,mBAOA,IAHA,IAAArF,EAAAT,EAAAS,MACAxc,EAAAwc,EAAAtuB,OAEAF,EAAA,EAAqBA,EAAAgS,EAAShS,IAAA,CAC9B,IAAAuM,EAAAiiB,EAAAxuB,GACA6C,EAAAywB,QAAA/mB,EAAAqP,MAAArP,EAAA0gB,QAGA,OAAApqB,EAuFAmrB,CAAAprB,KAAAie,KAAApJ,IAGAqJ,EAAAyS,eAAA,SAAA1uB,EAAAC,EAAAC,EAAAC,GACA,OAAAuuB,EAAA3wB,KAAAie,KAAAhc,EAAAC,EAAAC,EAAAC,IAGA8b,EAAA2S,eAAA,SAAAltB,EAAAC,EAAAM,EAAA4sB,EAAAC,GACA,OAAAF,EAAA7wB,KAAAie,KAAAta,EAAAC,EAAAM,EAAA4sB,EAAAC,IAWA7S,EAAArf,SAAA,WACA,IAIAgQ,EAJAoC,EAAAjR,KAAAwW,KAAA2H,cACAzK,EAAAzC,EAAA+N,yBACAjiB,EAAAkU,EAAArL,cAAA,OACA3E,EAAAjB,KAAAwW,KAAApM,WAAA,GAWA,OATAsJ,EAAAzN,YAAAlJ,GACAA,EAAAkJ,YAAAhF,GAEAwP,EAAAW,EAAAyB,EAAA5R,EAAA,CACAyR,MAAA,+BAGA7D,EAAA9R,EAAA8I,UACA6N,EAAA9M,YAAA8M,EAAAyL,YACAtQ,GAWAqP,EAAAiL,UAAA,WACA,GAAAxpB,eAAAypB,KACA,mCAAmCA,KAAAE,SAAA3F,mBAAA3jB,SAWnCke,EAAAgT,MAAA,WAIA,IAHA,IACAC,EADA3a,EAAAxW,KAAAwW,KAAA2I,WAGA3I,GACA2a,EAAA3a,EAAA8Q,YAEA,QAAA9Q,EAAAhV,QACAgV,EAAA3U,WAAA+E,YAAA4P,GAEA0H,EAAAgT,MAAApyB,KAAA,CACA0X,SAIAA,EAAA2a,GA1TA,KA4UA1gB,EAAAyU,OAAA,SAAAzU,EAAAM,EAAAG,EAAAF,GACA,IAAAmU,EAAApU,EAAAnS,UACAkS,EAAAL,EAAAK,GACAuE,EAAA5E,EAAAW,EAAAiE,MACA/D,EAAA,iBACA8f,EAAA,gBACA5f,EAAAjP,WACAmP,EAAA5O,KACA+B,EAAA6M,EAAA7M,GACA+M,EAAAF,EAAA3O,IACA4O,EAAAD,EAAA1O,IACA+B,EAAA2M,EAAA3M,IACAM,EAAAqM,EAAArM,IAEA,SAAAmD,EAAA6oB,GACA,IAAA7gB,EAAAhI,EAAA6oB,GAAA7oB,EAAA6oB,IAAA,GAkBA,OAhBA7gB,EAAA6gB,GACA7gB,EAAA6gB,GAAAC,MAAA,IAEA9gB,EAAA6gB,GAAA,CACAC,MAAA,KAIA/kB,WAAA,WACA,QAAArO,KAAAsS,EACAA,EAAAc,GAAApT,OAAAmzB,IACA7gB,EAAAtS,GAAAozB,SACA9gB,EAAAtS,GAAAozB,cAAA9gB,EAAAtS,MAIAsS,EAAA6gB,GAGA,SAAA9M,EAAAjiB,EAAAE,EAAAC,EAAAC,GAYA,OAXA,MAAAJ,IACAA,EAAAE,EAAAC,EAAAC,EAAA,GAGA,MAAAF,IACAA,EAAAF,EAAAE,EACAC,EAAAH,EAAAG,MACAC,EAAAJ,EAAAI,OACAJ,OAGA,CACAA,IACAE,IACAC,QACAkO,EAAAlO,EACAC,SACAuI,EAAAvI,EACAP,GAAAG,EAAAG,EACAL,GAAAI,EAAAE,EACAiB,GAAArB,EAAAG,EAAA,EACAmB,GAAApB,EAAAE,EAAA,EACA6uB,GAAA7f,EAAA3O,IAAAN,EAAAC,GAAA,EACA8uB,GAAA9f,EAAA1O,IAAAP,EAAAC,GAAA,EACA+uB,GAAA/f,EAAAzB,KAAAxN,IAAAC,KAAA,EACAQ,KAAAwuB,EAAApvB,EAAAE,EAAAC,EAAAC,GACA0pB,GAAA,CAAA9pB,EAAAE,EAAAC,EAAAC,GAAApB,KAAA,MAIA,SAAAzC,IACA,OAAAmB,KAAAsB,KAAA,KAAAyT,QAAAqc,EAAA,MAGA,SAAAO,EAAAC,GACA,IAAA/iB,EAAAwG,EAAAuc,GAEA,OADA/iB,EAAAhQ,WACAgQ,EAGA,SAAAgjB,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA/0B,GACA,aAAAA,EACAg1B,EAAAR,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GAEAE,EAAAT,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAmKA,SAAApwB,EAAAC,EAAAC,EAAAC,EAAAyT,EAAAC,EAAA0c,EAAAC,EAAAC,GACA,GAAAA,EAAA,GAAAJ,EAAArwB,EAAAC,EAAAC,EAAAC,EAAAyT,EAAAC,EAAA0c,EAAAC,GAAAC,EACA,OAGA,IAGA5Z,EAFAgT,EAAA5b,GACAyiB,EAFA,EAEA7G,EAGAhT,EAAAwZ,EAAArwB,EAAAC,EAAAC,EAAAC,EAAAyT,EAAAC,EAAA0c,EAAAC,EAAAE,GAEA,KAAAttB,EAAAyT,EAAA4Z,GAHA,KAMA5Z,EAAAwZ,EAAArwB,EAAAC,EAAAC,EAAAC,EAAAyT,EAAAC,EAAA0c,EAAAC,EADAE,IAAA7Z,EAAA4Z,EAAA,OADA5G,GAAA,IAKA,OAAA6G,EArLAC,CAAAd,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA/0B,IAIA,SAAAu1B,EAAAC,EAAAC,GACA,SAAAC,EAAAjlB,GACA,SAAAA,GAAAgL,QAAA,GAGA,OAAAtI,EAAAW,EAAAqC,OAAA,SAAAvQ,EAAA5F,EAAA21B,GACA/vB,aAAA6N,IACA7N,IAAAiB,KAAA,MAaA,IATA,IAAA7B,EACAE,EACAgO,EACAsI,EAGAoa,EAFAC,EAAA,GACAC,EAAA,GAEAhkB,EAAA,EAEAhS,EAAA,EAAAgX,GAVAlR,EAAAmwB,EAAAnwB,IAUA5F,OAAuCF,EAAAgX,EAAQhX,IAAA,CAG/C,SAFAoT,EAAAtN,EAAA9F,IAEA,GACAkF,GAAAkO,EAAA,GACAhO,GAAAgO,EAAA,OACS,CAGT,GAAApB,GAFA0J,EAAA+Y,EAAAvvB,EAAAE,EAAAgO,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,KAEAlT,EAAA,CACA,GAAAy1B,IAAAK,EAAAnsB,MAAA,CAIA,GAFAksB,GAAA,KAAAH,GADAE,EAAArB,EAAAvvB,EAAAE,EAAAgO,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAlT,EAAA8R,IACAnI,MAAA3E,GAAA0wB,EAAAE,EAAAjsB,MAAAzE,GAAAwwB,EAAAE,EAAA5Y,EAAAhY,GAAA0wB,EAAAE,EAAA5Y,EAAA9X,GAAAwwB,EAAAE,EAAA5wB,GAAA0wB,EAAAE,EAAA1wB,IAEAywB,EACA,OAAAE,EAGAC,EAAAnsB,MAAAksB,EACAA,EAAA,KAAAH,EAAAE,EAAA5wB,GAAA0wB,EAAAE,EAAA1wB,GAAA,IAAAwwB,EAAAE,EAAAvjB,EAAArN,GAAA0wB,EAAAE,EAAAvjB,EAAAnN,GAAAwwB,EAAAE,EAAAlkB,IAAA1M,GAAA0wB,EAAAE,EAAAlkB,IAAAxM,GAAAwwB,EAAAxiB,EAAA,IAAAwiB,EAAAxiB,EAAA,KAAAlP,OACA8N,GAAA0J,EACAxW,GAAAkO,EAAA,GACAhO,GAAAgO,EAAA,GACA,SAGA,IAAAsiB,IAAAC,EAEA,OADAG,EAAArB,EAAAvvB,EAAAE,EAAAgO,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAlT,EAAA8R,GAKAA,GAAA0J,EACAxW,GAAAkO,EAAA,GACAhO,GAAAgO,EAAA,GAGA2iB,GAAA3iB,EAAA+D,QAAA/D,EAKA,OAFA4iB,EAAApkB,IAAAmkB,EACAD,EAAAJ,EAAA1jB,EAAA2jB,EAAAK,EAAAb,EAAAjwB,EAAAE,EAAAgO,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,OAEK,KAAAC,EAAAW,EAAAiE,OAGL,IAAArM,EAAA6pB,EAAA,GACA7b,EAAA6b,IACAS,EAAAT,EAAA,KAEA,SAAAN,EAAAT,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAniB,GACA,IAAAqjB,EAAA,EAAArjB,EACAsjB,EAAAzuB,EAAAwuB,EAAA,GACAE,EAAA1uB,EAAAwuB,EAAA,GACAZ,EAAAziB,IACAwjB,EAAAf,EAAAziB,EAGAyjB,EAAA7B,EAAA,EAAA5hB,GAAA8hB,EAAAF,GAAAa,GAAAT,EAAA,EAAAF,EAAAF,GACA8B,EAAA7B,EAAA,EAAA7hB,GAAA+hB,EAAAF,GAAAY,GAAAR,EAAA,EAAAF,EAAAF,GACA8B,EAAA7B,EAAA,EAAA9hB,GAAAgiB,EAAAF,GAAAW,GAAAP,EAAA,EAAAF,EAAAF,GACA8B,EAAA7B,EAAA,EAAA/hB,GAAAiiB,EAAAF,GAAAU,GAAAN,EAAA,EAAAF,EAAAF,GAOA,OACA3vB,EAbAkxB,EAAA1B,EAAA,EAAA2B,EAAAvjB,EAAA8hB,EAAA,EAAAuB,EAAArjB,IAAAgiB,EAAAwB,EAAAtB,EAcA5vB,EAbAgxB,EAAAzB,EAAA,EAAA0B,EAAAvjB,EAAA+hB,EAAA,EAAAsB,EAAArjB,IAAAiiB,EAAAuB,EAAArB,EAcA/X,EAAA,CACAhY,EAAAqxB,EACAnxB,EAAAoxB,GAEAjkB,EAAA,CACArN,EAAAuxB,EACArxB,EAAAsxB,GAEA7sB,MAAA,CACA3E,EAlBAixB,EAAAzB,EAAA5hB,EAAA8hB,EAmBAxvB,EAlBA+wB,EAAAxB,EAAA7hB,EAAA+hB,GAoBAjjB,IAAA,CACA1M,EApBAixB,EAAArB,EAAAhiB,EAAAkiB,EAqBA5vB,EApBA+wB,EAAApB,EAAAjiB,EAAAmiB,GAsBA0B,MArBA,OAAAriB,EAAAkE,MAAA+d,EAAAE,EAAAD,EAAAE,GAAAjvB,GAyBA,SAAAmvB,EAAAlC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GACA5hB,EAAAK,GAAAghB,EAAA,WACAA,EAAA,CAAAA,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,IAGA,IAAA/W,EAAA2Y,EAAAjnB,MAAA,KAAA8kB,GACA,OAAAvN,EAAAjJ,EAAAvY,IAAAT,EAAAgZ,EAAAvY,IAAAP,EAAA8Y,EAAAtY,IAAAV,EAAAgZ,EAAAvY,IAAAT,EAAAgZ,EAAAtY,IAAAR,EAAA8Y,EAAAvY,IAAAP,GAGA,SAAA0xB,EAAA5Y,EAAAhZ,EAAAE,GACA,OAAAF,GAAAgZ,EAAAhZ,MAAAgZ,EAAAhZ,EAAAgZ,EAAA7Y,OAAAD,GAAA8Y,EAAA9Y,MAAA8Y,EAAA9Y,EAAA8Y,EAAA5Y,OAGA,SAAAyxB,EAAAC,EAAAC,GAGA,OAFAD,EAAA7P,EAAA6P,GAEAF,EADAG,EAAA9P,EAAA8P,GACAD,EAAA9xB,EAAA8xB,EAAA5xB,IAAA0xB,EAAAG,EAAAD,EAAAjyB,GAAAiyB,EAAA5xB,IAAA0xB,EAAAG,EAAAD,EAAA9xB,EAAA8xB,EAAAhyB,KAAA8xB,EAAAG,EAAAD,EAAAjyB,GAAAiyB,EAAAhyB,KAAA8xB,EAAAE,EAAAC,EAAA/xB,EAAA+xB,EAAA7xB,IAAA0xB,EAAAE,EAAAC,EAAAlyB,GAAAkyB,EAAA7xB,IAAA0xB,EAAAE,EAAAC,EAAA/xB,EAAA+xB,EAAAjyB,KAAA8xB,EAAAE,EAAAC,EAAAlyB,GAAAkyB,EAAAjyB,MAAAgyB,EAAA9xB,EAAA+xB,EAAAlyB,IAAAiyB,EAAA9xB,EAAA+xB,EAAA/xB,GAAA+xB,EAAA/xB,EAAA8xB,EAAAjyB,IAAAkyB,EAAA/xB,EAAA8xB,EAAA9xB,KAAA8xB,EAAA5xB,EAAA6xB,EAAAjyB,IAAAgyB,EAAA5xB,EAAA6xB,EAAA7xB,GAAA6xB,EAAA7xB,EAAA4xB,EAAAhyB,IAAAiyB,EAAA7xB,EAAA4xB,EAAA5xB,GAGA,SAAA8xB,EAAApkB,EAAAqkB,EAAAC,EAAAC,EAAAC,GAGA,OAAAxkB,GADAA,IADA,EAAAqkB,EAAA,EAAAC,EAAA,EAAAC,EAAA,EAAAC,GACA,EAAAH,EAAA,GAAAC,EAAA,EAAAC,GACA,EAAAF,EAAA,EAAAC,EAGA,SAAAlC,EAAArwB,EAAAC,EAAAC,EAAAC,EAAAyT,EAAAC,EAAA0c,EAAAC,EAAA5X,GACA,MAAAA,IACAA,EAAA,GAUA,IANA,IAAA8Z,GADA9Z,IAAA,IAAAA,EAAA,IAAAA,GACA,EAEA+Z,EAAA,gFACAC,EAAA,0EACAC,EAAA,EAEA13B,EAAA,EAAmBA,EALnB,GAK0BA,IAAA,CAC1B,IAAA23B,EAAAJ,EAAAC,EAAAx3B,GAAAu3B,EACAK,EAAAV,EAAAS,EAAA9yB,EAAAE,EAAA0T,EAAA2c,GACAyC,EAAAX,EAAAS,EAAA7yB,EAAAE,EAAA0T,EAAA2c,GACAyC,EAAAF,IAAAC,IACAH,GAAAD,EAAAz3B,GAAAsU,EAAAzB,KAAAilB,GAGA,OAAAP,EAAAG,EAwBA,SAAAK,EAAAlzB,EAAAC,EAAAC,EAAAC,EAAAyT,EAAAC,EAAA0c,EAAAC,GACA,KAAA9gB,EAAA1P,EAAAE,GAAAyP,EAAAiE,EAAA2c,IAAA5gB,EAAA3P,EAAAE,GAAAwP,EAAAkE,EAAA2c,IAAA7gB,EAAAzP,EAAAE,GAAAwP,EAAAkE,EAAA2c,IAAA7gB,EAAA1P,EAAAE,GAAAuP,EAAAmE,EAAA2c,IAAA,CAIA,IAEA2C,GAAAnzB,EAAAE,IAAA2T,EAAA2c,IAAAvwB,EAAAE,IAAAyT,EAAA2c,GAEA,GAAA4C,EAAA,CAIA,IAAAC,IARApzB,EAAAG,EAAAF,EAAAC,IAAA0T,EAAA2c,IAAAvwB,EAAAE,IAAA0T,EAAA4c,EAAA3c,EAAA0c,IAQA4C,EACAE,IARArzB,EAAAG,EAAAF,EAAAC,IAAA2T,EAAA2c,IAAAvwB,EAAAE,IAAAyT,EAAA4c,EAAA3c,EAAA0c,IAQA4C,EACAG,GAAAF,EAAAtc,QAAA,GACAyc,GAAAF,EAAAvc,QAAA,GAEA,KAAAwc,GAAA3jB,EAAA3P,EAAAE,GAAA4W,QAAA,IAAAwc,GAAA5jB,EAAA1P,EAAAE,GAAA4W,QAAA,IAAAwc,GAAA3jB,EAAAiE,EAAA2c,GAAAzZ,QAAA,IAAAwc,GAAA5jB,EAAAkE,EAAA2c,GAAAzZ,QAAA,IAAAyc,GAAA5jB,EAAA1P,EAAAE,GAAA2W,QAAA,IAAAyc,GAAA7jB,EAAAzP,EAAAE,GAAA2W,QAAA,IAAAyc,GAAA5jB,EAAAkE,EAAA2c,GAAA1Z,QAAA,IAAAyc,GAAA7jB,EAAAmE,EAAA2c,GAAA1Z,QAAA,IAIA,OACAzW,EAAA+yB,EACA7yB,EAAA8yB,KAYA,SAAAG,EAAAC,EAAAC,EAAAC,GAIA,IAAAzB,EAHAH,EAAA0B,GACA1B,EAAA2B,IAGA,OAAAC,EAAA,KAYA,IATA,IAEAC,KAFAvD,EAAAtlB,MAAA,EAAA0oB,GAEA,GACAI,KAFAxD,EAAAtlB,MAAA,EAAA2oB,GAEA,GACAI,EAAA,GACAC,EAAA,GACAC,EAAA,GACApnB,EAAA+mB,EAAA,KAEAx4B,EAAA,EAAmBA,EAAAy4B,EAAA,EAAYz4B,IAAA,CAC/B,IAAAoT,EAAA+hB,EAAAvlB,MAAA,EAAA0oB,EAAA93B,OAAAR,EAAAy4B,IACAE,EAAAvyB,KAAA,CACAlB,EAAAkO,EAAAlO,EACAE,EAAAgO,EAAAhO,EACA0N,EAAA9S,EAAAy4B,IAIA,IAAAz4B,EAAA,EAAeA,EAAA04B,EAAA,EAAY14B,IAC3BoT,EAAA+hB,EAAAvlB,MAAA,EAAA2oB,EAAA/3B,OAAAR,EAAA04B,IACAE,EAAAxyB,KAAA,CACAlB,EAAAkO,EAAAlO,EACAE,EAAAgO,EAAAhO,EACA0N,EAAA9S,EAAA04B,IAIA,IAAA14B,EAAA,EAAeA,EAAAy4B,EAAQz4B,IACvB,QAAA0R,EAAA,EAAqBA,EAAAgnB,EAAQhnB,IAAA,CAC7B,IAAAonB,EAAAH,EAAA34B,GACA+4B,EAAAJ,EAAA34B,EAAA,GACAg5B,EAAAJ,EAAAlnB,GACAunB,EAAAL,EAAAlnB,EAAA,GACAwnB,EAAAjxB,EAAA8wB,EAAA7zB,EAAA4zB,EAAA5zB,GAAA,aACAi0B,EAAAlxB,EAAAgxB,EAAA/zB,EAAA8zB,EAAA9zB,GAAA,aACAwO,EAAAqkB,EAAAe,EAAA5zB,EAAA4zB,EAAA1zB,EAAA2zB,EAAA7zB,EAAA6zB,EAAA3zB,EAAA4zB,EAAA9zB,EAAA8zB,EAAA5zB,EAAA6zB,EAAA/zB,EAAA+zB,EAAA7zB,GAEA,GAAAsO,EAAA,CACA,GAAAmlB,EAAAnlB,EAAAxO,EAAAyW,QAAA,KAAAjI,EAAAtO,EAAAuW,QAAA,GACA,SAGAkd,EAAAnlB,EAAAxO,EAAAyW,QAAA,IAAAjI,EAAAtO,EAAAuW,QAAA,GACA,IAAAwa,EAAA2C,EAAAhmB,EAAA7K,GAAAyL,EAAAwlB,GAAAJ,EAAAI,KAAAH,EAAAG,GAAAJ,EAAAI,MAAAH,EAAAjmB,EAAAgmB,EAAAhmB,GACAyiB,EAAAyD,EAAAlmB,EAAA7K,GAAAyL,EAAAylB,GAAAH,EAAAG,KAAAF,EAAAE,GAAAH,EAAAG,MAAAF,EAAAnmB,EAAAkmB,EAAAlmB,GAEAqjB,GAAA,GAAAA,GAAA,GAAAZ,GAAA,GAAAA,GAAA,IACAiD,EACA/mB,IAEAA,EAAArL,KAAA,CACAlB,EAAAwO,EAAAxO,EACAE,EAAAsO,EAAAtO,EACA+wB,KACAZ,SAQA,OAAA9jB,EAWA,SAAA2nB,EAAAC,EAAAC,EAAAd,GACAa,EAAApD,EAAAoD,GACAC,EAAArD,EAAAqD,GAaA,IAZA,IAAAz0B,EACAC,EACAC,EACAC,EACAu0B,EACAC,EACAC,EACAC,EACApB,EACAC,EACA9mB,EAAA+mB,EAAA,KAEAx4B,EAAA,EAAAgX,EAAAqiB,EAAAn5B,OAAsCF,EAAAgX,EAAQhX,IAAA,CAC9C,IAAA25B,EAAAN,EAAAr5B,GAEA,QAAA25B,EAAA,GACA90B,EAAA00B,EAAAI,EAAA,GACA70B,EAAA00B,EAAAG,EAAA,OACO,CACP,KAAAA,EAAA,IACArB,EAAA,CAAAzzB,EAAAC,GAAAtE,OAAAm5B,EAAAvjB,MAAA,IACAvR,EAAAyzB,EAAA,GACAxzB,EAAAwzB,EAAA,KAEAA,EAAA,CAAAzzB,EAAAC,EAAAD,EAAAC,EAAAy0B,EAAAC,EAAAD,EAAAC,GACA30B,EAAA00B,EACAz0B,EAAA00B,GAGA,QAAA9nB,EAAA,EAAAC,EAAA2nB,EAAAp5B,OAA0CwR,EAAAC,EAAQD,IAAA,CAClD,IAAAkoB,EAAAN,EAAA5nB,GAEA,QAAAkoB,EAAA,GACA70B,EAAA00B,EAAAG,EAAA,GACA50B,EAAA00B,EAAAE,EAAA,OACW,CACX,KAAAA,EAAA,IACArB,EAAA,CAAAxzB,EAAAC,GAAAxE,OAAAo5B,EAAAxjB,MAAA,IACArR,EAAAwzB,EAAA,GACAvzB,EAAAuzB,EAAA,KAEAA,EAAA,CAAAxzB,EAAAC,EAAAD,EAAAC,EAAAy0B,EAAAC,EAAAD,EAAAC,GACA30B,EAAA00B,EACAz0B,EAAA00B,GAGA,IAAAG,EAAAxB,EAAAC,EAAAC,EAAAC,GAEA,GAAAA,EACA/mB,GAAAooB,MACa,CACb,QAAAlL,EAAA,EAAAmL,EAAAD,EAAA35B,OAA+CyuB,EAAAmL,EAAQnL,IACvDkL,EAAAlL,GAAAoL,SAAA/5B,EACA65B,EAAAlL,GAAAqL,SAAAtoB,EACAmoB,EAAAlL,GAAA2J,OACAuB,EAAAlL,GAAA4J,OAGA9mB,IAAAjR,OAAAq5B,OAOA,OAAApoB,EAQA,SAAAwoB,EAAAn0B,GACA,IAAAuX,EAAAjS,EAAAtF,GAEA,GAAAuX,EAAAa,KACA,OAAAjG,EAAAoF,EAAAa,MAGA,IAAApY,EACA,OAAAqhB,IAUA,IANA,IAIA/T,EAJAlO,EAAA,EACAE,EAAA,EACAyX,EAAA,GACAqd,EAAA,GAGAl6B,EAAA,EAAAgX,GAPAlR,EAAAmwB,EAAAnwB,IAOA5F,OAAqCF,EAAAgX,EAAQhX,IAG7C,SAFAoT,EAAAtN,EAAA9F,IAEA,GACAkF,EAAAkO,EAAA,GACAhO,EAAAgO,EAAA,GACAyJ,EAAAzW,KAAAlB,GACAg1B,EAAA9zB,KAAAhB,OACO,CACP,IAAA+0B,EAAAtD,EAAA3xB,EAAAE,EAAAgO,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,IACAyJ,IAAArc,OAAA25B,EAAAx0B,IAAAT,EAAAi1B,EAAAv0B,IAAAV,GACAg1B,IAAA15B,OAAA25B,EAAAx0B,IAAAP,EAAA+0B,EAAAv0B,IAAAR,GACAF,EAAAkO,EAAA,GACAhO,EAAAgO,EAAA,GAIA,IAAAgnB,EAAA5lB,EAAA5E,MAAA,EAAAiN,GACAwd,EAAA7lB,EAAA5E,MAAA,EAAAsqB,GAGA7b,EAAA8I,EAAAiT,EAAAC,EAFA9lB,EAAA3E,MAAA,EAAAiN,GAEAud,EADA7lB,EAAA3E,MAAA,EAAAsqB,GACAG,GAEA,OADAhd,EAAAa,KAAAjG,EAAAoG,GACAA,EAGA,SAAAiW,EAAApvB,EAAAE,EAAAmO,EAAA1F,EAAA/G,GACA,GAAAA,EACA,aAAA5B,IAAA4B,EAAA1B,GAAA,KAAAmO,EAAA,EAAAzM,EAAA,QAAAA,IAAA,MAAAA,KAAA,OAAA+G,EAAA,EAAA/G,GAAA,KAAAA,IAAA,OAAAA,KAAA,OAAAA,EAAAyM,EAAA,QAAAzM,IAAA,OAAAA,MAAA,SAAAA,EAAA+G,GAAA,KAAA/G,IAAA,MAAAA,MAAA,OAGA,IAAA2K,EAAA,MAAAvM,EAAAE,GAAA,KAAAmO,EAAA,UAAA1F,GAAA,MAAA0F,EAAA,UAEA,OADA9B,EAAAhQ,WACAgQ,EAGA,SAAA6oB,EAAAp1B,EAAAE,EAAAG,EAAAC,EAAA6K,GAUA,GATA,MAAAA,GAAA,MAAA7K,IACAA,EAAAD,GAGAL,KACAE,KACAG,KACAC,KAEA,MAAA6K,EACA,IAAA+G,EAAA1R,KAAA+B,GAAA,IACA5C,EAAAK,EAAAK,EAAAG,KAAA8B,KAAAhC,EAAA4R,GACArS,EAAAG,EAAAK,EAAAG,KAAA8B,KAAA6I,EAAA+G,GAGA3F,EAAA,MAAA5M,EAFAO,EAAAG,EAAAG,KAAAwN,KAAA1N,EAAA4R,IAEA,KAAA7R,IAAA,IAAA8K,EAAA7K,EAAA,OAAAT,EADAK,EAAAG,EAAAG,KAAAwN,KAAA7C,EAAA+G,UAGA3F,EAAA,MAAAvM,EAAAE,GAAA,QAAAI,GAAA,KAAAD,EAAAC,EAAA,UAAAA,GAAA,KAAAD,EAAAC,EAAA,WAAAA,GAAA,OAIA,OADAiM,EAAAhQ,WACAgQ,EAGA,IAAAuW,EAAA3U,EAAA0L,SACAwb,EAAA,CACAz0B,KAAA,SAAAjD,GACA,OAAAA,EAAAkE,KAAA,SAEAyqB,OAAA,SAAA3uB,GACA,IAAAkE,EAAAihB,EAAAnlB,GACA,OAAAy3B,EAAAvzB,EAAAR,GAAAQ,EAAAP,GAAAO,EAAAD,IAEAqrB,QAAA,SAAAtvB,GACA,IAAAkE,EAAAihB,EAAAnlB,GACA,OAAAy3B,EAAAvzB,EAAAR,IAAA,EAAAQ,EAAAP,IAAA,EAAAO,EAAAxB,GAAAwB,EAAAvB,KAEAkI,KAAA,SAAA7K,GACA,IAAAkE,EAAAihB,EAAAnlB,GACA,OAAAyxB,EAAAvtB,EAAA7B,GAAA,EAAA6B,EAAA3B,GAAA,EAAA2B,EAAA1B,MAAA0B,EAAAzB,OAAAyB,EAAAxB,GAAAwB,EAAAvB,KAEAusB,MAAA,SAAAlvB,GACA,IAAAkE,EAAAihB,EAAAnlB,GACA,OAAAyxB,EAAAvtB,EAAA7B,GAAA,EAAA6B,EAAA3B,GAAA,EAAA2B,EAAA1B,MAAA0B,EAAAzB,SAEAwtB,KAAA,SAAAjwB,GACA,WAAAA,EAAAkE,KAAA,SAAAlE,EAAAkE,KAAA,SAAAlE,EAAAkE,KAAA,MAAAlE,EAAAkE,KAAA,QAEAgsB,SAAA,SAAAlwB,GACA,UAAAA,EAAAkE,KAAA,WAEAisB,QAAA,SAAAnwB,GACA,UAAAA,EAAAkE,KAAA,eAEAyhB,MAAA,SAAA3lB,GACA,IAAAqb,EAAArb,EAAAuW,KAAAiG,UACA,OAAAiV,EAAApW,EAAAhZ,EAAAgZ,EAAA9Y,EAAA8Y,EAAA7Y,MAAA6Y,EAAA5Y,UAwGA,SAAAk1B,EAAAhG,GACA,IAAAnX,EAAAjS,EAAAopB,GAEA,GAAAnX,EAAApV,IACA,OAAAssB,EAAAlX,EAAApV,KAQA,GALAyL,EAAA8gB,EAAA,UAAA9gB,EAAA8gB,KAAA,cAEAA,EAAAnhB,EAAA8J,gBAAAqX,KAGAA,MAAAt0B,OACA,kBAGA,IAMAu6B,EANAhpB,EAAA,GACAvM,EAAA,EACAE,EAAA,EACAmxB,EAAA,EACAC,EAAA,EACA3sB,EAAA,EAGA,KAAA2qB,EAAA,QAGA+B,EAFArxB,GAAAsvB,EAAA,MAGAgC,EAFApxB,GAAAovB,EAAA,MAGA3qB,IACA4H,EAAA,QAAAvM,EAAAE,IAKA,IAFA,IAEA0B,EAAA4zB,EAFAC,EAAA,GAAAnG,EAAAt0B,QAAA,KAAAs0B,EAAA,YAAAA,EAAA,MAAAtO,eAAA,KAAAsO,EAAA,MAAAtO,cAEAlmB,EAAA6J,EAAAmN,EAAAwd,EAAAt0B,OAAqDF,EAAAgX,EAAQhX,IAAA,CAK7D,GAJAyR,EAAArL,KAAAU,EAAA,KAEA2zB,GADAC,EAAAlG,EAAAx0B,IACA,KAEAy6B,EAAAvU,cAGA,OAFApf,EAAA,GAAA2zB,EAAAvU,cAEApf,EAAA,IACA,QACAA,EAAA,GAAA4zB,EAAA,GACA5zB,EAAA,GAAA4zB,EAAA,GACA5zB,EAAA,GAAA4zB,EAAA,GACA5zB,EAAA,GAAA4zB,EAAA,GACA5zB,EAAA,GAAA4zB,EAAA,GACA5zB,EAAA,IAAA4zB,EAAA,GAAAx1B,EACA4B,EAAA,IAAA4zB,EAAA,GAAAt1B,EACA,MAEA,QACA0B,EAAA,IAAA4zB,EAAA,GAAAt1B,EACA,MAEA,QACA0B,EAAA,IAAA4zB,EAAA,GAAAx1B,EACA,MAEA,QAGA,IAFA,IAAA01B,EAAA,CAAA11B,EAAAE,GAAA5E,OAAAk6B,EAAAtkB,MAAA,IAEA1E,EAAA,EAAAC,EAAAipB,EAAA16B,OAA6CwR,EAAAC,EAAQD,IACrDkpB,EAAAlpB,IAAAkpB,EAAAlpB,GAAAxM,EACA01B,IAAAlpB,IAAAkpB,EAAAlpB,GAAAtM,EAGAqM,EAAAopB,MACAppB,IAAAjR,OAAAs6B,EAAAF,EAAAD,IACA,MAEA,QACAlpB,EAAAopB,OACAD,EAAAN,EAAAp1B,EAAAE,EAAAs1B,EAAA,GAAAA,EAAA,KACAt0B,KAAAw0B,EAAA,IACAnpB,IAAAjR,OAAAo6B,GACA,MAEA,QACAnpB,EAAAopB,MACAppB,IAAAjR,OAAA85B,EAAAp1B,EAAAE,EAAAs1B,EAAA,GAAAA,EAAA,GAAAA,EAAA,KACA5zB,EAAA,MAAAtG,OAAAiR,IAAAvR,OAAA,GAAAkW,OAAA,IACA,MAEA,QACAmgB,GAAAmE,EAAA,GAAAx1B,EACAsxB,GAAAkE,EAAA,GAAAt1B,EAEA,QACA,IAAAsM,EAAA,EAAAC,EAAA+oB,EAAAx6B,OAAuCwR,EAAAC,EAAQD,IAC/C5K,EAAA4K,IAAAgpB,EAAAhpB,MAAA,EAAAxM,EAAAE,QAIO,QAAAq1B,EACPG,EAAA,CAAA11B,EAAAE,GAAA5E,OAAAk6B,EAAAtkB,MAAA,IACA3E,EAAAopB,MACAppB,IAAAjR,OAAAs6B,EAAAF,EAAAD,IACA7zB,EAAA,MAAAtG,OAAAk6B,EAAAtkB,OAAA,SACO,QAAAqkB,EACPhpB,EAAAopB,OACAD,EAAAN,EAAAp1B,EAAAE,EAAAs1B,EAAA,GAAAA,EAAA,KACAt0B,KAAAw0B,EAAA,IACAnpB,IAAAjR,OAAAo6B,QACO,QAAAH,EACPhpB,EAAAopB,MACAppB,IAAAjR,OAAA85B,EAAAp1B,EAAAE,EAAAs1B,EAAA,GAAAA,EAAA,GAAAA,EAAA,KACA5zB,EAAA,MAAAtG,OAAAiR,IAAAvR,OAAA,GAAAkW,OAAA,SAEA,QAAAuY,EAAA,EAAAmL,EAAAY,EAAAx6B,OAAuCyuB,EAAAmL,EAAQnL,IAC/C7nB,EAAA6nB,GAAA+L,EAAA/L,GAMA,SAFA8L,IAAAvU,eAGA,OAAApf,EAAA,IACA,QACA5B,GAAAqxB,EACAnxB,GAAAoxB,EACA,MAEA,QACAtxB,EAAA4B,EAAA,GACA,MAEA,QACA1B,EAAA0B,EAAA,GACA,MAEA,QACAyvB,EAAAzvB,IAAA5G,OAAA,GACAs2B,EAAA1vB,IAAA5G,OAAA,GAEA,QACAgF,EAAA4B,IAAA5G,OAAA,GACAkF,EAAA0B,IAAA5G,OAAA,IAOA,OAFAuR,EAAAhQ,WACA4b,EAAApV,IAAAssB,EAAA9iB,GACAA,EAGA,SAAAspB,EAAAl2B,EAAAC,EAAAC,EAAAC,GACA,OAAAH,EAAAC,EAAAC,EAAAC,EAAAD,EAAAC,GAGA,SAAAg2B,EAAAn2B,EAAAC,EAAAm2B,EAAAC,EAAAn2B,EAAAC,GAIA,OAHA,IAGAH,EAFA,IAEAo2B,EAHA,IAGAn2B,EAFA,IAEAo2B,EAHA,IAGAn2B,EAFA,IAEAk2B,EAHA,IAGAj2B,EAFA,IAEAk2B,EAAAn2B,EAAAC,GAyHA,SAAA6xB,EAAAsE,EAAAC,EAAAv2B,EAAAC,EAAAC,EAAAC,EAAAyT,EAAAC,GAYA,IAXA,IAEArI,EACAS,EACAyM,EACAzK,EACAqjB,EACAZ,EACA8F,EACAC,EATAC,EAAA,GACAC,EAAA,QAUAx7B,EAAA,EAAmBA,EAAA,IAAOA,EAW1B,GAVA,GAAAA,GACA8Q,EAAA,EAAAqqB,EAAA,GAAAt2B,EAAA,EAAAE,EACAsL,GAAA,EAAA8qB,EAAA,EAAAt2B,EAAA,EAAAE,EAAA,EAAA0T,EACA8E,EAAA,EAAA1Y,EAAA,EAAAs2B,IAEArqB,EAAA,EAAAsqB,EAAA,GAAAt2B,EAAA,EAAAE,EACAqL,GAAA,EAAA+qB,EAAA,EAAAt2B,EAAA,EAAAE,EAAA,EAAA0T,EACA6E,EAAA,EAAAzY,EAAA,EAAAs2B,GAGAnzB,EAAAoI,GAAA,OACA,GAAApI,EAAA6I,GAAA,MACA,SAKA,GAFAgC,GAAAyK,EAAAzM,IAEAgC,EAAA,GACAyoB,EAAAn1B,KAAA0M,QAMAuoB,EAAAvqB,IAAA,EAAAyM,EAAAlN,EACAirB,EAAAhnB,EAAAzB,KAAAwoB,GAEAA,EAAA,IAMA,GAFAlF,IAAArlB,EAAAwqB,IAAA,EAAAjrB,KAEA8lB,EAAA,GACAoF,EAAAn1B,KAAA+vB,GAKA,GAFAZ,IAAAzkB,EAAAwqB,IAAA,EAAAjrB,KAEAklB,EAAA,GACAgG,EAAAn1B,KAAAmvB,IAUA,IANA,IAIAkG,EAFA/pB,EAAA6pB,EAAAr7B,OACAw7B,EAAAhqB,EAGAA,KAEA+pB,EAAA,GADA3oB,EAAAyoB,EAAA7pB,IAEA8pB,EAAA,GAAA9pB,GAAA+pB,MAAAN,EAAA,EAAAM,IAAA3oB,EAAAjO,EAAA,EAAA42B,EAAA3oB,IAAA/N,EAAA+N,MAAA2F,EACA+iB,EAAA,GAAA9pB,GAAA+pB,MAAAL,EAAA,EAAAK,IAAA3oB,EAAAhO,EAAA,EAAA22B,EAAA3oB,IAAA9N,EAAA8N,MAAA4F,EAQA,OALA8iB,EAAA,GAAAE,GAAAP,EACAK,EAAA,GAAAE,GAAAN,EACAI,EAAA,GAAAE,EAAA,GAAAjjB,EACA+iB,EAAA,GAAAE,EAAA,GAAAhjB,EACA8iB,EAAA,GAAAt7B,OAAAs7B,EAAA,GAAAt7B,OAAAw7B,EAAA,EACA,CACA/1B,IAAA,CACAT,EAAAsP,EAAA5E,MAAA,EAAA4rB,EAAA,IACAp2B,EAAAoP,EAAA5E,MAAA,EAAA4rB,EAAA,KAEA51B,IAAA,CACAV,EAAAqP,EAAA3E,MAAA,EAAA4rB,EAAA,IACAp2B,EAAAmP,EAAA3E,MAAA,EAAA4rB,EAAA,MAKA,SAAAvF,EAAAnwB,EAAAwzB,GACA,IAAAjc,GAAAic,GAAAluB,EAAAtF,GAEA,IAAAwzB,GAAAjc,EAAAse,MACA,OAAApH,EAAAlX,EAAAse,OA0IA,IAvIA,IAAAvoB,EAAAonB,EAAA10B,GACAsxB,EAAAkC,GAAAkB,EAAAlB,GACArL,EAAA,CACA/oB,EAAA,EACAE,EAAA,EACAw2B,GAAA,EACAC,GAAA,EACAhf,EAAA,EACAqd,EAAA,EACA4B,GAAA,KACAC,GAAA,MAEAC,EAAA,CACA92B,EAAA,EACAE,EAAA,EACAw2B,GAAA,EACAC,GAAA,EACAhf,EAAA,EACAqd,EAAA,EACA4B,GAAA,KACAC,GAAA,MAEAE,EAAA,SAAAn2B,EAAAnG,EAAAu8B,GACA,IAAAzF,EAAAC,EAEA,IAAA5wB,EACA,WAAAnG,EAAAuF,EAAAvF,EAAAyF,EAAAzF,EAAAuF,EAAAvF,EAAAyF,EAAAzF,EAAAuF,EAAAvF,EAAAyF,GAQA,SALAU,EAAA,KACAq2B,EAAA,EACAvpB,EAAA,MACOjT,EAAAm8B,GAAAn8B,EAAAo8B,GAAA,MAEPj2B,EAAA,IACA,QACAnG,EAAAkd,EAAA/W,EAAA,GACAnG,EAAAu6B,EAAAp0B,EAAA,GACA,MAEA,QACAA,EAAA,MAAAtF,OA7PA,SAAA47B,EAAAv3B,EAAAC,EAAAS,EAAAC,EAAA0S,EAAAmkB,EAAAC,EAAAv3B,EAAAC,EAAAu3B,GAGA,IAGA1D,EAHA2D,EAAA,IAAA/0B,EAAA,IACA2P,EAAA3P,EAAA,MAAAyQ,GAAA,GACAzG,EAAA,GAEAmN,EAAAvL,EAAAW,EAAAqC,OAAA,SAAAnR,EAAAE,EAAAgS,GAGA,OACAlS,EAHAA,EAAAoP,EAAA9M,IAAA4P,GAAAhS,EAAAkP,EAAApB,IAAAkE,GAIAhS,EAHAF,EAAAoP,EAAApB,IAAAkE,GAAAhS,EAAAkP,EAAA9M,IAAA4P,MAOA,IAAA7R,IAAAC,EACA,OAAAX,EAAAC,EAAAC,EAAAC,EAAAD,EAAAC,GAGA,GAAAu3B,EAuCAE,EAAAF,EAAA,GACAG,EAAAH,EAAA,GACAh2B,EAAAg2B,EAAA,GACA/1B,EAAA+1B,EAAA,OA1CA,CAEA13B,GADAg0B,EAAAja,EAAA/Z,EAAAC,GAAAsS,IACAlS,EACAJ,EAAA+zB,EAAAzzB,EAEAL,GADA8zB,EAAAja,EAAA7Z,EAAAC,GAAAoS,IACAlS,EACAF,EAAA6zB,EAAAzzB,EACAkP,EAAA9M,IAAAC,EAAA,IAAAyQ,GACA5D,EAAApB,IAAAzL,EAAA,IAAAyQ,GADA,IAEAhT,GAAAL,EAAAE,GAAA,EACAK,GAAAN,EAAAE,GAAA,EACA6I,EAAA3I,KAAAK,KAAAH,KAAAI,KAEAqI,EAAA,IAEAtI,GADAsI,EAAAyG,EAAAzB,KAAAhF,GAEArI,GAAAqI,GAGA,IAAA8uB,EAAAp3B,IACAq3B,EAAAp3B,IACAmpB,GAAA0N,GAAAC,GAAA,KAAAhoB,EAAAzB,KAAA5K,GAAA00B,EAAAC,EAAAD,EAAAv3B,IAAAw3B,EAAA13B,MAAAy3B,EAAAv3B,IAAAw3B,EAAA13B,OACAqB,EAAAooB,EAAAppB,EAAAH,EAAAI,GAAAX,EAAAE,GAAA,EACAyB,EAAAmoB,GAAAnpB,EAAAN,EAAAK,GAAAT,EAAAE,GAAA,EACAy3B,EAAAnoB,EAAA8D,OAAAtT,EAAA0B,GAAAhB,GAAAmW,QAAA,IACA+gB,EAAApoB,EAAA8D,OAAApT,EAAAwB,GAAAhB,GAAAmW,QAAA,KACA8gB,EAAA53B,EAAA0B,EAAAkB,EAAAg1B,KAEA,IAAAA,EAAA,EAAAh1B,EAAAg1B,IADAC,EAAA33B,EAAAwB,EAAAkB,EAAAi1B,KAEA,IAAAA,EAAA,EAAAj1B,EAAAi1B,GAEAJ,GAAAG,EAAAC,IACAD,GAAA,EAAAh1B,IAGA60B,GAAAI,EAAAD,IACAC,GAAA,EAAAj1B,GASA,IAAAo1B,EAAAH,EAAAD,EAEA,GAAAx0B,EAAA40B,GAAAL,EAAA,CACA,IAAAM,EAAAJ,EACAK,EAAAh4B,EACAi4B,EAAAh4B,EACA03B,EAAAD,EAAAD,GAAAF,GAAAI,EAAAD,EAAA,MAGAhrB,EAAA2qB,EAFAr3B,EAAAwB,EAAAhB,EAAA+O,EAAA9M,IAAAk1B,GACA13B,EAAAwB,EAAAhB,EAAA8O,EAAApB,IAAAwpB,GACAn3B,EAAAC,EAAA0S,EAAA,EAAAokB,EAAAS,EAAAC,EAAA,CAAAN,EAAAI,EAAAv2B,EAAAC,IAGAq2B,EAAAH,EAAAD,EACA,IAAAQ,EAAA3oB,EAAA9M,IAAAi1B,GACAS,EAAA5oB,EAAApB,IAAAupB,GACAU,EAAA7oB,EAAA9M,IAAAk1B,GACAU,EAAA9oB,EAAApB,IAAAwpB,GACA5pB,EAAAwB,EAAA6D,IAAA0kB,EAAA,GACAQ,EAAA,IAAA93B,EAAAuN,EACAwqB,EAAA,IAAA93B,EAAAsN,EACAyqB,EAAA,CAAA14B,EAAAC,GACA04B,EAAA,CAAA34B,EAAAw4B,EAAAH,EAAAp4B,EAAAw4B,EAAAL,GACAQ,EAAA,CAAA14B,EAAAs4B,EAAAD,EAAAp4B,EAAAs4B,EAAAH,GACAO,EAAA,CAAA34B,EAAAC,GAIA,GAHAw4B,EAAA,KAAAD,EAAA,GAAAC,EAAA,GACAA,EAAA,KAAAD,EAAA,GAAAC,EAAA,GAEAjB,EACA,OAAAiB,EAAAC,EAAAC,GAAAl9B,OAAAiR,GAKA,IAFA,IAAAksB,EAAA,GAEA39B,EAAA,EAAAgX,GAHAvF,EAAA,CAAA+rB,EAAAC,EAAAC,GAAAl9B,OAAAiR,GAAAvN,OAAA+B,MAAA,MAGA/F,OAAsCF,EAAAgX,EAAQhX,IAC9C29B,EAAA39B,KAAA,EAAA4e,EAAAnN,EAAAzR,EAAA,GAAAyR,EAAAzR,GAAAoX,GAAAhS,EAAAwZ,EAAAnN,EAAAzR,GAAAyR,EAAAzR,EAAA,GAAAoX,GAAAlS,EAGA,OAAAy4B,GAuJA/tB,MAAA,GAAAjQ,EAAAuF,EAAAvF,EAAAyF,GAAA5E,OAAAsF,EAAAsQ,MAAA,MACA,MAEA,QACA,KAAA8lB,GAAA,KAAAA,GAEAzF,EAAA,EAAA92B,EAAAuF,EAAAvF,EAAAi8B,GAEAlF,EAAA,EAAA/2B,EAAAyF,EAAAzF,EAAAk8B,KAGApF,EAAA92B,EAAAuF,EACAwxB,EAAA/2B,EAAAyF,GAGAU,EAAA,KAAA2wB,EAAAC,GAAAl2B,OAAAsF,EAAAsQ,MAAA,IACA,MAEA,QACA,KAAA8lB,GAAA,KAAAA,GAEAv8B,EAAAm8B,GAAA,EAAAn8B,EAAAuF,EAAAvF,EAAAm8B,GAEAn8B,EAAAo8B,GAAA,EAAAp8B,EAAAyF,EAAAzF,EAAAo8B,KAGAp8B,EAAAm8B,GAAAn8B,EAAAuF,EACAvF,EAAAo8B,GAAAp8B,EAAAyF,GAGAU,EAAA,MAAAtF,OAAAw6B,EAAAr7B,EAAAuF,EAAAvF,EAAAyF,EAAAzF,EAAAm8B,GAAAn8B,EAAAo8B,GAAAj2B,EAAA,GAAAA,EAAA,KACA,MAEA,QACAnG,EAAAm8B,GAAAh2B,EAAA,GACAnG,EAAAo8B,GAAAj2B,EAAA,GACAA,EAAA,MAAAtF,OAAAw6B,EAAAr7B,EAAAuF,EAAAvF,EAAAyF,EAAAU,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,KACA,MAEA,QACAA,EAAA,MAAAtF,OAAAu6B,EAAAp7B,EAAAuF,EAAAvF,EAAAyF,EAAAU,EAAA,GAAAA,EAAA,KACA,MAEA,QACAA,EAAA,MAAAtF,OAAAu6B,EAAAp7B,EAAAuF,EAAAvF,EAAAyF,EAAAU,EAAA,GAAAnG,EAAAyF,IACA,MAEA,QACAU,EAAA,MAAAtF,OAAAu6B,EAAAp7B,EAAAuF,EAAAvF,EAAAyF,EAAAzF,EAAAuF,EAAAY,EAAA,KACA,MAEA,QACAA,EAAA,MAAAtF,OAAAu6B,EAAAp7B,EAAAuF,EAAAvF,EAAAyF,EAAAzF,EAAAkd,EAAAld,EAAAu6B,IAIA,OAAAp0B,GAEA83B,EAAA,SAAAC,EAAA79B,GACA,GAAA69B,EAAA79B,GAAAE,OAAA,GACA29B,EAAA79B,GAAAmX,QAGA,IAFA,IAAAwiB,EAAAkE,EAAA79B,GAEA25B,EAAAz5B,QACA49B,EAAA99B,GAAA,IAEAo3B,IAAA2G,EAAA/9B,GAAA,KAEA69B,EAAA5mB,OAAAjX,IAAA,QAAAQ,OAAAm5B,EAAA1iB,OAAA,OAGA4mB,EAAA5mB,OAAAjX,EAAA,GACAgX,EAAAzC,EAAAnB,EAAAlT,OAAAk3B,KAAAl3B,QAAA,KAGA89B,EAAA,SAAA3E,EAAAC,EAAA2E,EAAAC,EAAAl+B,GACAq5B,GAAAC,GAAA,KAAAD,EAAAr5B,GAAA,SAAAs5B,EAAAt5B,GAAA,KACAs5B,EAAAriB,OAAAjX,EAAA,OAAAk+B,EAAAh5B,EAAAg5B,EAAA94B,IACA64B,EAAArC,GAAA,EACAqC,EAAApC,GAAA,EACAoC,EAAA/4B,EAAAm0B,EAAAr5B,GAAA,GACAi+B,EAAA74B,EAAAi0B,EAAAr5B,GAAA,GACAgX,EAAAzC,EAAAnB,EAAAlT,OAAAk3B,KAAAl3B,QAAA,KAGA49B,EAAA,GAEAC,EAAA,GAEAI,EAAA,GAEAjC,EAAA,GAGAl8B,EAAA,EAAAgX,EAAAzC,EAAAnB,EAAAlT,OAAAk3B,KAAAl3B,QAAA,GAA8DF,EAAAgX,EAAQhX,IAAA,CACtEoT,EAAApT,KAAAm+B,EAAA/qB,EAAApT,GAAA,IAEA,KAAAm+B,IAEAL,EAAA99B,GAAAm+B,EAEAn+B,IAAAk8B,EAAA4B,EAAA99B,EAAA,KAGAoT,EAAApT,GAAAi8B,EAAA7oB,EAAApT,GAAAiuB,EAAAiO,GAEA,KAAA4B,EAAA99B,IAAA,KAAAm+B,IAAAL,EAAA99B,GAAA,KAIA49B,EAAAxqB,EAAApT,GAEAo3B,IAEAA,EAAAp3B,KAAAm+B,EAAA/G,EAAAp3B,GAAA,IAEA,KAAAm+B,IACAJ,EAAA/9B,GAAAm+B,EACAn+B,IAAAk8B,EAAA6B,EAAA/9B,EAAA,KAGAo3B,EAAAp3B,GAAAi8B,EAAA7E,EAAAp3B,GAAAg8B,EAAAE,GAEA,KAAA6B,EAAA/9B,IAAA,KAAAm+B,IACAJ,EAAA/9B,GAAA,KAGA49B,EAAAxG,EAAAp3B,IAGAg+B,EAAA5qB,EAAAgkB,EAAAnJ,EAAA+N,EAAAh8B,GACAg+B,EAAA5G,EAAAhkB,EAAA4oB,EAAA/N,EAAAjuB,GACA,IAAAo+B,EAAAhrB,EAAApT,GACAq+B,EAAAjH,KAAAp3B,GACAs+B,EAAAF,EAAAl+B,OACAq+B,EAAAnH,GAAAiH,EAAAn+B,OACA+tB,EAAA/oB,EAAAk5B,EAAAE,EAAA,GACArQ,EAAA7oB,EAAAg5B,EAAAE,EAAA,GACArQ,EAAA2N,GAAAxnB,EAAAgqB,EAAAE,EAAA,KAAArQ,EAAA/oB,EACA+oB,EAAA4N,GAAAznB,EAAAgqB,EAAAE,EAAA,KAAArQ,EAAA7oB,EACA42B,EAAAJ,GAAAxE,IAAAhjB,EAAAiqB,EAAAE,EAAA,KAAAvC,EAAA92B,GACA82B,EAAAH,GAAAzE,IAAAhjB,EAAAiqB,EAAAE,EAAA,KAAAvC,EAAA52B,GACA42B,EAAA92B,EAAAkyB,GAAAiH,EAAAE,EAAA,GACAvC,EAAA52B,EAAAgyB,GAAAiH,EAAAE,EAAA,GAOA,OAJAnH,IACA/Z,EAAAse,MAAApH,EAAAnhB,IAGAgkB,EAAA,CAAAhkB,EAAAgkB,GAAAhkB,EA0BA,SAAA0nB,EAAA0D,EAAA/gB,GAGA,IAFA,IAAA9d,EAAA,GAEAK,EAAA,EAAAy+B,EAAAD,EAAAt+B,OAAsCu+B,EAAA,GAAAhhB,EAAAzd,EAAmBA,GAAA,GACzD,IAAAoT,EAAA,EACAlO,GAAAs5B,EAAAx+B,EAAA,GACAoF,GAAAo5B,EAAAx+B,EAAA,IACO,CACPkF,GAAAs5B,EAAAx+B,GACAoF,GAAAo5B,EAAAx+B,EAAA,IACO,CACPkF,GAAAs5B,EAAAx+B,EAAA,GACAoF,GAAAo5B,EAAAx+B,EAAA,IACO,CACPkF,GAAAs5B,EAAAx+B,EAAA,GACAoF,GAAAo5B,EAAAx+B,EAAA,KAGAyd,EACAzd,EAKSy+B,EAAA,GAAAz+B,EACToT,EAAA,IACAlO,GAAAs5B,EAAA,GACAp5B,GAAAo5B,EAAA,IAESC,EAAA,GAAAz+B,IACToT,EAAA,IACAlO,GAAAs5B,EAAA,GACAp5B,GAAAo5B,EAAA,IAEAprB,EAAA,IACAlO,GAAAs5B,EAAA,GACAp5B,GAAAo5B,EAAA,KAhBAprB,EAAA,IACAlO,GAAAs5B,EAAAC,EAAA,GACAr5B,GAAAo5B,EAAAC,EAAA,IAkBAA,EAAA,GAAAz+B,EACAoT,EAAA,GAAAA,EAAA,GACSpT,IACToT,EAAA,IACAlO,GAAAs5B,EAAAx+B,GACAoF,GAAAo5B,EAAAx+B,EAAA,KAKAL,EAAAyG,KAAA,OAAAgN,EAAA,GAAAlO,EAAA,EAAAkO,EAAA,GAAAlO,EAAAkO,EAAA,GAAAlO,GAAA,IAAAkO,EAAA,GAAAhO,EAAA,EAAAgO,EAAA,GAAAhO,EAAAgO,EAAA,GAAAhO,GAAA,GAAAgO,EAAA,GAAAlO,EAAA,EAAAkO,EAAA,GAAAlO,EAAAkO,EAAA,GAAAlO,GAAA,GAAAkO,EAAA,GAAAhO,EAAA,EAAAgO,EAAA,GAAAhO,EAAAgO,EAAA,GAAAhO,GAAA,EAAAgO,EAAA,GAAAlO,EAAAkO,EAAA,GAAAhO,IAGA,OAAAzF,EAIA0T,EAAAvN,KAAAsF,EAYAiI,EAAAvN,KAAA8F,iBAkBAyH,EAAAvN,KAAA8T,mBAcAvG,EAAAvN,KAAA44B,WAAA,SAAA54B,EAAAnE,EAAA4vB,GACA,GAAA3uB,KAAAgJ,eAAA9F,GAAAyrB,EAAA,KACA,OAAA2E,EAAApwB,EAAAnE,GAAAiQ,IAGA,IAAAvB,EAAA6lB,EAAApwB,EAAAyrB,EAAA,GACA,OAAA5vB,EAAAu0B,EAAA7lB,EAAA1O,GAAAiQ,IAAAvB,GAWA0X,EAAAnc,eAAA,WACA,GAAAhJ,KAAAwW,KAAAxN,eACA,OAAAhJ,KAAAwW,KAAAxN,kBAqBAmc,EAAAnO,iBAAA,SAAA1Z,GACA,OAAA0Z,EAAAhX,KAAAmE,KAAA,KAAA7G,IAgBA6nB,EAAA2W,WAAA,SAAA/8B,EAAA4vB,GACA,OAAAle,EAAAvN,KAAA44B,WAAA97B,KAAAmE,KAAA,KAAApF,EAAA4vB,IAGAle,EAAAW,EAAAmT,MAyCA9T,EAAAvN,KAAAqvB,oBA6BA9hB,EAAAvN,KAAA8wB,aAcAvjB,EAAAvN,KAAAgxB,oBAEAzjB,EAAAsrB,QAAA,SAAAz5B,EAAAE,EAAAyX,EAAAqd,GAiBA,IAhBA,IAAApzB,EAAA,IACAgK,EAAAqW,EAAAjiB,EAAA4B,EAAA,EAAA1B,EAAA0B,EAAA,EAAAA,KACA83B,EAAA,GACAtP,EAAAzS,EAAA,GAAAxS,eAAA,cAAArK,GACA,OACAkF,EAAA2X,EAAA7c,GAAAkF,EACAE,EAAAyX,EAAA7c,GAAAoF,IAEK,SAAApF,GACL,OACAkF,EAAA2X,EAAA7c,GACAoF,EAAA80B,EAAAl6B,KAGA6+B,EAAA,EAEA/3B,GAAA,MAAA+3B,GAAA,CACA,QAAA7+B,EAAA,EAAAgX,EAAA6F,EAAA3c,OAAoCF,EAAAgX,EAAQhX,IAAA,CAC5C,IAAA64B,EAAAvJ,EAAAtvB,GAEA,GAAA82B,EAAAhmB,EAAA+nB,EAAA3zB,EAAA2zB,EAAAzzB,GAAA,CACAy5B,IACAD,EAAAx4B,KAAAyyB,GACA,OAIAgG,IAEA/tB,EAAAqW,EAAAjiB,GADA4B,GAAA,GACA,EAAA1B,EAAA0B,EAAA,EAAAA,MAIA,QAAAA,EAAA,CAIA,IACA2K,EADAO,EAAA0H,IAGA,IAAA1Z,EAAA,EAAAgX,EAAA4nB,EAAA1+B,OAAmCF,EAAAgX,EAAQhX,IAAA,CAC3C,IAAA0b,EAAArI,EAAArB,IAAA9M,EAAAE,EAAAw5B,EAAA5+B,GAAAkF,EAAA05B,EAAA5+B,GAAAoF,GAEA4M,EAAA0J,IACA1J,EAAA0J,EACAkjB,EAAA5+B,GAAAgS,IAAA0J,EACAjK,EAAAmtB,EAAA5+B,IAIA,OAAAyR,IAeA4B,EAAAvN,KAAAixB,kBAyBA1jB,EAAAvN,KAAAg5B,aA5sCA,SAAAzF,EAAAC,GACA,OAAAF,EAAAC,EAAAC,IA4sCAjmB,EAAAvN,KAAAi5B,mBAzsCA,SAAA1F,EAAAC,GACA,OAAAF,EAAAC,EAAAC,EAAA,IAwtCAjmB,EAAAvN,KAAAk5B,cA9oCA,SAAAl5B,EAAAZ,EAAAE,GACA,IAAA8Y,EAAA+b,EAAAn0B,GACA,OAAAgxB,EAAA5Y,EAAAhZ,EAAAE,IAAAg0B,EAAAtzB,EAAA,MAAAZ,EAAAE,GAAA,KAAA8Y,EAAAnZ,GAAA,cAgqCAsO,EAAAvN,KAAAuZ,QAAA4a,EACA5mB,EAAAvN,KAAAwL,IAAAipB,EAYAlnB,EAAAvN,KAAAm5B,WAvjCA,SAAAzK,GACA,IAAAnX,EAAAjS,EAAAopB,GACA0K,EAAA98B,OAAAZ,UAAA6C,YAEA,GAAAgZ,EAAA8hB,IACA,OAAA5K,EAAAlX,EAAA8hB,KAGA9rB,EAAAK,GAAA8gB,EAAA,UAAAnhB,EAAAK,GAAA8gB,KAAA,cACAA,EAAAnhB,EAAA8J,gBAAAqX,IAGA,IAAA/iB,EAAA,GACAvM,EAAA,EACAE,EAAA,EACAmxB,EAAA,EACAC,EAAA,EACA3sB,EAAA,EAEA,KAAA2qB,EAAA,QAGA+B,EAFArxB,EAAAsvB,EAAA,MAGAgC,EAFApxB,EAAAovB,EAAA,MAGA3qB,IACA4H,EAAArL,KAAA,KAAAlB,EAAAE,KAGA,QAAApF,EAAA6J,EAAAmN,EAAAwd,EAAAt0B,OAA8CF,EAAAgX,EAAQhX,IAAA,CACtD,IAAA8G,EAAA2K,EAAAzR,GAAA,GACA06B,EAAAlG,EAAAx0B,GAEA,GAAA06B,EAAA,IAAAwE,EAAAx9B,KAAAg5B,EAAA,IAGA,OAFA5zB,EAAA,GAAAo4B,EAAAx9B,KAAAg5B,EAAA,IAEA5zB,EAAA,IACA,QACAA,EAAA,GAAA4zB,EAAA,GACA5zB,EAAA,GAAA4zB,EAAA,GACA5zB,EAAA,GAAA4zB,EAAA,GACA5zB,EAAA,GAAA4zB,EAAA,GACA5zB,EAAA,GAAA4zB,EAAA,GACA5zB,EAAA,KAAA4zB,EAAA,GAAAx1B,GAAAyW,QAAA,GACA7U,EAAA,KAAA4zB,EAAA,GAAAt1B,GAAAuW,QAAA,GACA,MAEA,QACA7U,EAAA,KAAA4zB,EAAA,GAAAt1B,GAAAuW,QAAA,GACA,MAEA,QACA4a,EAAAmE,EAAA,GACAlE,EAAAkE,EAAA,GAEA,QACA,QAAAhpB,EAAA,EAAAC,EAAA+oB,EAAAx6B,OAA2CwR,EAAAC,EAAQD,IACnD5K,EAAA4K,KAAAgpB,EAAAhpB,MAAA,EAAAxM,EAAAE,IAAAuW,QAAA,OAIO,CACP7U,EAAA2K,EAAAzR,GAAA,GAEA,KAAA06B,EAAA,KACAnE,EAAAmE,EAAA,GAAAx1B,EACAsxB,EAAAkE,EAAA,GAAAt1B,GAGA,QAAAupB,EAAA,EAAAmL,EAAAY,EAAAx6B,OAAuCyuB,EAAAmL,EAAQnL,IAC/Cld,EAAAzR,GAAA2uB,GAAA+L,EAAA/L,GAIA,IAAA3c,EAAAP,EAAAzR,GAAAE,OAEA,OAAAuR,EAAAzR,GAAA,IACA,QACAkF,EAAAqxB,EACAnxB,EAAAoxB,EACA,MAEA,QACAtxB,IAAAuM,EAAAzR,GAAAgS,EAAA,GACA,MAEA,QACA5M,IAAAqM,EAAAzR,GAAAgS,EAAA,GACA,MAEA,QACA9M,IAAAuM,EAAAzR,GAAAgS,EAAA,GACA5M,IAAAqM,EAAAzR,GAAAgS,EAAA,IAMA,OAFAP,EAAAhQ,WACA4b,EAAA8hB,IAAA5K,EAAA9iB,GACAA,GAk+BA4B,EAAAvN,KAAA8oB,WAAA4L,EAYAnnB,EAAAvN,KAAAs5B,QAAAnJ,EAWA5iB,EAAAvN,KAAA2E,IA/bA,SAAA3E,EAAA6iB,GACA,IAAAA,EACA,OAAA7iB,EAGA,IAAAZ,EAAAE,EAAApF,EAAA0R,EAAAsF,EAAArF,EAAA0tB,EAGA,IAAAr/B,EAAA,EAAAgX,GAFAlR,EAAAmwB,EAAAnwB,IAEA5F,OAAiCF,EAAAgX,EAAQhX,IAGzC,IAAA0R,EAAA,EAAAC,GAFA0tB,EAAAv5B,EAAA9F,IAEAE,OAAoCwR,EAAAC,EAAQD,GAAA,EAC5CxM,EAAAyjB,EAAAzjB,EAAAm6B,EAAA3tB,GAAA2tB,EAAA3tB,EAAA,IACAtM,EAAAujB,EAAAvjB,EAAAi6B,EAAA3tB,GAAA2tB,EAAA3tB,EAAA,IACA2tB,EAAA3tB,GAAAxM,EACAm6B,EAAA3tB,EAAA,GAAAtM,EAIA,OAAAU,GA6aAuN,EAAAvN,KAAArE,WACA4R,EAAAvN,KAAAmS,MAAAsc,IAeAlhB,EAAAyU,OAAA,SAAAzU,EAAAM,EAAAG,EAAAF,GACA,IAAAW,EAAA7O,KAAAE,IACA4O,EAAA9O,KAAAC,IAEA25B,EAAA,SAAAC,GAMA,GALA38B,KAAA28B,MAAA,GACA38B,KAAA48B,SAAA,GACA58B,KAAA1C,OAAA,EACA0C,KAAAgH,KAAA,MAEA21B,EACA,QAAAv/B,EAAA,EAAAgX,EAAAuoB,EAAAr/B,OAAwCF,EAAAgX,EAAQhX,IAChDu/B,EAAAv/B,KACA4C,UAAA28B,MAAAr/B,QAAA0C,KAAA28B,MAAA38B,KAAA28B,MAAAr/B,QAAAq/B,EAAAv/B,GACA4C,KAAA1C,WAKAu/B,EAAAH,EAAA99B,UAUAi+B,EAAAr5B,KAAA,WAGA,IAFA,IAAA2Q,EAAA/E,EAEAhS,EAAA,EAAAgX,EAAA/W,UAAAC,OAA0CF,EAAAgX,EAAQhX,KAClD+W,EAAA9W,UAAAD,MAIA4C,KADAoP,EAAApP,KAAA28B,MAAAr/B,QACA0C,KAAA28B,MAAAvtB,GAAA+E,EACAnU,KAAA1C,UAIA,OAAA0C,MAWA68B,EAAA5E,IAAA,WAEA,OADAj4B,KAAA1C,eAAA0C,UAAA1C,UACA0C,KAAA28B,MAAA1E,OAgBA4E,EAAA5+B,QAAA,SAAAwC,EAAAq8B,GACA,QAAA1/B,EAAA,EAAAgX,EAAApU,KAAA28B,MAAAr/B,OAA2CF,EAAAgX,EAAQhX,IACnD,QAAAqD,EAAA3B,KAAAg+B,EAAA98B,KAAA28B,MAAAv/B,MACA,OAAA4C,KAIA,OAAAA,MAyBA68B,EAAAE,QAAA,SAAA1R,EAAA9E,EAAAtX,EAAAxO,GACA,mBAAAwO,KAAA3R,SACAmD,EAAAwO,EACAA,EAAA7B,EAAAmC,QAGA8b,aAAA5a,EAAAW,EAAA4rB,YACAv8B,EAAA4qB,EAAA5qB,SACAwO,EAAAoc,EAAApc,OACAsX,EAAAtX,EAAAd,IACAkd,IAAAlnB,MAGA,IAAA4P,EAAA1W,UAEA,GAAAoT,EAAAK,GAAAua,EAAA,UAAA5a,EAAAK,GAAAiD,IAAAzW,OAAA,YACA,IAAA2/B,GAAA,EAGA,IAAAC,EACAC,EAAA,WACAD,EACAl9B,KAAAkO,EAAAgvB,EAEAA,EAAAl9B,KAAAkO,GAGAkvB,EAAA,EACAluB,EAAAlP,KACAq9B,EAAA58B,GAAA,aACA28B,GAAAluB,EAAA5R,QACAmD,EAAA3B,KAAAkB,OAIA,OAAAA,KAAA/B,QAAA,SAAAgC,EAAA7C,GACA+P,IAAA0W,KAAA,oBAAA5jB,EAAA4M,GAAAswB,GAEAF,EACAlpB,EAAA3W,IAAA6C,EAAA88B,QAAA/vB,MAAA/M,EAAA8T,EAAA3W,IAEA6C,EAAA88B,QAAA1R,EAAA9E,EAAAtX,EAAAouB,MAcAR,EAAArV,OAAA,WACA,KAAAxnB,KAAA1C,QACA0C,KAAAi4B,MAAAzQ,SAGA,OAAAxnB,MAuBA68B,EAAAS,KAAA,SAAAn5B,EAAAsJ,EAAAS,GACA,IAAA4M,EAAA,GAEA,sBAAArN,EACAzN,KAAA48B,SAAAz4B,GAAAsJ,MACK,CACL,IAAA8vB,EAAArvB,GAAA/J,EAEAnE,KAAA48B,SAAAz4B,GAAA,SAAA2V,GACAgB,EAAAyiB,GAAAzjB,EACArM,EAAAtJ,KAAA2W,IAIA,OAAA9a,MAWA68B,EAAA14B,KAAA,SAAAK,GACA,IAAAg5B,EAAA,GAEA,QAAAzR,KAAAvnB,EACAxE,KAAA48B,SAAA7Q,GACA/rB,KAAA48B,SAAA7Q,GAAAvnB,EAAAunB,IAEAyR,EAAAzR,GAAAvnB,EAAAunB,GAIA,QAAA3uB,EAAA,EAAAgX,EAAApU,KAAA28B,MAAAr/B,OAA2CF,EAAAgX,EAAQhX,IACnD4C,KAAA28B,MAAAv/B,GAAA+G,KAAAq5B,GAGA,OAAAx9B,MAUA68B,EAAA3L,MAAA,WACA,KAAAlxB,KAAA1C,QACA0C,KAAAi4B,OAgBA4E,EAAAxoB,OAAA,SAAAnK,EAAA+J,EAAAwpB,GACAvzB,IAAA,EAAAyH,EAAA3R,KAAA1C,OAAA4M,EAAA,GAAAA,EACA+J,EAAAtC,EAAA,EAAAC,EAAA5R,KAAA1C,OAAA4M,EAAA+J,IACA,IAGA7W,EAHAsgC,EAAA,GACAC,EAAA,GACA5pB,EAAA,GAGA,IAAA3W,EAAA,EAAeA,EAAAC,UAAAC,OAAsBF,IACrC2W,EAAAvQ,KAAAnG,UAAAD,IAGA,IAAAA,EAAA,EAAeA,EAAA6W,EAAW7W,IAC1BugC,EAAAn6B,KAAAxD,KAAAkK,EAAA9M,IAGA,KAAUA,EAAA4C,KAAA1C,OAAA4M,EAAyB9M,IACnCsgC,EAAAl6B,KAAAxD,KAAAkK,EAAA9M,IAGA,IAAAwgC,EAAA7pB,EAAAzW,OAEA,IAAAF,EAAA,EAAeA,EAAAwgC,EAAAF,EAAApgC,OAA0BF,IACzC4C,KAAA28B,MAAAzyB,EAAA9M,GAAA4C,KAAAkK,EAAA9M,KAAAwgC,EAAA7pB,EAAA3W,GAAAsgC,EAAAtgC,EAAAwgC,GAKA,IAFAxgC,EAAA4C,KAAA28B,MAAAr/B,OAAA0C,KAAA1C,QAAA2W,EAAA2pB,EAEA59B,KAAA5C,WACA4C,KAAA5C,KAGA,WAAAs/B,EAAAiB,IAaAd,EAAAgB,QAAA,SAAA59B,GACA,QAAA7C,EAAA,EAAAgX,EAAApU,KAAA1C,OAAqCF,EAAAgX,EAAQhX,IAC7C,GAAA4C,KAAA5C,IAAA6C,EAEA,OADAD,KAAAqU,OAAAjX,EAAA,IACA,EAIA,UAaAy/B,EAAAtV,YAAA,SAAAtnB,GAGA,IAFA,IAAA7C,EAAA4C,KAAA28B,MAAAr/B,OAEAF,KACA4C,KAAA28B,MAAAv/B,GAAAmqB,YAAAtnB,GAGA,OAAAD,MAWA68B,EAAApgB,QAAA,WAMA,IALA,IAAAna,EAAA,GACAE,EAAA,GACAL,EAAA,GACAC,EAAA,GAEAhF,EAAA4C,KAAA28B,MAAAr/B,OAAmCF,KACnC,IAAA4C,KAAA28B,MAAAv/B,GAAAmoB,QAAA,CACA,IAAAhB,EAAAvkB,KAAA28B,MAAAv/B,GAAAqf,UACAna,EAAAkB,KAAA+gB,EAAAjiB,GACAE,EAAAgB,KAAA+gB,EAAA/hB,GACAL,EAAAqB,KAAA+gB,EAAAjiB,EAAAiiB,EAAA9hB,OACAL,EAAAoB,KAAA+gB,EAAA/hB,EAAA+hB,EAAA7hB,QAQA,OACAJ,EALAA,EAAAsP,EAAA5E,MAAA,EAAA1K,GAMAE,EALAA,EAAAoP,EAAA5E,MAAA,EAAAxK,GAMAL,GALAA,EAAAwP,EAAA3E,MAAA,EAAA7K,GAMAC,GALAA,EAAAuP,EAAA3E,MAAA,EAAA5K,GAMAK,MAAAN,EAAAG,EACAI,OAAAN,EAAAI,EACAmB,GAAArB,GAAAH,EAAAG,GAAA,EACAsB,GAAApB,GAAAJ,EAAAI,GAAA,IAaAq6B,EAAAxnB,MAAA,SAAArH,GACAA,EAAA,IAAA0uB,EAEA,QAAAt/B,EAAA,EAAAgX,EAAApU,KAAA28B,MAAAr/B,OAA2CF,EAAAgX,EAAQhX,IACnD4Q,EAAAxK,KAAAxD,KAAA28B,MAAAv/B,GAAAiY,SAGA,OAAArH,GAGA6uB,EAAAh+B,SAAA,WACA,yBAGAg+B,EAAA71B,KAAA,MASAyJ,EAAAisB,MAaAjsB,EAAAvB,IAAA,WACA,IAAAA,EAAA,IAAAwtB,EAMA,OAJAr/B,UAAAC,QACA4R,EAAA1L,KAAAwJ,MAAAkC,EAAA7Q,MAAAO,UAAA4U,MAAA1U,KAAAzB,UAAA,IAGA6R,KAgBAuB,EAAAyU,OAAA,SAAAzU,EAAAM,EAAAG,EAAAF,GACA,IAAA8sB,EAAA,GACA9P,EAAA,YACAzc,EAAA/R,OAGA,SAAAu+B,EAAA5pB,GACA,IAAA2E,EAAA3E,EAAA,GAEA,OAAA2E,EAAArX,eACA,QACA,OAAAqX,EAAA,KAEA,QACA,OAAAA,EAAA,aAEA,QACA,UAAA3E,EAAA7W,OACA,CAAAwb,EAAA,EAAA3E,EAAA,GAAAA,EAAA,IAEA,CAAA2E,EAAA,GAGA,QACA,UAAA3E,EAAA7W,OACA,CAAAwb,EAAA,IAAA3E,EAAA,GAAAA,EAAA,IACS,GAAAA,EAAA7W,OACT,CAAAwb,EAAA,KAEA,CAAAA,EAAA,IAgDA,SAAAoV,EAAAngB,GACA,OAAAA,EASA,SAAAiwB,EAAAjwB,GACA,OAAAA,EAAAzM,KAAA,KAGA,SAAA28B,EAAAvkB,GACA,OAAAjJ,EAAA+H,IAAAkB,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,IAGA,SAAAie,EAAAz0B,GACA,IACA9F,EACAgX,EACAtF,EACAC,EACAmK,EACAzL,EANAse,EAAA,EAOA7d,EAAA,GAEA,IAAA9Q,EAAA,EAAAgX,EAAAlR,EAAA5F,OAAiCF,EAAAgX,EAAQhX,IAAA,CAIzC,IAHA8b,EAAA,IACAzL,EAAA,KAAAvK,EAAA9F,GAAA,QAEA0R,EAAA,EAAAC,EAAA7L,EAAA9F,GAAAE,OAAsCwR,EAAAC,EAAQD,IAC9CrB,EAAAqB,GAAA,OAAAid,IAAA,IAGA7S,GAAAzL,EAAA,IACAS,EAAA9Q,GAAA8b,EAGA,OAAA5Q,SAAA,yCAAA4F,EAAA,MAGA,SAAAgwB,EAAAh7B,GAGA,IAFA,IAAAgW,EAAA,GAEA9b,EAAA,EAAAgX,EAAAlR,EAAA5F,OAAqCF,EAAAgX,EAAQhX,IAC7C,QAAA0R,EAAA,EAAAC,EAAA7L,EAAA9F,GAAAE,OAA0CwR,EAAAC,EAAQD,IAClDoK,EAAA1V,KAAAN,EAAA9F,GAAA0R,IAIA,OAAAoK,EAGA,SAAAilB,EAAArpB,GACA,OAAAvB,SAAAuB,GAjIAgpB,EAAAvb,OAAAub,EAAAvhB,KAAA,SA4IAxL,EAAAnS,UAAAw/B,MAAA,SAAA95B,EAAA4J,GACA,OAAAf,IAAA,kBAAAnN,KAAAsE,EAAA4J,GAAA0Q,gBAGAzR,IAAAqS,GAAA,2BAAAlb,EAAA4J,GACA,IAAAmB,EACAjB,EACAX,EAAA8D,EAAAvR,KAAAmE,KAAAG,IAAA,IACArE,EAAAD,KAEA,aAAA89B,EAAAx5B,GAGA,OAFA+K,EAAAoB,EAAAuI,MAAAvL,GACAW,EAAAqC,EAAAuI,MAAA9K,GACA,CACAnP,KAAA,CAAAsQ,EAAAnL,EAAAmL,EAAAyI,EAAAzI,EAAAnB,EAAAmB,EAAAkJ,SACAoW,GAAA,CAAAvgB,EAAAlK,EAAAkK,EAAA0J,EAAA1J,EAAAF,EAAAE,EAAAmK,SACA7E,EAAAuqB,GAIA,cAAA35B,EAGA,OACAvF,KAHAsQ,EAAArP,KAAAmE,KAAAG,GAAA8nB,GAAA/oB,MAAA,KAAAwE,IAAAw2B,QAIA1P,GAHAvgB,EAAAF,EAAA7K,MAAA,KAAAwE,IAAAw2B,QAIA3qB,EAAAsqB,GAIA,gBAAA15B,GAAA,qBAAAA,GAAA,oBAAAA,EAaA,MAZA,iBAAA4J,IACAA,EAAAqD,EAAArD,GAAA6G,QAAA,gBAAiCtH,IA7IjC,SAAA8lB,EAAAZ,EAAAlW,GACA8W,KAAA,IAAA9iB,EAAA+K,OACAmX,KAAA,IAAAliB,EAAA+K,OACA+X,EAAA9iB,EAAAuK,qBAAAuY,EAAA9M,sBAAA,GACAkM,EAAAliB,EAAAuK,qBAAA2X,EAAAlM,sBAAA,GAUA,IATA,IAIA3X,EACAC,EACAuvB,EACAC,EAPAC,EAAA17B,KAAAE,IAAAuwB,EAAAj2B,OAAAq1B,EAAAr1B,QACAyB,EAAA,GACA4vB,EAAA,GACAvxB,EAAA,EAMUA,EAAAohC,EAAephC,IAAA,CAIzB,GAHAkhC,EAAA/K,EAAAn2B,IAAA2gC,EAAApL,EAAAv1B,IACAmhC,EAAA5L,EAAAv1B,IAAA2gC,EAAAO,GAEAA,EAAA,IAAAC,EAAA,SAAAD,EAAA,GAAA78B,gBAAA68B,EAAA,IAAAC,EAAA,IAAAD,EAAA,IAAAC,EAAA,UAAAD,EAAA,GAAA78B,gBAAA68B,EAAA,IAAAC,EAAA,IAAAD,EAAA,IAAAC,EAAA,KACAhL,EAAA9iB,EAAAW,EAAAiK,iBAAAkY,EAAA9W,KACAkW,EAAAliB,EAAAW,EAAAiK,iBAAAsX,EAAAlW,KACA1d,EAAA,MAAAw0B,EAAA9lB,EAAA8lB,EAAArlB,EAAAqlB,EAAA5Y,EAAA4Y,EAAAx2B,EAAAw2B,EAAA7tB,EAAA6tB,EAAA7f,IACAib,EAAA,MAAAgE,EAAAllB,EAAAklB,EAAAzkB,EAAAykB,EAAAhY,EAAAgY,EAAA51B,EAAA41B,EAAAjtB,EAAAitB,EAAAjf,IACA,MAMA,IAHA3U,EAAA3B,GAAA,GACAuxB,EAAAvxB,GAAA,GAEA0R,EAAA,EAAAC,EAAAjM,KAAAE,IAAAs7B,EAAAhhC,OAAAihC,EAAAjhC,QAAwDwR,EAAAC,EAAQD,IAChEA,KAAAwvB,IAAAv/B,EAAA3B,GAAA0R,GAAAwvB,EAAAxvB,IACAA,KAAAyvB,IAAA5P,EAAAvxB,GAAA0R,GAAAyvB,EAAAzvB,IAIA,OACA/P,KAAAm/B,EAAAn/B,GACA4vB,GAAAuP,EAAAvP,GACAjb,EAAAikB,EAAA54B,IAkHA0/B,CARAhxB,EAAAzN,KAAA+lB,OAKA7X,EAHAuC,EAAAW,EAAAgK,YAAAtb,KAAAoO,GAGAuC,EAAAW,EAAAiK,iBAAAnN,EAAAlO,KAAAyc,WAFAhM,EAAAW,EAAAiK,iBAAA5K,EAAAW,EAAA8J,oBAAAhN,GAAAlO,KAAAyc,WAKA,WACA,OAAAxc,EAAAwc,QAAA,KAIA,QAAAnY,GAAA,QAAAA,EAEA,OACAvF,KAAAm/B,GAFA7uB,EAAAoB,EAAAvN,KAAAs5B,QAAA/uB,EAAAS,IAEA,IACAygB,GAAAuP,EAAA7uB,EAAA,IACAqE,EAAAikB,EAAAtoB,EAAA,KAIA,aAAA/K,EAGA,OACAvF,KAHAsQ,EAAAkC,EAAA9D,GAAApK,MAAAoN,EAAAW,EAAAa,WAIA0c,GAHAvgB,EAAAmD,EAAArD,GAAA7K,MAAAoN,EAAAW,EAAAa,WAIAyB,EAAA,SAAA3F,GACA,OAAAA,IAKA,GAAAowB,EAAA1wB,IAAA0wB,EAAAjwB,GACA,OACAnP,KAAAwD,WAAAkL,GACAkhB,GAAApsB,WAAA2L,GACAwF,EAAAwa,GAIA,IA5IAE,EAuDAsQ,EAAAngC,EAqFAiwB,EAAA/gB,EAAAgL,MAAAuV,GACA2Q,EAAAptB,EAAArD,GAAAuK,MAAAuV,GAEA,OAAAQ,IAxFAkQ,EAwFAlQ,EAxFAjwB,EAwFAogC,EAvFAluB,EAAAK,GAAA4tB,EAAA,UAAAjuB,EAAAK,GAAAvS,EAAA,UAIAmgC,EAAA7/B,YAAAN,EAAAM,YAoFA,CACAE,KAAAwD,WAAAkL,GACAkhB,GAAApsB,WAAA2L,GACAwF,GAnJA0a,EAmJAI,EAlJA,SAAAzgB,GACA,OAAAA,EAAAgL,QAAA,GAAAqV,KAoJA,CACArvB,KAAAiB,KAAAynB,KAAAnjB,GACAqqB,GAAA3uB,KAAAynB,KAAAnjB,EAAA4J,GACAwF,EAAAwa,OAkBAzd,EAAAyU,OAAA,SAAAzU,EAAAM,EAAAG,EAAAF,GAoUA,IAnUA,IAAAmU,EAAApU,EAAAnS,UAEAggC,GAAA,gBAAA5tB,EAAAC,KACA4tB,EAAA,gIACAC,EAAA,CACAC,UAAA,aACAC,UAAA,YACAC,QAAA,YAEAC,EAAA,SAAAjJ,EAAAh2B,GACA,IAAAqE,EAAA,KAAA2xB,EAAA,yBACAhlB,EAAAhR,KAAAuW,KAAAvW,EAAAuW,KAAA2H,cAAAnN,EAAAC,IACA,OAAAA,EAAA3M,KAAA2M,EAAAhF,gBAAA,0BAAA3H,IAKA66B,EAAA,WACA,OAAAn/B,KAAAo/B,cAAAC,kBAKAC,EAAA,WACA,OAAAt/B,KAAAo/B,cAAAG,mBAEAC,EAAA,SAAA1qB,EAAA9N,EAAAzF,EAAAlC,GACA,IAAAogC,EAAAb,GAAAE,EAAA93B,GAAA83B,EAAA93B,KACA0M,EAAA,SAAAhO,GACA,IAAAyF,EAAA+zB,EAAA,IAAA7/B,GACAqgC,EAAAR,EAAA,IAAA7/B,GAEA,GAAAu/B,GAAAE,EAAA,eAAA93B,GACA,QAAA5J,EAAA,EAAAgX,EAAA1O,EAAAi6B,eAAAj6B,EAAAi6B,cAAAriC,OAAuEF,EAAAgX,EAAQhX,IAC/E,GAAAsI,EAAAi6B,cAAAviC,GAAAD,QAAA2X,KAAA8H,SAAAlX,EAAAi6B,cAAAviC,GAAAD,QAAA,CACA,IAAAyiC,EAAAl6B,GACAA,IAAAi6B,cAAAviC,IACAgiC,cAAAQ,EACAl6B,EAAA25B,eAAAF,EACAz5B,EAAA65B,gBAAAD,EACA,MAKA,IAAAh9B,EAAAoD,EAAAm6B,QAAAH,EACAl9B,EAAAkD,EAAAo6B,QAAA30B,EACA,OAAA5J,EAAAzC,KAAAO,EAAAqG,EAAApD,EAAAE,IAQA,OALAwE,IAAAy4B,GACA3qB,EAAA1O,iBAAAY,EAAA0M,GAAA,GAGAoB,EAAA1O,iBAAAq5B,EAAA/rB,GAAA,GACA,WAMA,OALA1M,IAAAy4B,GACA3qB,EAAArK,oBAAAzD,EAAA0M,GAAA,GAGAoB,EAAArK,oBAAAg1B,EAAA/rB,GAAA,IACA,IAGAqsB,EAAA,GACAC,EAAA,SAAAt6B,GAQA,IAPA,IAIAu6B,EAJA39B,EAAAoD,EAAAm6B,QACAr9B,EAAAkD,EAAAo6B,QACA30B,EAAA+zB,EAAA,KACAQ,EAAAR,EAAA,KAEApwB,EAAAixB,EAAAziC,OAEAwR,KAAA,CAGA,GAFAmxB,EAAAF,EAAAjxB,GAEA8vB,GAIA,IAHA,IACAsB,EADA9iC,EAAAsI,EAAAy6B,SAAAz6B,EAAAy6B,QAAA7iC,OAGAF,KAGA,IAFA8iC,EAAAx6B,EAAAy6B,QAAA/iC,IAEAgjC,YAAAH,EAAAhgC,GAAAogC,MAAAxzB,IAAAozB,EAAAhgC,GAAAuW,KAAAoG,SAAAsjB,EAAA/iC,QAAA,CACAmF,EAAA49B,EAAAL,QACAr9B,EAAA09B,EAAAJ,SACAp6B,EAAA05B,cAAA15B,EAAA05B,cAAA15B,GAAA25B,iBACA,YAIA35B,EAAA25B,iBAGA,IAAA7oB,EAAAypB,EAAAhgC,GAAAuW,KAEAA,EAAA8Q,YACA9Q,EAAA3U,WACA2U,EAAApN,MAAAqX,QAOAne,GAAAo9B,EACAl9B,GAAA2I,EACAgC,IAAA,kBAAA8yB,EAAAhgC,GAAA4M,GAAAozB,EAAAK,YAAAL,EAAAhgC,GAAAqC,EAAA29B,EAAAhgC,GAAAogC,MAAA/9B,EAAAE,EAAAy9B,EAAAhgC,GAAAogC,MAAA79B,EAAAF,EAAAE,EAAAkD,KAGA66B,EAAA,SAAAA,EAAA76B,GACA+K,EAAA+vB,YAAAR,GAAAS,UAAAF,GAIA,IAHA,IACAN,EADA7iC,EAAA2iC,EAAAziC,OAGAF,MACA6iC,EAAAF,EAAA3iC,IACA6C,GAAAogC,MAAA,GACAlzB,IAAA,iBAAA8yB,EAAAhgC,GAAA4M,GAAAozB,EAAAS,WAAAT,EAAAU,aAAAV,EAAAK,YAAAL,EAAAhgC,GAAAyF,GACAyH,IAAAyzB,IAAA,eAAAX,EAAAhgC,GAAA4M,IAGAkzB,EAAA,IAyMA3iC,EAAAyhC,EAAAvhC,OAA6BF,MAC7B,SAAAyjC,GACApwB,EAAAowB,GAAA1b,EAAA0b,GAAA,SAAAt/B,EAAAoS,GACA,GAAAlD,EAAAK,GAAAvP,EAAA,YACAvB,KAAA6+B,OAAA7+B,KAAA6+B,QAAA,GACA7+B,KAAA6+B,OAAAr7B,KAAA,CACAc,KAAAu8B,EACAntB,EAAAnS,EACAu/B,OAAAtB,EAAAx/B,KAAAwW,MAAA/W,SAAAohC,EAAAt/B,EAAAoS,GAAA3T,aAGA,QAAA5C,EAAA,EAAAgX,EAAApU,KAAA6+B,OAAAvhC,OAAkDF,EAAAgX,EAAQhX,IAC1D,GAAA4C,KAAA6+B,OAAAzhC,GAAAkH,MAAAu8B,EACA,IACA7gC,KAAA6+B,OAAAzhC,GAAAsW,EAAA5U,KAAAkB,MACe,MAAA0F,IAKf,OAAA1F,MAGAyQ,EAAA,KAAAowB,GAAA1b,EAAA,KAAA0b,GAAA,SAAAt/B,GAIA,IAHA,IAAAs9B,EAAA7+B,KAAA6+B,QAAA,GACA/lB,EAAA+lB,EAAAvhC,OAEAwb,KACA,GAAA+lB,EAAA/lB,GAAAxU,MAAAu8B,IAAAhC,EAAA/lB,GAAApF,GAAAnS,OAIA,OAHAs9B,EAAA/lB,GAAAgoB,SACAjC,EAAAxqB,OAAAyE,EAAA,IACA+lB,EAAAvhC,eAAA0C,KAAA6+B,OACA7+B,KAIA,OAAAA,MAnCA,CAqCK6+B,EAAAzhC,IAeL+nB,EAAA4b,MAAA,SAAAC,EAAAC,EAAAC,EAAAC,GACA,OAAAnhC,KAAAohC,UAAAJ,EAAAE,GAAAG,SAAAJ,EAAAE,GAAAD,IAaA/b,EAAAmc,QAAA,SAAAN,EAAAC,GACA,OAAAjhC,KAAAuhC,YAAAP,GAAAQ,WAAAP,IAGA,IAAAQ,EAAA,GAoCAtc,EAAA4a,KAAA,SAAA2B,EAAAC,EAAAC,EAAAtB,EAAAK,EAAAD,GACA,IAGAmB,EAHA5hC,EAAAD,KAEA,IAAA3C,UAAAC,OAEA,OAAA2C,EAAA8/B,KAAA,SAAA7pB,EAAAC,GACAnW,KAAAmE,KAAA,CACAoZ,UAAAskB,KAAA,UAAA3rB,EAAAC,MAEO,WACP0rB,EAAA7hC,KAAAud,YAAA+I,QAIA,SAAArf,EAAAvB,EAAApD,EAAAE,IACAkD,EAAA05B,eAAA15B,GAAA25B,iBACAp/B,EAAAogC,MAAA/9B,IACArC,EAAAogC,MAAA79B,IACAvC,EAAAogC,MAAAxzB,GAAAnH,EAAA06B,YACAL,EAAAziC,QAAAmT,EAAAuuB,UAAAgB,GAAAf,QAAAsB,GACAR,EAAAv8B,KAAA,CACAvD,KACAqgC,aACAK,cACAD,cAEAiB,GAAAx0B,IAAAqS,GAAA,mBAAAvf,EAAA4M,GAAA80B,GACAD,GAAAv0B,IAAAqS,GAAA,kBAAAvf,EAAA4M,GAAA60B,GACAE,GAAAz0B,IAAAqS,GAAA,iBAAAvf,EAAA4M,GAAA+0B,GACAz0B,IAAA,mBAAAlN,EAAA4M,GAAA8zB,GAAAL,GAAArgC,EAAAqC,EAAAE,EAAAkD,GAGA,SAAA5E,EAAA4E,EAAApD,EAAAE,GACA2K,IAAA,iBAAAlN,EAAA4M,GAAA5M,EAAAyF,EAAApD,EAAAE,GAWA,OARA2K,IAAAqS,GAAA,iBAAAvf,EAAA4M,GAAA5F,GACAhH,EAAAogC,MAAA,GACAoB,EAAAj+B,KAAA,CACAvD,KACAgH,QACAnG,SAEAb,EAAA8+B,UAAAj+B,GACAb,GAqBAklB,EAAA2c,OAAA,WAGA,IAFA,IAAA1kC,EAAAqkC,EAAAnkC,OAEAF,KACAqkC,EAAArkC,GAAA6C,IAAAD,OACAA,KAAA+hC,YAAAN,EAAArkC,GAAA0D,MACA2gC,EAAAptB,OAAAjX,EAAA,GACA+P,IAAA2zB,OAAA,eAAA9gC,KAAA6M,IACAM,IAAA2zB,OAAA,iBAAA9gC,KAAA6M,KAKA,OADA40B,EAAAnkC,QAAAmT,EAAA+vB,YAAAR,GAAAS,UAAAF,GACAvgC,QAgBAyQ,EAAAyU,OAAA,SAAAzU,EAAAM,EAAAG,EAAAF,GACAD,EAAAnS,UAAA,IACAojC,EAAA9wB,EAAAtS,UACAqjC,EAAA,kBACA1wB,EAAA/R,OACAqT,EAAApC,EAAAW,EAAAyB,EACApC,EAAA5S,OAAA,GAiBAmkC,EAAAnkC,OAAA,SAAAqkC,GACA,IAAA7kB,EAAArd,KAEA,OAAAqd,EAAArW,OACAqW,WAGA,IAAA3J,EAAAjD,EAAAsO,MAAAxN,EAAA2wB,IACAr1B,EAAA4D,EAAAW,EAAAvE,KAGAhP,GAFAwf,EAAA7G,KAAA6Y,YACAhS,EAAA7G,KAAA8Y,aACAzc,EAAA,WAQA,OANAA,EAAAhV,EAAA,CACAgP,KACAs1B,YAAA,mBAEAtkC,EAAAoI,YAAAyN,EAAA8C,MACA6G,EAAAY,KAAAhY,YAAApI,GACA,IAAAkT,EAAAlT,IAGAsP,IAAAqS,GAAA,sCACArS,IAAAxD,OACA,IAAA6G,EAAAqC,EAAA7S,KAAAwW,KAAA,UAEA,GAAAhG,EAAA,CACA,IAAAiI,EAAAlH,EAAAf,GAAAiI,MAAAwpB,GACA,OAAAxpB,GAAAhI,EAAAsM,OAAAtE,EAAA,OAGAtL,IAAAqS,GAAA,iCAAAhb,GACA,GAAAA,aAAAuM,GAAA,UAAAvM,EAAAwC,KAAA,CACAmG,IAAAxD,OACA,IAAAkD,EAAArI,EAAAgS,KAAA3J,GAEAA,IACAgG,EAAArO,EAAAgS,KAAA,CACA3J,GAAArI,EAAAqI,KAEAA,EAAArI,EAAAqI,IAGAgG,EAAA7S,KAAAwW,KAAA,CACA3Y,OAAA4S,EAAAmC,IAAA/F,KAIArI,GAAA,QAAAA,IACA2I,IAAAxD,OACA3J,KAAAwW,KAAAnD,gBAAA,aAmBA5C,EAAA5S,OAAAukC,KAAA,SAAA9/B,EAAAE,GACA,MAAAF,IACAA,EAAA,GAGA,IAAA+/B,EAAA,MAAA7/B,EAAAF,EAAA,CAAAA,EAAAE,GACA,OAAAiO,EAAAiE,OAAA,yCAA4D,CAC5D2tB,SAIA5xB,EAAA5S,OAAAukC,KAAAvjC,SAAA,WACA,OAAAmB,QA+BAyQ,EAAA5S,OAAAykC,OAAA,SAAApsB,EAAAC,EAAAisB,EAAAppB,EAAAT,GA+BA,OA9BA,MAAAA,IACA,MAAAS,GACAT,EAAA6pB,EACAA,EAAA,EACAppB,EAAA,SAEAT,EAAAS,EACAA,EAAAopB,EACAA,EAAA,IAIA,MAAAA,IACAA,EAAA,GAGA,MAAA7pB,IACAA,EAAA,GAGA,MAAArC,IACAA,EAAA,EACAC,EAAA,GAGA,MAAAA,IACAA,EAAAD,GAGA8C,EAAAvI,EAAAuI,SACAvI,EAAAiE,OAAA,kVAA4Q,CAC5QsE,QACA9C,KACAC,KACAisB,OACA7pB,aAIA9H,EAAA5S,OAAAykC,OAAAzjC,SAAA,WACA,OAAAmB,QAaAyQ,EAAA5S,OAAA0kC,UAAA,SAAAC,GAKA,OAJA,MAAAA,IACAA,EAAA,GAGA/xB,EAAAiE,OAAA,oGAAwG,CACxGjH,EAAA,eAAA+0B,GACAt0B,EAAA,eAAAs0B,GACA7nB,EAAA,eAAA6nB,GACAzlC,EAAA,eAAAylC,GACA98B,EAAA,eAAA88B,GACA9uB,EAAA,eAAA8uB,GACA1qB,EAAA,eAAA0qB,GACAv3B,EAAA,eAAAu3B,MAIA/xB,EAAA5S,OAAA0kC,UAAA1jC,SAAA,WACA,OAAAmB,QAaAyQ,EAAA5S,OAAA4kC,MAAA,SAAAD,GAKA,OAJA,MAAAA,IACAA,EAAA,GAGA/xB,EAAAiE,OAAA,oGAAwG,CACxGjH,EAAA,aAAA+0B,GACAt0B,EAAA,aAAAs0B,GACA7nB,EAAA,aAAA6nB,GACAzlC,EAAA,aAAAylC,GACA98B,EAAA,aAAA88B,GACA9uB,EAAA,aAAA8uB,GACA1qB,EAAA,aAAA0qB,GACAv3B,EAAA,aAAAu3B,GACAplC,EAAA,aAAAolC,MAIA/xB,EAAA5S,OAAA4kC,MAAA5jC,SAAA,WACA,OAAAmB,QAaAyQ,EAAA5S,OAAA6kC,SAAA,SAAAF,GAKA,OAJA,MAAAA,IACAA,EAAA,GAGA/xB,EAAAiE,OAAA,qDAAuE,CACvE8tB,OAAA,EAAAA,KAIA/xB,EAAA5S,OAAA6kC,SAAA7jC,SAAA,WACA,OAAAmB,QAaAyQ,EAAA5S,OAAA8kC,UAAA,SAAArtB,GAEA,OADAA,KAAA,EACA7E,EAAAiE,OAAA,qDAAuE,CACvEY,WAIA7E,EAAA5S,OAAA8kC,UAAA9jC,SAAA,WACA,OAAAmB,QAaAyQ,EAAA5S,OAAAie,OAAA,SAAA0mB,GAMA,OALA,MAAAA,IACAA,EAAA,GAIA/xB,EAAAiE,OAAA,sNAAkN,CAClN8tB,SACAI,QAAA,EAAAJ,KAIA/xB,EAAA5S,OAAAie,OAAAjd,SAAA,WACA,OAAAmB,QAaAyQ,EAAA5S,OAAAglC,WAAA,SAAAL,GAKA,OAJA,MAAAA,IACAA,EAAA,GAGA/xB,EAAAiE,OAAA,yKAAqK,CACrK8tB,YAIA/xB,EAAA5S,OAAAglC,WAAAhkC,SAAA,WACA,OAAAmB,QAaAyQ,EAAA5S,OAAAilC,SAAA,SAAAN,GAKA,OAJA,MAAAA,IACAA,EAAA,GAGA/xB,EAAAiE,OAAA,2OAAuO,CACvO8tB,SACAI,QAAA,GAAAJ,EAAA,KAIA/xB,EAAA5S,OAAAilC,SAAAjkC,SAAA,WACA,OAAAmB,UAgBAyQ,EAAAyU,OAAA,SAAAzU,EAAAM,EAAAG,EAAAF,EAAA4M,GACA,IAAA2G,EAAA9T,EAAAW,EAAAmT,IACAzT,EAAAL,EAAAK,GACAiyB,EAAA,sBACAlkC,EAAA,WACA,UAAAmB,KAAAkW,GAAA,IAAAlW,KAAAmW,IAkBApF,EAAAnS,UAAAokC,SAAA,SAAA/iC,EAAAgjC,GACA,MAAAA,GAAAnyB,EAAA7Q,EAAA,YACAgjC,EAAAhjC,EACAA,EAAA,MAIA,IAAA+4B,GADA/4B,KAAAD,KAAAqd,OACAZ,QAAAxc,EAAAwc,UAAA8H,EAAAtkB,GACAwb,EAAAzb,KAAAyc,UACAvD,EAAA,GAIA,OAFA+pB,GADAA,OAAAxqB,MAAAsqB,IACAE,EAAA,GAAAxhC,cAAA,KAGA,QACAyX,EAAAhD,GAAA,EACAgD,EAAA/C,GAAA6iB,EAAAx2B,EAAAiZ,EAAAjZ,EACA,MAEA,QACA0W,EAAAhD,GAAA,EACAgD,EAAA/C,GAAA6iB,EAAA52B,GAAAqZ,EAAArZ,GACA,MAEA,QACA8W,EAAAhD,GAAA,EACAgD,EAAA/C,GAAA6iB,EAAAp1B,GAAA6X,EAAA7X,GACA,MAEA,QACAsV,EAAAhD,GAAA8iB,EAAA12B,EAAAmZ,EAAAnZ,EACA4W,EAAA/C,GAAA,EACA,MAEA,QACA+C,EAAAhD,GAAA8iB,EAAA72B,GAAAsZ,EAAAtZ,GACA+W,EAAA/C,GAAA,EACA,MAEA,QACA+C,EAAAhD,GAAA8iB,EAAAr1B,GAAA8X,EAAA9X,GACAuV,EAAA/C,GAAA,EAKA,OADA+C,EAAAra,WACAqa,GAkBAnI,EAAAnS,UAAAskC,MAAA,SAAAjjC,EAAAgjC,GACA,OAAAjjC,KAAAud,UAAA,MAAAvd,KAAAgjC,SAAA/iC,EAAAgjC,OAgBAxyB,EAAAyU,OAAA,SAAAzU,EAAAM,EAAAG,EAAAF,EAAA4M,GACA,IAAAuH,EAAApU,EAAAnS,UACAkS,EAAAL,EAAAK,GACAS,EAAA/R,OACA8R,EAAA,iBAEA,SAAAkC,EAAAzU,EAAA4vB,EAAAjb,GACA,gBAAAtV,GACA,IAAAyQ,EAAAzQ,EAAAoV,MAAAzU,EAAA4vB,GAMA,OAJA,GAAA9f,EAAAvR,SACAuR,IAAA,IAGA6E,IAAA7E,MAIA,IAAAmuB,EAAA,SAAA74B,EAAAoiB,EAAAtX,EAAAxO,GACA,mBAAAwO,KAAA3R,SACAmD,EAAAwO,EACAA,EAAA7B,EAAAmC,QAGAvP,KAAAmE,OACAnE,KAAAmO,IAAAoY,EACAtX,IAAAjP,KAAAiP,UACAxO,IAAAT,KAAAS,aAGAgQ,EAAAW,EAAA4rB,YAcAvsB,EAAA0yB,UAAA,SAAAh/B,EAAAoiB,EAAAtX,EAAAxO,GACA,WAAAu8B,EAAA74B,EAAAoiB,EAAAtX,EAAAxO,IAmBA0kB,EAAAie,OAAA,WACA,IACAv0B,EAAA,GAEA,QAAAhC,KAHA7M,KAGAsd,MAHAtd,KAIAsd,MAAAhM,GAAAzE,IACA,SAAAY,GACAoB,EAAArL,KAAA,CACA8L,KAAA,IAAA0tB,EAAAvvB,EAAA41B,OAAA51B,EAAAU,IAAAV,EAAAwB,OAAAxB,EAAA61B,WACAl2B,KAAAK,EACA81B,UAAA91B,EAAA+B,SACAA,OAAA,SAAAzB,GACA,OAAAN,EAAA+B,OAAAzB,IAEApE,KAAA,WACA8D,EAAA9D,UATA,CALA3J,KAiBSsd,MAAAzQ,IAIT,OAAAgC,GAkCA4B,EAAAssB,QAAA,SAAAh+B,EAAA4vB,EAAAhC,EAAApG,EAAAtX,EAAAxO,GACA,mBAAAwO,KAAA3R,SACAmD,EAAAwO,EACAA,EAAA7B,EAAAmC,QAGA,IAAA1B,EAAAT,EAAAqC,OACAH,EAAAlC,EAAArO,EAAA4vB,EAAA9gB,IAAA0Y,EAAAnZ,EAAAqC,KAAAkd,EAAA1d,GAEA,OADAxO,GAAA0M,IAAA0W,KAAA,eAAAvU,EAAAzC,GAAApM,GACA6O,GAYA6V,EAAAxb,KAAA,WAGA,IAFA,IAAA2T,EAAAtd,KAAAojC,SAEAhmC,EAAA,EAAAgX,EAAAkJ,EAAAhgB,OAAsCF,EAAAgX,EAAQhX,IAC9CkgB,EAAAlgB,GAAAuM,OAGA,OAAA3J,MAgBAmlB,EAAA4X,QAAA,SAAA1R,EAAA9E,EAAAtX,EAAAxO,GACA,mBAAAwO,KAAA3R,SACAmD,EAAAwO,EACAA,EAAA7B,EAAAmC,QAGA8b,aAAA2R,IACAv8B,EAAA4qB,EAAA5qB,SACAwO,EAAAoc,EAAApc,OACAsX,EAAA8E,EAAAld,IACAkd,IAAAlnB,MAGA,IAGApF,EACA4vB,EACAjb,EACA8vB,EANAC,EAAA,GACAC,EAAA,GACAhmC,EAAA,GAKAuC,EAAAD,KAEA,QAAA9B,KAAAmtB,EACA,GAAAA,EAAA/Z,GAAApT,GAAA,CACA+B,EAAAm+B,OAEAr/B,GADAykC,EAAAvjC,EAAAm+B,MAAAlgC,EAAAqT,EAAA8Z,EAAAntB,MACAa,KACA4vB,EAAA6U,EAAA7U,GACAjb,EAAA8vB,EAAA9vB,IAEA3U,GAAAkB,EAAAkE,KAAAjG,GACAywB,GAAAtD,EAAAntB,IAGA,IAAAkR,EAAA0B,EAAA/R,EAAA,SAAAA,EAAAzB,OAAA,EACAI,EAAAQ,GAAAsV,EAAAiwB,EAAAnmC,OAAAmmC,EAAAnmC,OAAA8R,EAAAsE,GACA+vB,IAAA7lC,OAAAmB,GACA2kC,IAAA9lC,OAAA+wB,GAIA,IAAA9gB,EAAAT,EAAAqC,OACAH,EAAAlC,EAAAq2B,EAAAC,EAAA71B,IAAA0Y,EAAAnZ,EAAAqC,KAAA,SAAA1B,GACA,IAAA5J,EAAA,GAEA,QAAAjG,KAAAR,EACAA,EAAA4T,GAAApT,KACAiG,EAAAjG,GAAAR,EAAAQ,GAAA6P,IAIA9N,EAAAkE,SACK8K,GAcL,OAbAhP,EAAAqd,MAAAhO,EAAAzC,IAAAyC,EACAA,EAAA+zB,OAAAhY,EACA/b,EAAAg0B,UAAA7iC,EACA0M,IAAA,oBAAAlN,EAAA4M,GAAAyC,GACAnC,IAAA0W,KAAA,eAAAvU,EAAAzC,GAAA,WACAM,IAAAyzB,IAAA,UAAAtxB,EAAAzC,WACA5M,EAAAqd,MAAAhO,EAAAzC,IACApM,KAAA3B,KAAAmB,KAEAkN,IAAA0W,KAAA,aAAAvU,EAAAzC,GAAA,WACAM,IAAAyzB,IAAA,UAAAtxB,EAAAzC,WACA5M,EAAAqd,MAAAhO,EAAAzC,MAEA5M,KAgBAwQ,EAAAyU,OAAA,SAAAzU,EAAAM,EAAAG,EAAAF,GA0CA,SAAA2yB,EAAAC,GACAA,IAAAvgC,MAAA,SACA,IAAA2V,EAAA,IAAAxZ,OAAAokC,EAAA,IAmBA,OAlBA5qB,EAAA,IAAA4qB,EAAA,GACA5qB,EAAA,KAAA4qB,EAAA,GACA5qB,EAAA,KAAA4qB,EAAA,GACA5qB,EAAA,KAAA4qB,EAAA,GACA5qB,EAAA,KAAA4qB,EAAA,GACA5qB,EAAA,KAAA4qB,EAAA,GACA5qB,EAAA,KAAA4qB,EAAA,GACA5qB,EAAA,KAAA4qB,EAAA,GACA5qB,EAAA,KAAA4qB,EAAA,GACA5qB,EAAA,KAAA4qB,EAAA,GAEAA,EAAA,MACA5qB,EAAA6qB,KAAAD,EAAA,IACA5qB,EAAA8qB,KAAAF,EAAA,IACA5qB,EAAA+qB,KAAAH,EAAA,IACA5qB,EAAAgrB,KAAAJ,EAAA,KAGA5qB,EAjCAvI,EAAAwzB,IAAA,GAUAxzB,EAAAyzB,KAAA,GA0BAzzB,EAAAwzB,IAAA7rB,IAAAurB,EAhEA,sGAiEAlzB,EAAAwzB,IAAAE,KAAAR,EAhEA,sGAiEAlzB,EAAAwzB,IAAAG,OAAAT,EAhEA,sGAiEAlzB,EAAAwzB,IAAAI,WAAAV,EAhEA,sGAiEAlzB,EAAAwzB,IAAAK,OAAAX,EAhEA,sGAiEAlzB,EAAAwzB,IAAA3rB,KAAAqrB,EAhEA,sGAiEAlzB,EAAAwzB,IAAAM,UAAAZ,EAhEA,sGAiEAlzB,EAAAwzB,IAAAO,KAAAb,EAhEA,sGAiEAlzB,EAAAwzB,IAAAQ,KAAAd,EAhEA,sGAiEAlzB,EAAAwzB,IAAA5rB,MAAAsrB,EAhEA,sGAiEAlzB,EAAAwzB,IAAAS,WAAAf,EAhEA,sGAiEAlzB,EAAAwzB,IAAAU,KAAAhB,EAhEA,sGAiEAlzB,EAAAwzB,IAAAW,OAAAjB,EAhEA,sGAiEAlzB,EAAAwzB,IAAAY,MAAAlB,EAhEA,sGAiEAlzB,EAAAwzB,IAAAa,OAAAnB,EAhEA,sGAiEAlzB,EAAAwzB,IAAAc,WAAApB,EAhEA,sGAiEAlzB,EAAAwzB,IAAAe,MAAArB,EAhEA,0EAiEAlzB,EAAAwzB,IAAAgB,KAAAtB,EAhEA,0EAiEAlzB,EAAAwzB,IAAAiB,SAAAvB,EAhEA,0EAiEAlzB,EAAAyzB,KAAAiB,UAAA,UACA10B,EAAAyzB,KAAAkB,SAAA,UACA30B,EAAAyzB,KAAAmB,UAAA,UACA50B,EAAAyzB,KAAAY,OAAA,UACAr0B,EAAAyzB,KAAAoB,SAAA,UACA70B,EAAAyzB,KAAAqB,UAAA,UACA90B,EAAAyzB,KAAAsB,OAAA,UACA/0B,EAAAyzB,KAAAuB,QAAA,UACAh1B,EAAAyzB,KAAAwB,WAAA,UACAj1B,EAAAyzB,KAAAyB,WAAA,UACAl1B,EAAAyzB,KAAA0B,SAAA,UACAn1B,EAAAyzB,KAAA2B,YAAA,UACAp1B,EAAAyzB,KAAA4B,SAAA,UACAr1B,EAAAyzB,KAAA6B,SAAA,UACAt1B,EAAAyzB,KAAA8B,OAAA,UACAv1B,EAAAyzB,KAAA+B,OAAA,UACAx1B,EAAAyzB,KAAAgC,WAAA,UACAz1B,EAAAyzB,KAAAiC,aAAA,UACA11B,EAAAyzB,KAAAkC,SAAA,UACA31B,EAAAyzB,KAAAmC,SAAA,UAWA51B,EAAA61B,gBAAA,WACA,QAAAttB,KAAAvI,EAAAwzB,IACAxzB,EAAAwzB,IAAAx8B,eAAAuR,KACArZ,OAAAqZ,GAAAvI,EAAAwzB,IAAAjrB,OAKA9L,EAAAD,QAAAwD,wBCrwSA,IAAAtR,GAkBA,SAAA6R,GACA,IAQAu1B,EACA58B,EARA2H,EAAA,iBACAW,EAAA,SACAu0B,EAAA,UAEAC,EAAA,SAAAh5B,EAAAS,GACA,OAAAT,EAAAS,GAIA2wB,EAAA,CACAlvB,EAAA,IAEAiP,EAAA,WACA,QAAAxhB,EAAA,EAAAgX,EAAApU,KAAA1C,OAAqCF,EAAAgX,EAAQhX,IAC7C,uBAAA4C,KAAA5C,GACA,OAAA4C,KAAA5C,IAIAspC,EAAA,WAGA,IAFA,IAAAtpC,EAAA4C,KAAA1C,SAEAF,GACA,uBAAA4C,KAAA5C,GACA,OAAA4C,KAAA5C,IAIAupC,EAAAlpC,OAAAmB,UAAAC,SACA0S,EAAA/R,OACAlB,EAAAD,MAAAC,SAAA,SAAAsoC,GACA,OAAAA,aAAAvoC,OAAA,kBAAAsoC,EAAA7nC,KAAA8nC,IAYAz5B,EAAA,SAAAA,EAAA7I,EAAAqP,GACA,IAIAmF,EAJA+tB,EAAAl9B,EACAoK,EAAA1V,MAAAO,UAAA4U,MAAA1U,KAAAzB,UAAA,GACAypC,EAAA35B,EAAA25B,UAAAxiC,GACAuW,EAAA,EAEAksB,EAAA,GACAC,EAAA,GACA9tB,EAAA,GACA+tB,EAAAV,EACArtB,EAAA0F,eACA1F,EAAAwtB,cACAH,EAAAjiC,EACAqF,EAAA,EAEA,QAAAvM,EAAA,EAAAgX,EAAA0yB,EAAAxpC,OAA0CF,EAAAgX,EAAQhX,IAClD,WAAA0pC,EAAA1pC,KACA2pC,EAAAvjC,KAAAsjC,EAAA1pC,GAAA8pC,QAEAJ,EAAA1pC,GAAA8pC,OAAA,IACAF,EAAAF,EAAA1pC,GAAA8pC,QAAAJ,EAAA1pC,KAOA,IAFA2pC,EAAAI,KAAAV,GAEAM,EAAAlsB,GAAA,GAIA,GAHA/B,EAAAkuB,EAAAD,EAAAlsB,MACA3B,EAAA1V,KAAAsV,EAAA9L,MAAA2G,EAAAI,IAEApK,EAEA,OADAA,EAAAk9B,EACA3tB,EAIA,IAAA9b,EAAA,EAAeA,EAAAgX,EAAQhX,IAGvB,cAFA0b,EAAAguB,EAAA1pC,IAGA,GAAA0b,EAAAouB,QAAAH,EAAAlsB,GAAA,CAGA,GAFA3B,EAAA1V,KAAAsV,EAAA9L,MAAA2G,EAAAI,IAEApK,EACA,MAGA,GAKA,IAHAmP,EAAAkuB,EAAAD,IADAlsB,MAEA3B,EAAA1V,KAAAsV,EAAA9L,MAAA2G,EAAAI,IAEApK,EACA,YAEWmP,QAEXkuB,EAAAluB,EAAAouB,QAAApuB,OAKA,GAFAI,EAAA1V,KAAAsV,EAAA9L,MAAA2G,EAAAI,IAEApK,EACA,MAOA,OAFAA,EAAAk9B,EACAN,EAAAU,EACA/tB,GAIA/L,EAAAi6B,QAAAvI,EASA1xB,EAAA25B,UAAA,SAAAxiC,GACA,IAEA6P,EACAwoB,EACA5Q,EACA3uB,EACAgX,EACAtF,EACAC,EACAs4B,EATAvJ,EAAAx/B,EAAAgG,OAAAjB,MAAA4O,GACAvM,EAAAm5B,EASAyI,EAAA,CAAA5hC,GACAwT,EAAA,GAEA,IAAA9b,EAAA,EAAAgX,EAAA0pB,EAAAxgC,OAAkCF,EAAAgX,EAAQhX,IAAA,CAG1C,IAFAiqC,EAAA,GAEAv4B,EAAA,EAAAC,EAAAu4B,EAAAhqC,OAAiCwR,EAAAC,EAAQD,IAKzC,IAHA6tB,EAAA,EADAj3B,EAAA4hC,EAAAx4B,GAAAa,GACAmuB,EAAA1gC,IAAAsI,EA/IA,MAgJAqmB,EAAA,EAEAA,MACA5X,EAAAwoB,EAAA5Q,MAGAsb,EAAA7jC,KAAA2Q,GACA+E,IAAAtb,OAAAuW,EAAAT,GAAA,KAKA4zB,EAAAD,EAGA,OAAAnuB,GAYA/L,EAAA8E,UAAA,SAAAs1B,GACAA,GAEAA,EAAA,KADAA,EAAAh2B,EAAAg2B,GAAAxyB,QAAA,2BACA,IACA9C,EAAA,IAAAu1B,OAAAD,IAEAt1B,EAAA,UA8BA9E,EAAAqS,GAAA,SAAAlb,EAAAoP,GACA,sBAAAA,EACA,oBAKA,IAFA,IAAAoqB,EAAAx/B,EAAAgG,GAAAhG,EAAAgG,EAAA,IAAAA,EAAA,CAAAA,GAAAiN,EAAAjN,GAAAjB,MAAAmjC,GAEAppC,EAAA,EAAAgX,EAAA0pB,EAAAxgC,OAAsCF,EAAAgX,EAAQhX,KAC9C,SAAAkH,GAKA,IAJA,IAEAmjC,EAFA3J,EAAAx/B,EAAAgG,KAAAiN,EAAAjN,GAAAjB,MAAA4O,GACAvM,EAAAm5B,EAGAzhC,EAAA,EAAAgX,EAAA0pB,EAAAxgC,OAA0CF,EAAAgX,EAAQhX,IAElDsI,GADAA,IAAAiK,GACAlI,eAAAq2B,EAAA1gC,KAAAsI,EAAAo4B,EAAA1gC,MAAAsI,EAAAo4B,EAAA1gC,IAAA,CACAuS,EAAA,KAMA,IAFAjK,EAAAgO,EAAAhO,EAAAgO,GAAA,GAEAtW,EAAA,EAAAgX,EAAA1O,EAAAgO,EAAApW,OAAoCF,EAAAgX,EAAQhX,IAC5C,GAAAsI,EAAAgO,EAAAtW,IAAAsW,EAAA,CACA+zB,GAAA,EACA,OAIAA,GAAA/hC,EAAAgO,EAAAlQ,KAAAkQ,GArBA,CAsBOoqB,EAAA1gC,IAGP,gBAAA8pC,IACAA,QACAxzB,EAAAwzB,aAqBA/5B,EAAAuG,EAAA,SAAAg0B,GACA,IAAArc,EAAA,GAAA7X,MAAA1U,KAAAzB,UAAA,GACA,kBACA8P,EAAAH,MAAA,MAAA06B,EAAA,MAAA9pC,OAAAytB,GAAAztB,OAAA,GAAA4V,MAAA1U,KAAAzB,UAAA,OAWA8P,EAAAxD,KAAA,WACAA,EAAA,GAgBAwD,EAAAsS,GAAA,SAAAkoB,GACA,IAAAC,EAAAtpC,EAAAioC,KAAAjlC,KAAA,KAAAilC,EAEA,OAAAoB,EACA,IAAAH,OAAA,gBAAAG,EAAA,iBAAA7nC,KAAA8nC,GAGAA,GAaAz6B,EAAA06B,IAAA,WACA,OAAAvpC,EAAAioC,OAAAljC,MAAA4O,IAqBA9E,EAAAyzB,IAAAzzB,EAAA2zB,OAAA,SAAAx8B,EAAAoP,GACA,GAAApP,EAAA,CAOA,IAAAw5B,EAAAx/B,EAAAgG,GAAAhG,EAAAgG,EAAA,IAAAA,EAAA,CAAAA,GAAAiN,EAAAjN,GAAAjB,MAAAmjC,GAEA,GAAA1I,EAAAxgC,OAAA,EACA,QAAAF,EAAA,EAAAgX,EAAA0pB,EAAAxgC,OAAwCF,EAAAgX,EAAQhX,IAChD+P,EAAAyzB,IAAA9C,EAAA1gC,GAAAsW,OAFA,CAQAoqB,EAAAx/B,EAAAgG,KAAAiN,EAAAjN,GAAAjB,MAAA4O,GACA,IAAAvM,EACAxH,EACAmW,EAGAvF,EACAC,EACA64B,EAAA,CAAA/I,GACAiJ,EAAA,GAEA,IAAA1qC,EAAA,EAAAgX,EAAA0pB,EAAAxgC,OAAkCF,EAAAgX,EAAQhX,IAC1C,IAAA0R,EAAA,EAAiBA,EAAA84B,EAAAtqC,OAAgBwR,GAAAuF,EAAA/W,OAAA,GAIjC,GAHA+W,EAAA,CAAAvF,EAAA,GACApJ,EAAAkiC,EAAA94B,GAAAa,EAhXA,KAkXAmuB,EAAA1gC,GACAsI,EAAAo4B,EAAA1gC,MACAiX,EAAA7Q,KAAAkC,EAAAo4B,EAAA1gC,KACA0qC,EAAA9W,QAAA,CACArhB,EAAAjK,EACApB,KAAAw5B,EAAA1gC,WAIA,IAAAc,KAAAwH,EACAA,EAAA4L,GAAApT,KACAmW,EAAA7Q,KAAAkC,EAAAxH,IACA4pC,EAAA9W,QAAA,CACArhB,EAAAjK,EACApB,KAAApG,KAMA0pC,EAAAvzB,OAAArH,MAAA46B,EAAAvzB,GAIA,IAAAjX,EAAA,EAAAgX,EAAAwzB,EAAAtqC,OAAgCF,EAAAgX,EAAQhX,IAGxC,IAFAsI,EAAAkiC,EAAAxqC,GAEAsI,EAAAiK,GAAA,CACA,GAAA+D,EAAA,CACA,GAAAhO,EAAAgO,EAAA,CACA,IAAA5E,EAAA,EAAAC,EAAArJ,EAAAgO,EAAApW,OAAwCwR,EAAAC,EAAQD,IAChD,GAAApJ,EAAAgO,EAAA5E,IAAA4E,EAAA,CACAhO,EAAAgO,EAAAW,OAAAvF,EAAA,GACA,OAIApJ,EAAAgO,EAAApW,eAAAoI,EAAAgO,EAGA,IAAAxV,KAAAwH,EAAAiK,EACA,GAAAjK,EAAAiK,EAAA2B,GAAApT,IAAAwH,EAAAiK,EAAAzR,GAAAwV,EAAA,CACA,IAAAq0B,EAAAriC,EAAAiK,EAAAzR,GAAAwV,EAEA,IAAA5E,EAAA,EAAAC,EAAAg5B,EAAAzqC,OAA4CwR,EAAAC,EAAQD,IACpD,GAAAi5B,EAAAj5B,IAAA4E,EAAA,CACAq0B,EAAA1zB,OAAAvF,EAAA,GACA,OAIAi5B,EAAAzqC,eAAAoI,EAAAiK,EAAAzR,GAAAwV,QAMA,IAAAxV,YAFAwH,EAAAgO,EAEAhO,EAAAiK,EACAjK,EAAAiK,EAAA2B,GAAApT,IAAAwH,EAAAiK,EAAAzR,GAAAwV,UACAhO,EAAAiK,EAAAzR,GAAAwV,EAKAhO,IAAAiK,EAKAq4B,EAAA,IAAA5qC,EAAA,EAAAgX,EAAA0zB,EAAAxqC,OAA0CF,EAAAgX,EAAQhX,IAAA,CAGlD,IAAAc,KAFAwH,EAAAoiC,EAAA1qC,IAEAuS,EAAAjK,EAAApB,MAAAoP,EAEA,SAAAs0B,EAGA,IAAA9pC,KAAAwH,EAAAiK,EAAAjK,EAAApB,MAAAqL,EAEA,SAAAq4B,SAIAtiC,EAAAiK,EAAAjK,EAAApB,aAnHA6I,EAAAi6B,QAAAvI,EAAA,CACAlvB,EAAA,KAsIAxC,EAAA0W,KAAA,SAAAvf,EAAAoP,GAMA,OAAAvG,EAAAqS,GAAAlb,EALA,SAAAw1B,IAEA,OADA3sB,EAAAyzB,IAAAt8B,EAAAw1B,GACApmB,EAAA1G,MAAAhN,KAAA3C,cAaA8P,EAAAgE,QA7eA,QA+eAhE,EAAAtO,SAAA,WACA,mCAGAmS,EAAA7D,MAC8BD,EAAAD,QAAAC,EAAAD,QAAAE,OAE3BpG,KAFoI5H,EAAA,WACvI,OAAAgO,GACGH,MAAAC,EAFkI,OAElIC,EAAAD,QAAA9N,GAvfH,CAwfC,oBAAAQ,cAAAK","file":"static/js/12.c89632f4.chunk.js","sourcesContent":["import defineProperty from \"./defineProperty\";\nexport default function _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}","import arrayWithoutHoles from \"./arrayWithoutHoles\";\nimport iterableToArray from \"./iterableToArray\";\nimport nonIterableSpread from \"./nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || nonIterableSpread();\n}","export default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}","export default function _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}","/**\n * vivus - JavaScript library to make drawing animation on SVG\n * @version v0.4.4\n * @link https://github.com/maxwellito/vivus\n * @license MIT\n */\n'use strict';\n\n(function () {\n  'use strict';\n  /**\n   * Pathformer\n   * Beta version\n   *\n   * Take any SVG version 1.1 and transform\n   * child elements to 'path' elements\n   *\n   * This code is purely forked from\n   * https://github.com/Waest/SVGPathConverter\n   */\n\n  /**\n   * Class constructor\n   *\n   * @param {DOM|String} element Dom element of the SVG or id of it\n   */\n\n  function Pathformer(element) {\n    // Test params\n    if (typeof element === 'undefined') {\n      throw new Error('Pathformer [constructor]: \"element\" parameter is required');\n    } // Set the element\n\n\n    if (element.constructor === String) {\n      element = document.getElementById(element);\n\n      if (!element) {\n        throw new Error('Pathformer [constructor]: \"element\" parameter is not related to an existing ID');\n      }\n    }\n\n    if (element instanceof window.SVGElement || element instanceof window.SVGGElement || /^svg$/i.test(element.nodeName)) {\n      this.el = element;\n    } else {\n      throw new Error('Pathformer [constructor]: \"element\" parameter must be a string or a SVGelement');\n    } // Start\n\n\n    this.scan(element);\n  }\n  /**\n   * List of tags which can be transformed\n   * to path elements\n   *\n   * @type {Array}\n   */\n\n\n  Pathformer.prototype.TYPES = ['line', 'ellipse', 'circle', 'polygon', 'polyline', 'rect'];\n  /**\n   * List of attribute names which contain\n   * data. This array list them to check if\n   * they contain bad values, like percentage.\n   *\n   * @type {Array}\n   */\n\n  Pathformer.prototype.ATTR_WATCH = ['cx', 'cy', 'points', 'r', 'rx', 'ry', 'x', 'x1', 'x2', 'y', 'y1', 'y2'];\n  /**\n   * Finds the elements compatible for transform\n   * and apply the liked method\n   *\n   * @param  {object} options Object from the constructor\n   */\n\n  Pathformer.prototype.scan = function (svg) {\n    var fn,\n        element,\n        pathData,\n        pathDom,\n        elements = svg.querySelectorAll(this.TYPES.join(','));\n\n    for (var i = 0; i < elements.length; i++) {\n      element = elements[i];\n      fn = this[element.tagName.toLowerCase() + 'ToPath'];\n      pathData = fn(this.parseAttr(element.attributes));\n      pathDom = this.pathMaker(element, pathData);\n      element.parentNode.replaceChild(pathDom, element);\n    }\n  };\n  /**\n   * Read `line` element to extract and transform\n   * data, to make it ready for a `path` object.\n   *\n   * @param  {DOMelement} element Line element to transform\n   * @return {object}             Data for a `path` element\n   */\n\n\n  Pathformer.prototype.lineToPath = function (element) {\n    var newElement = {},\n        x1 = element.x1 || 0,\n        y1 = element.y1 || 0,\n        x2 = element.x2 || 0,\n        y2 = element.y2 || 0;\n    newElement.d = 'M' + x1 + ',' + y1 + 'L' + x2 + ',' + y2;\n    return newElement;\n  };\n  /**\n   * Read `rect` element to extract and transform\n   * data, to make it ready for a `path` object.\n   * The radius-border is not taken in charge yet.\n   * (your help is more than welcomed)\n   *\n   * @param  {DOMelement} element Rect element to transform\n   * @return {object}             Data for a `path` element\n   */\n\n\n  Pathformer.prototype.rectToPath = function (element) {\n    var newElement = {},\n        x = parseFloat(element.x) || 0,\n        y = parseFloat(element.y) || 0,\n        width = parseFloat(element.width) || 0,\n        height = parseFloat(element.height) || 0;\n\n    if (element.rx || element.ry) {\n      var rx = parseInt(element.rx, 10) || -1,\n          ry = parseInt(element.ry, 10) || -1;\n      rx = Math.min(Math.max(rx < 0 ? ry : rx, 0), width / 2);\n      ry = Math.min(Math.max(ry < 0 ? rx : ry, 0), height / 2);\n      newElement.d = 'M ' + (x + rx) + ',' + y + ' ' + 'L ' + (x + width - rx) + ',' + y + ' ' + 'A ' + rx + ',' + ry + ',0,0,1,' + (x + width) + ',' + (y + ry) + ' ' + 'L ' + (x + width) + ',' + (y + height - ry) + ' ' + 'A ' + rx + ',' + ry + ',0,0,1,' + (x + width - rx) + ',' + (y + height) + ' ' + 'L ' + (x + rx) + ',' + (y + height) + ' ' + 'A ' + rx + ',' + ry + ',0,0,1,' + x + ',' + (y + height - ry) + ' ' + 'L ' + x + ',' + (y + ry) + ' ' + 'A ' + rx + ',' + ry + ',0,0,1,' + (x + rx) + ',' + y;\n    } else {\n      newElement.d = 'M' + x + ' ' + y + ' ' + 'L' + (x + width) + ' ' + y + ' ' + 'L' + (x + width) + ' ' + (y + height) + ' ' + 'L' + x + ' ' + (y + height) + ' Z';\n    }\n\n    return newElement;\n  };\n  /**\n   * Read `polyline` element to extract and transform\n   * data, to make it ready for a `path` object.\n   *\n   * @param  {DOMelement} element Polyline element to transform\n   * @return {object}             Data for a `path` element\n   */\n\n\n  Pathformer.prototype.polylineToPath = function (element) {\n    var newElement = {},\n        points = element.points.trim().split(' '),\n        i,\n        path; // Reformatting if points are defined without commas\n\n    if (element.points.indexOf(',') === -1) {\n      var formattedPoints = [];\n\n      for (i = 0; i < points.length; i += 2) {\n        formattedPoints.push(points[i] + ',' + points[i + 1]);\n      }\n\n      points = formattedPoints;\n    } // Generate the path.d value\n\n\n    path = 'M' + points[0];\n\n    for (i = 1; i < points.length; i++) {\n      if (points[i].indexOf(',') !== -1) {\n        path += 'L' + points[i];\n      }\n    }\n\n    newElement.d = path;\n    return newElement;\n  };\n  /**\n   * Read `polygon` element to extract and transform\n   * data, to make it ready for a `path` object.\n   * This method rely on polylineToPath, because the\n   * logic is similar. The path created is just closed,\n   * so it needs an 'Z' at the end.\n   *\n   * @param  {DOMelement} element Polygon element to transform\n   * @return {object}             Data for a `path` element\n   */\n\n\n  Pathformer.prototype.polygonToPath = function (element) {\n    var newElement = Pathformer.prototype.polylineToPath(element);\n    newElement.d += 'Z';\n    return newElement;\n  };\n  /**\n   * Read `ellipse` element to extract and transform\n   * data, to make it ready for a `path` object.\n   *\n   * @param  {DOMelement} element ellipse element to transform\n   * @return {object}             Data for a `path` element\n   */\n\n\n  Pathformer.prototype.ellipseToPath = function (element) {\n    var newElement = {},\n        rx = parseFloat(element.rx) || 0,\n        ry = parseFloat(element.ry) || 0,\n        cx = parseFloat(element.cx) || 0,\n        cy = parseFloat(element.cy) || 0,\n        startX = cx - rx,\n        startY = cy,\n        endX = parseFloat(cx) + parseFloat(rx),\n        endY = cy;\n    newElement.d = 'M' + startX + ',' + startY + 'A' + rx + ',' + ry + ' 0,1,1 ' + endX + ',' + endY + 'A' + rx + ',' + ry + ' 0,1,1 ' + startX + ',' + endY;\n    return newElement;\n  };\n  /**\n   * Read `circle` element to extract and transform\n   * data, to make it ready for a `path` object.\n   *\n   * @param  {DOMelement} element Circle element to transform\n   * @return {object}             Data for a `path` element\n   */\n\n\n  Pathformer.prototype.circleToPath = function (element) {\n    var newElement = {},\n        r = parseFloat(element.r) || 0,\n        cx = parseFloat(element.cx) || 0,\n        cy = parseFloat(element.cy) || 0,\n        startX = cx - r,\n        startY = cy,\n        endX = parseFloat(cx) + parseFloat(r),\n        endY = cy;\n    newElement.d = 'M' + startX + ',' + startY + 'A' + r + ',' + r + ' 0,1,1 ' + endX + ',' + endY + 'A' + r + ',' + r + ' 0,1,1 ' + startX + ',' + endY;\n    return newElement;\n  };\n  /**\n   * Create `path` elements form original element\n   * and prepared objects\n   *\n   * @param  {DOMelement} element  Original element to transform\n   * @param  {object} pathData     Path data (from `toPath` methods)\n   * @return {DOMelement}          Path element\n   */\n\n\n  Pathformer.prototype.pathMaker = function (element, pathData) {\n    var i,\n        attr,\n        pathTag = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n\n    for (i = 0; i < element.attributes.length; i++) {\n      attr = element.attributes[i];\n\n      if (this.ATTR_WATCH.indexOf(attr.name) === -1) {\n        pathTag.setAttribute(attr.name, attr.value);\n      }\n    }\n\n    for (i in pathData) {\n      pathTag.setAttribute(i, pathData[i]);\n    }\n\n    return pathTag;\n  };\n  /**\n   * Parse attributes of a DOM element to\n   * get an object of attribute => value\n   *\n   * @param  {NamedNodeMap} attributes Attributes object from DOM element to parse\n   * @return {object}                  Object of attributes\n   */\n\n\n  Pathformer.prototype.parseAttr = function (element) {\n    var attr,\n        output = {};\n\n    for (var i = 0; i < element.length; i++) {\n      attr = element[i]; // Check if no data attribute contains '%', or the transformation is impossible\n\n      if (this.ATTR_WATCH.indexOf(attr.name) !== -1 && attr.value.indexOf('%') !== -1) {\n        throw new Error('Pathformer [parseAttr]: a SVG shape got values in percentage. This cannot be transformed into \\'path\\' tags. Please use \\'viewBox\\'.');\n      }\n\n      output[attr.name] = attr.value;\n    }\n\n    return output;\n  };\n\n  'use strict';\n\n  var setupEnv, requestAnimFrame, cancelAnimFrame, parsePositiveInt;\n  /**\n   * Vivus\n   * Beta version\n   *\n   * Take any SVG and make the animation\n   * to give give the impression of live drawing\n   *\n   * This in more than just inspired from codrops\n   * At that point, it's a pure fork.\n   */\n\n  /**\n   * Class constructor\n   * option structure\n   *   type: 'delayed'|'sync'|'oneByOne'|'script' (to know if the items must be drawn synchronously or not, default: delayed)\n   *   duration: <int> (in frames)\n   *   start: 'inViewport'|'manual'|'autostart' (start automatically the animation, default: inViewport)\n   *   delay: <int> (delay between the drawing of first and last path)\n   *   dashGap <integer> whitespace extra margin between dashes\n   *   pathTimingFunction <function> timing animation function for each path element of the SVG\n   *   animTimingFunction <function> timing animation function for the complete SVG\n   *   forceRender <boolean> force the browser to re-render all updated path items\n   *   selfDestroy <boolean> removes all extra styling on the SVG, and leaves it as original\n   *\n   * The attribute 'type' is by default on 'delayed'.\n   *  - 'delayed'\n   *    all paths are draw at the same time but with a\n   *    little delay between them before start\n   *  - 'sync'\n   *    all path are start and finish at the same time\n   *  - 'oneByOne'\n   *    only one path is draw at the time\n   *    the end of the first one will trigger the draw\n   *    of the next one\n   *\n   * All these values can be overwritten individually\n   * for each path item in the SVG\n   * The value of frames will always take the advantage of\n   * the duration value.\n   * If you fail somewhere, an error will be thrown.\n   * Good luck.\n   *\n   * @constructor\n   * @this {Vivus}\n   * @param {DOM|String}   element  Dom element of the SVG or id of it\n   * @param {Object}       options  Options about the animation\n   * @param {Function}     callback Callback for the end of the animation\n   */\n\n  function Vivus(element, options, callback) {\n    setupEnv(); // Setup\n\n    this.isReady = false;\n    this.setElement(element, options);\n    this.setOptions(options);\n    this.setCallback(callback);\n\n    if (this.isReady) {\n      this.init();\n    }\n  }\n  /**\n   * Timing functions\n   **************************************\n   *\n   * Default functions to help developers.\n   * It always take a number as parameter (between 0 to 1) then\n   * return a number (between 0 and 1)\n   */\n\n\n  Vivus.LINEAR = function (x) {\n    return x;\n  };\n\n  Vivus.EASE = function (x) {\n    return -Math.cos(x * Math.PI) / 2 + 0.5;\n  };\n\n  Vivus.EASE_OUT = function (x) {\n    return 1 - Math.pow(1 - x, 3);\n  };\n\n  Vivus.EASE_IN = function (x) {\n    return Math.pow(x, 3);\n  };\n\n  Vivus.EASE_OUT_BOUNCE = function (x) {\n    var base = -Math.cos(x * (0.5 * Math.PI)) + 1,\n        rate = Math.pow(base, 1.5),\n        rateR = Math.pow(1 - x, 2),\n        progress = -Math.abs(Math.cos(rate * (2.5 * Math.PI))) + 1;\n    return 1 - rateR + progress * rateR;\n  };\n  /**\n   * Setters\n   **************************************\n   */\n\n  /**\n   * Check and set the element in the instance\n   * The method will not return anything, but will throw an\n   * error if the parameter is invalid\n   *\n   * @param {DOM|String}   element  SVG Dom element or id of it\n   */\n\n\n  Vivus.prototype.setElement = function (element, options) {\n    var onLoad, self; // Basic check\n\n    if (typeof element === 'undefined') {\n      throw new Error('Vivus [constructor]: \"element\" parameter is required');\n    } // Set the element\n\n\n    if (element.constructor === String) {\n      element = document.getElementById(element);\n\n      if (!element) {\n        throw new Error('Vivus [constructor]: \"element\" parameter is not related to an existing ID');\n      }\n    }\n\n    this.parentEl = element; // Load the SVG with XMLHttpRequest and extract the SVG\n\n    if (options && options.file) {\n      var self = this;\n\n      onLoad = function onLoad(e) {\n        var domSandbox = document.createElement('div');\n        domSandbox.innerHTML = this.responseText;\n        var svgTag = domSandbox.querySelector('svg');\n\n        if (!svgTag) {\n          throw new Error('Vivus [load]: Cannot find the SVG in the loaded file : ' + options.file);\n        }\n\n        self.el = svgTag;\n        self.el.setAttribute('width', '100%');\n        self.el.setAttribute('height', '100%');\n        self.parentEl.appendChild(self.el);\n        self.isReady = true;\n        self.init();\n        self = null;\n      };\n\n      var oReq = new window.XMLHttpRequest();\n      oReq.addEventListener('load', onLoad);\n      oReq.open('GET', options.file);\n      oReq.send();\n      return;\n    }\n\n    switch (element.constructor) {\n      case window.SVGSVGElement:\n      case window.SVGElement:\n      case window.SVGGElement:\n        this.el = element;\n        this.isReady = true;\n        break;\n\n      case window.HTMLObjectElement:\n        self = this;\n\n        onLoad = function onLoad(e) {\n          if (self.isReady) {\n            return;\n          }\n\n          self.el = element.contentDocument && element.contentDocument.querySelector('svg');\n\n          if (!self.el && e) {\n            throw new Error('Vivus [constructor]: object loaded does not contain any SVG');\n          } else if (self.el) {\n            if (element.getAttribute('built-by-vivus')) {\n              self.parentEl.insertBefore(self.el, element);\n              self.parentEl.removeChild(element);\n              self.el.setAttribute('width', '100%');\n              self.el.setAttribute('height', '100%');\n            }\n\n            self.isReady = true;\n            self.init();\n            self = null;\n          }\n        };\n\n        if (!onLoad()) {\n          element.addEventListener('load', onLoad);\n        }\n\n        break;\n\n      default:\n        throw new Error('Vivus [constructor]: \"element\" parameter is not valid (or miss the \"file\" attribute)');\n    }\n  };\n  /**\n   * Set up user option to the instance\n   * The method will not return anything, but will throw an\n   * error if the parameter is invalid\n   *\n   * @param  {object} options Object from the constructor\n   */\n\n\n  Vivus.prototype.setOptions = function (options) {\n    var allowedTypes = ['delayed', 'sync', 'async', 'nsync', 'oneByOne', 'scenario', 'scenario-sync'];\n    var allowedStarts = ['inViewport', 'manual', 'autostart']; // Basic check\n\n    if (options !== undefined && options.constructor !== Object) {\n      throw new Error('Vivus [constructor]: \"options\" parameter must be an object');\n    } else {\n      options = options || {};\n    } // Set the animation type\n\n\n    if (options.type && allowedTypes.indexOf(options.type) === -1) {\n      throw new Error('Vivus [constructor]: ' + options.type + ' is not an existing animation `type`');\n    } else {\n      this.type = options.type || allowedTypes[0];\n    } // Set the start type\n\n\n    if (options.start && allowedStarts.indexOf(options.start) === -1) {\n      throw new Error('Vivus [constructor]: ' + options.start + ' is not an existing `start` option');\n    } else {\n      this.start = options.start || allowedStarts[0];\n    }\n\n    this.isIE = window.navigator.userAgent.indexOf('MSIE') !== -1 || window.navigator.userAgent.indexOf('Trident/') !== -1 || window.navigator.userAgent.indexOf('Edge/') !== -1;\n    this.duration = parsePositiveInt(options.duration, 120);\n    this.delay = parsePositiveInt(options.delay, null);\n    this.dashGap = parsePositiveInt(options.dashGap, 1);\n    this.forceRender = options.hasOwnProperty('forceRender') ? !!options.forceRender : this.isIE;\n    this.reverseStack = !!options.reverseStack;\n    this.selfDestroy = !!options.selfDestroy;\n    this.onReady = options.onReady;\n    this.map = [];\n    this.frameLength = this.currentFrame = this.delayUnit = this.speed = this.handle = null;\n    this.ignoreInvisible = options.hasOwnProperty('ignoreInvisible') ? !!options.ignoreInvisible : false;\n    this.animTimingFunction = options.animTimingFunction || Vivus.LINEAR;\n    this.pathTimingFunction = options.pathTimingFunction || Vivus.LINEAR;\n\n    if (this.delay >= this.duration) {\n      throw new Error('Vivus [constructor]: delay must be shorter than duration');\n    }\n  };\n  /**\n   * Set up callback to the instance\n   * The method will not return enything, but will throw an\n   * error if the parameter is invalid\n   *\n   * @param  {Function} callback Callback for the animation end\n   */\n\n\n  Vivus.prototype.setCallback = function (callback) {\n    // Basic check\n    if (!!callback && callback.constructor !== Function) {\n      throw new Error('Vivus [constructor]: \"callback\" parameter must be a function');\n    }\n\n    this.callback = callback || function () {};\n  };\n  /**\n   * Core\n   **************************************\n   */\n\n  /**\n   * Map the svg, path by path.\n   * The method return nothing, it just fill the\n   * `map` array. Each item in this array represent\n   * a path element from the SVG, with informations for\n   * the animation.\n   *\n   * ```\n   * [\n   *   {\n   *     el: <DOMobj> the path element\n   *     length: <number> length of the path line\n   *     startAt: <number> time start of the path animation (in frames)\n   *     duration: <number> path animation duration (in frames)\n   *   },\n   *   ...\n   * ]\n   * ```\n   *\n   */\n\n\n  Vivus.prototype.mapping = function () {\n    var i, paths, path, pAttrs, pathObj, totalLength, lengthMeter, timePoint;\n    timePoint = totalLength = lengthMeter = 0;\n    paths = this.el.querySelectorAll('path');\n\n    for (i = 0; i < paths.length; i++) {\n      path = paths[i];\n\n      if (this.isInvisible(path)) {\n        continue;\n      }\n\n      pathObj = {\n        el: path,\n        length: Math.ceil(path.getTotalLength())\n      }; // Test if the path length is correct\n\n      if (isNaN(pathObj.length)) {\n        if (window.console && console.warn) {\n          console.warn('Vivus [mapping]: cannot retrieve a path element length', path);\n        }\n\n        continue;\n      }\n\n      this.map.push(pathObj);\n      path.style.strokeDasharray = pathObj.length + ' ' + (pathObj.length + this.dashGap * 2);\n      path.style.strokeDashoffset = pathObj.length + this.dashGap;\n      pathObj.length += this.dashGap;\n      totalLength += pathObj.length;\n      this.renderPath(i);\n    }\n\n    totalLength = totalLength === 0 ? 1 : totalLength;\n    this.delay = this.delay === null ? this.duration / 3 : this.delay;\n    this.delayUnit = this.delay / (paths.length > 1 ? paths.length - 1 : 1); // Reverse stack if asked\n\n    if (this.reverseStack) {\n      this.map.reverse();\n    }\n\n    for (i = 0; i < this.map.length; i++) {\n      pathObj = this.map[i];\n\n      switch (this.type) {\n        case 'delayed':\n          pathObj.startAt = this.delayUnit * i;\n          pathObj.duration = this.duration - this.delay;\n          break;\n\n        case 'oneByOne':\n          pathObj.startAt = lengthMeter / totalLength * this.duration;\n          pathObj.duration = pathObj.length / totalLength * this.duration;\n          break;\n\n        case 'sync':\n        case 'async':\n        case 'nsync':\n          pathObj.startAt = 0;\n          pathObj.duration = this.duration;\n          break;\n\n        case 'scenario-sync':\n          path = pathObj.el;\n          pAttrs = this.parseAttr(path);\n          pathObj.startAt = timePoint + (parsePositiveInt(pAttrs['data-delay'], this.delayUnit) || 0);\n          pathObj.duration = parsePositiveInt(pAttrs['data-duration'], this.duration);\n          timePoint = pAttrs['data-async'] !== undefined ? pathObj.startAt : pathObj.startAt + pathObj.duration;\n          this.frameLength = Math.max(this.frameLength, pathObj.startAt + pathObj.duration);\n          break;\n\n        case 'scenario':\n          path = pathObj.el;\n          pAttrs = this.parseAttr(path);\n          pathObj.startAt = parsePositiveInt(pAttrs['data-start'], this.delayUnit) || 0;\n          pathObj.duration = parsePositiveInt(pAttrs['data-duration'], this.duration);\n          this.frameLength = Math.max(this.frameLength, pathObj.startAt + pathObj.duration);\n          break;\n      }\n\n      lengthMeter += pathObj.length;\n      this.frameLength = this.frameLength || this.duration;\n    }\n  };\n  /**\n   * Interval method to draw the SVG from current\n   * position of the animation. It update the value of\n   * `currentFrame` and re-trace the SVG.\n   *\n   * It use this.handle to store the requestAnimationFrame\n   * and clear it one the animation is stopped. So this\n   * attribute can be used to know if the animation is\n   * playing.\n   *\n   * Once the animation at the end, this method will\n   * trigger the Vivus callback.\n   *\n   */\n\n\n  Vivus.prototype.drawer = function () {\n    var self = this;\n    this.currentFrame += this.speed;\n\n    if (this.currentFrame <= 0) {\n      this.stop();\n      this.reset();\n    } else if (this.currentFrame >= this.frameLength) {\n      this.stop();\n      this.currentFrame = this.frameLength;\n      this.trace();\n\n      if (this.selfDestroy) {\n        this.destroy();\n      }\n    } else {\n      this.trace();\n      this.handle = requestAnimFrame(function () {\n        self.drawer();\n      });\n      return;\n    }\n\n    this.callback(this);\n\n    if (this.instanceCallback) {\n      this.instanceCallback(this);\n      this.instanceCallback = null;\n    }\n  };\n  /**\n   * Draw the SVG at the current instant from the\n   * `currentFrame` value. Here is where most of the magic is.\n   * The trick is to use the `strokeDashoffset` style property.\n   *\n   * For optimisation reasons, a new property called `progress`\n   * is added in each item of `map`. This one contain the current\n   * progress of the path element. Only if the new value is different\n   * the new value will be applied to the DOM element. This\n   * method save a lot of resources to re-render the SVG. And could\n   * be improved if the animation couldn't be played forward.\n   *\n   */\n\n\n  Vivus.prototype.trace = function () {\n    var i, progress, path, currentFrame;\n    currentFrame = this.animTimingFunction(this.currentFrame / this.frameLength) * this.frameLength;\n\n    for (i = 0; i < this.map.length; i++) {\n      path = this.map[i];\n      progress = (currentFrame - path.startAt) / path.duration;\n      progress = this.pathTimingFunction(Math.max(0, Math.min(1, progress)));\n\n      if (path.progress !== progress) {\n        path.progress = progress;\n        path.el.style.strokeDashoffset = Math.floor(path.length * (1 - progress));\n        this.renderPath(i);\n      }\n    }\n  };\n  /**\n   * Method forcing the browser to re-render a path element\n   * from it's index in the map. Depending on the `forceRender`\n   * value.\n   * The trick is to replace the path element by it's clone.\n   * This practice is not recommended because it's asking more\n   * ressources, too much DOM manupulation..\n   * but it's the only way to let the magic happen on IE.\n   * By default, this fallback is only applied on IE.\n   *\n   * @param  {Number} index Path index\n   */\n\n\n  Vivus.prototype.renderPath = function (index) {\n    if (this.forceRender && this.map && this.map[index]) {\n      var pathObj = this.map[index],\n          newPath = pathObj.el.cloneNode(true);\n      pathObj.el.parentNode.replaceChild(newPath, pathObj.el);\n      pathObj.el = newPath;\n    }\n  };\n  /**\n   * When the SVG object is loaded and ready,\n   * this method will continue the initialisation.\n   *\n   * This this mainly due to the case of passing an\n   * object tag in the constructor. It will wait\n   * the end of the loading to initialise.\n   *\n   */\n\n\n  Vivus.prototype.init = function () {\n    // Set object variables\n    this.frameLength = 0;\n    this.currentFrame = 0;\n    this.map = []; // Start\n\n    new Pathformer(this.el);\n    this.mapping();\n    this.starter();\n\n    if (this.onReady) {\n      this.onReady(this);\n    }\n  };\n  /**\n   * Trigger to start of the animation.\n   * Depending on the `start` value, a different script\n   * will be applied.\n   *\n   * If the `start` value is not valid, an error will be thrown.\n   * Even if technically, this is impossible.\n   *\n   */\n\n\n  Vivus.prototype.starter = function () {\n    switch (this.start) {\n      case 'manual':\n        return;\n\n      case 'autostart':\n        this.play();\n        break;\n\n      case 'inViewport':\n        var self = this,\n            listener = function listener() {\n          if (self.isInViewport(self.parentEl, 1)) {\n            self.play();\n            window.removeEventListener('scroll', listener);\n          }\n        };\n\n        window.addEventListener('scroll', listener);\n        listener();\n        break;\n    }\n  };\n  /**\n   * Controls\n   **************************************\n   */\n\n  /**\n   * Get the current status of the animation between\n   * three different states: 'start', 'progress', 'end'.\n   * @return {string} Instance status\n   */\n\n\n  Vivus.prototype.getStatus = function () {\n    return this.currentFrame === 0 ? 'start' : this.currentFrame === this.frameLength ? 'end' : 'progress';\n  };\n  /**\n   * Reset the instance to the initial state : undraw\n   * Be careful, it just reset the animation, if you're\n   * playing the animation, this won't stop it. But just\n   * make it start from start.\n   *\n   */\n\n\n  Vivus.prototype.reset = function () {\n    return this.setFrameProgress(0);\n  };\n  /**\n   * Set the instance to the final state : drawn\n   * Be careful, it just set the animation, if you're\n   * playing the animation on rewind, this won't stop it.\n   * But just make it start from the end.\n   *\n   */\n\n\n  Vivus.prototype.finish = function () {\n    return this.setFrameProgress(1);\n  };\n  /**\n   * Set the level of progress of the drawing.\n   *\n   * @param {number} progress Level of progress to set\n   */\n\n\n  Vivus.prototype.setFrameProgress = function (progress) {\n    progress = Math.min(1, Math.max(0, progress));\n    this.currentFrame = Math.round(this.frameLength * progress);\n    this.trace();\n    return this;\n  };\n  /**\n   * Play the animation at the desired speed.\n   * Speed must be a valid number (no zero).\n   * By default, the speed value is 1.\n   * But a negative value is accepted to go forward.\n   *\n   * And works with float too.\n   * But don't forget we are in JavaScript, se be nice\n   * with him and give him a 1/2^x value.\n   *\n   * @param  {number} speed Animation speed [optional]\n   */\n\n\n  Vivus.prototype.play = function (speed, callback) {\n    this.instanceCallback = null;\n\n    if (speed && typeof speed === 'function') {\n      this.instanceCallback = speed; // first parameter is actually the callback function\n\n      speed = null;\n    } else if (speed && typeof speed !== 'number') {\n      throw new Error('Vivus [play]: invalid speed');\n    } // if the first parameter wasn't the callback, check if the seconds was\n\n\n    if (callback && typeof callback === 'function' && !this.instanceCallback) {\n      this.instanceCallback = callback;\n    }\n\n    this.speed = speed || 1;\n\n    if (!this.handle) {\n      this.drawer();\n    }\n\n    return this;\n  };\n  /**\n   * Stop the current animation, if on progress.\n   * Should not trigger any error.\n   *\n   */\n\n\n  Vivus.prototype.stop = function () {\n    if (this.handle) {\n      cancelAnimFrame(this.handle);\n      this.handle = null;\n    }\n\n    return this;\n  };\n  /**\n   * Destroy the instance.\n   * Remove all bad styling attributes on all\n   * path tags\n   *\n   */\n\n\n  Vivus.prototype.destroy = function () {\n    this.stop();\n    var i, path;\n\n    for (i = 0; i < this.map.length; i++) {\n      path = this.map[i];\n      path.el.style.strokeDashoffset = null;\n      path.el.style.strokeDasharray = null;\n      this.renderPath(i);\n    }\n  };\n  /**\n   * Utils methods\n   * include methods from Codrops\n   **************************************\n   */\n\n  /**\n   * Method to best guess if a path should added into\n   * the animation or not.\n   *\n   * 1. Use the `data-vivus-ignore` attribute if set\n   * 2. Check if the instance must ignore invisible paths\n   * 3. Check if the path is visible\n   *\n   * For now the visibility checking is unstable.\n   * It will be used for a beta phase.\n   *\n   * Other improvments are planned. Like detecting\n   * is the path got a stroke or a valid opacity.\n   */\n\n\n  Vivus.prototype.isInvisible = function (el) {\n    var rect,\n        ignoreAttr = el.getAttribute('data-ignore');\n\n    if (ignoreAttr !== null) {\n      return ignoreAttr !== 'false';\n    }\n\n    if (this.ignoreInvisible) {\n      rect = el.getBoundingClientRect();\n      return !rect.width && !rect.height;\n    } else {\n      return false;\n    }\n  };\n  /**\n   * Parse attributes of a DOM element to\n   * get an object of {attributeName => attributeValue}\n   *\n   * @param  {object} element DOM element to parse\n   * @return {object}         Object of attributes\n   */\n\n\n  Vivus.prototype.parseAttr = function (element) {\n    var attr,\n        output = {};\n\n    if (element && element.attributes) {\n      for (var i = 0; i < element.attributes.length; i++) {\n        attr = element.attributes[i];\n        output[attr.name] = attr.value;\n      }\n    }\n\n    return output;\n  };\n  /**\n   * Reply if an element is in the page viewport\n   *\n   * @param  {object} el Element to observe\n   * @param  {number} h  Percentage of height\n   * @return {boolean}\n   */\n\n\n  Vivus.prototype.isInViewport = function (el, h) {\n    var scrolled = this.scrollY(),\n        viewed = scrolled + this.getViewportH(),\n        elBCR = el.getBoundingClientRect(),\n        elHeight = elBCR.height,\n        elTop = scrolled + elBCR.top,\n        elBottom = elTop + elHeight; // if 0, the element is considered in the viewport as soon as it enters.\n    // if 1, the element is considered in the viewport only when it's fully inside\n    // value in percentage (1 >= h >= 0)\n\n    h = h || 0;\n    return elTop + elHeight * h <= viewed && elBottom >= scrolled;\n  };\n  /**\n   * Get the viewport height in pixels\n   *\n   * @return {integer} Viewport height\n   */\n\n\n  Vivus.prototype.getViewportH = function () {\n    var client = this.docElem.clientHeight,\n        inner = window.innerHeight;\n\n    if (client < inner) {\n      return inner;\n    } else {\n      return client;\n    }\n  };\n  /**\n   * Get the page Y offset\n   *\n   * @return {integer} Page Y offset\n   */\n\n\n  Vivus.prototype.scrollY = function () {\n    return window.pageYOffset || this.docElem.scrollTop;\n  };\n\n  setupEnv = function setupEnv() {\n    if (Vivus.prototype.docElem) {\n      return;\n    }\n    /**\n     * Alias for document element\n     *\n     * @type {DOMelement}\n     */\n\n\n    Vivus.prototype.docElem = window.document.documentElement;\n    /**\n     * Alias for `requestAnimationFrame` or\n     * `setTimeout` function for deprecated browsers.\n     *\n     */\n\n    requestAnimFrame = function () {\n      return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function (\n      /* function */\n      callback) {\n        return window.setTimeout(callback, 1000 / 60);\n      };\n    }();\n    /**\n     * Alias for `cancelAnimationFrame` or\n     * `cancelTimeout` function for deprecated browsers.\n     *\n     */\n\n\n    cancelAnimFrame = function () {\n      return window.cancelAnimationFrame || window.webkitCancelAnimationFrame || window.mozCancelAnimationFrame || window.oCancelAnimationFrame || window.msCancelAnimationFrame || function (id) {\n        return window.clearTimeout(id);\n      };\n    }();\n  };\n  /**\n   * Parse string to integer.\n   * If the number is not positive or null\n   * the method will return the default value\n   * or 0 if undefined\n   *\n   * @param {string} value String to parse\n   * @param {*} defaultValue Value to return if the result parsed is invalid\n   * @return {number}\n   *\n   */\n\n\n  parsePositiveInt = function parsePositiveInt(value, defaultValue) {\n    var output = parseInt(value, 10);\n    return output >= 0 ? output : defaultValue;\n  };\n\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define([], function () {\n      return Vivus;\n    });\n  } else if (typeof exports === 'object') {\n    // Node. Does not work with strict CommonJS, but\n    // only CommonJS-like environments that support module.exports,\n    // like Node.\n    module.exports = Vivus;\n  } else {\n    // Browser globals\n    window.Vivus = Vivus;\n  }\n})();","window.eve = require('eve'); // Copyright (c) 2017 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar mina = function (eve) {\n  var animations = {},\n      requestAnimFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function (callback) {\n    setTimeout(callback, 16, new Date().getTime());\n    return true;\n  },\n      requestID,\n      isArray = Array.isArray || function (a) {\n    return a instanceof Array || Object.prototype.toString.call(a) == \"[object Array]\";\n  },\n      idgen = 0,\n      idprefix = \"M\" + (+new Date()).toString(36),\n      ID = function ID() {\n    return idprefix + (idgen++).toString(36);\n  },\n      diff = function diff(a, b, A, B) {\n    if (isArray(a)) {\n      res = [];\n\n      for (var i = 0, ii = a.length; i < ii; i++) {\n        res[i] = diff(a[i], b, A[i], B);\n      }\n\n      return res;\n    }\n\n    var dif = (A - a) / (B - b);\n    return function (bb) {\n      return a + dif * (bb - b);\n    };\n  },\n      timer = Date.now || function () {\n    return +new Date();\n  },\n      sta = function sta(val) {\n    var a = this;\n\n    if (val == null) {\n      return a.s;\n    }\n\n    var ds = a.s - val;\n    a.b += a.dur * ds;\n    a.B += a.dur * ds;\n    a.s = val;\n  },\n      speed = function speed(val) {\n    var a = this;\n\n    if (val == null) {\n      return a.spd;\n    }\n\n    a.spd = val;\n  },\n      duration = function duration(val) {\n    var a = this;\n\n    if (val == null) {\n      return a.dur;\n    }\n\n    a.s = a.s * val / a.dur;\n    a.dur = val;\n  },\n      stopit = function stopit() {\n    var a = this;\n    delete animations[a.id];\n    a.update();\n    eve(\"mina.stop.\" + a.id, a);\n  },\n      pause = function pause() {\n    var a = this;\n\n    if (a.pdif) {\n      return;\n    }\n\n    delete animations[a.id];\n    a.update();\n    a.pdif = a.get() - a.b;\n  },\n      resume = function resume() {\n    var a = this;\n\n    if (!a.pdif) {\n      return;\n    }\n\n    a.b = a.get() - a.pdif;\n    delete a.pdif;\n    animations[a.id] = a;\n    frame();\n  },\n      update = function update() {\n    var a = this,\n        res;\n\n    if (isArray(a.start)) {\n      res = [];\n\n      for (var j = 0, jj = a.start.length; j < jj; j++) {\n        res[j] = +a.start[j] + (a.end[j] - a.start[j]) * a.easing(a.s);\n      }\n    } else {\n      res = +a.start + (a.end - a.start) * a.easing(a.s);\n    }\n\n    a.set(res);\n  },\n      frame = function frame(timeStamp) {\n    // Manual invokation?\n    if (!timeStamp) {\n      // Frame loop stopped?\n      if (!requestID) {\n        // Start frame loop...\n        requestID = requestAnimFrame(frame);\n      }\n\n      return;\n    }\n\n    var len = 0;\n\n    for (var i in animations) {\n      if (animations.hasOwnProperty(i)) {\n        var a = animations[i],\n            b = a.get(),\n            res;\n        len++;\n        a.s = (b - a.b) / (a.dur / a.spd);\n\n        if (a.s >= 1) {\n          delete animations[i];\n          a.s = 1;\n          len--;\n\n          (function (a) {\n            setTimeout(function () {\n              eve(\"mina.finish.\" + a.id, a);\n            });\n          })(a);\n        }\n\n        a.update();\n      }\n    }\n\n    requestID = len ? requestAnimFrame(frame) : false;\n  },\n\n  /*\\\n   * mina\n   [ method ]\n   **\n   * Generic animation of numbers\n   **\n   - a (number) start _slave_ number\n   - A (number) end _slave_ number\n   - b (number) start _master_ number (start time in general case)\n   - B (number) end _master_ number (end time in general case)\n   - get (function) getter of _master_ number (see @mina.time)\n   - set (function) setter of _slave_ number\n   - easing (function) #optional easing function, default is @mina.linear\n   = (object) animation descriptor\n   o {\n   o         id (string) animation id,\n   o         start (number) start _slave_ number,\n   o         end (number) end _slave_ number,\n   o         b (number) start _master_ number,\n   o         s (number) animation status (0..1),\n   o         dur (number) animation duration,\n   o         spd (number) animation speed,\n   o         get (function) getter of _master_ number (see @mina.time),\n   o         set (function) setter of _slave_ number,\n   o         easing (function) easing function, default is @mina.linear,\n   o         status (function) status getter/setter,\n   o         speed (function) speed getter/setter,\n   o         duration (function) duration getter/setter,\n   o         stop (function) animation stopper\n   o         pause (function) pauses the animation\n   o         resume (function) resumes the animation\n   o         update (function) calles setter with the right value of the animation\n   o }\n  \\*/\n  mina = function mina(a, A, b, B, get, set, easing) {\n    var anim = {\n      id: ID(),\n      start: a,\n      end: A,\n      b: b,\n      s: 0,\n      dur: B - b,\n      spd: 1,\n      get: get,\n      set: set,\n      easing: easing || mina.linear,\n      status: sta,\n      speed: speed,\n      duration: duration,\n      stop: stopit,\n      pause: pause,\n      resume: resume,\n      update: update\n    };\n    animations[anim.id] = anim;\n    var len = 0,\n        i;\n\n    for (i in animations) {\n      if (animations.hasOwnProperty(i)) {\n        len++;\n\n        if (len == 2) {\n          break;\n        }\n      }\n    }\n\n    len == 1 && frame();\n    return anim;\n  };\n  /*\\\n   * mina.time\n   [ method ]\n   **\n   * Returns the current time. Equivalent to:\n   | function () {\n   |     return (new Date).getTime();\n   | }\n  \\*/\n\n\n  mina.time = timer;\n  /*\\\n   * mina.getById\n   [ method ]\n   **\n   * Returns an animation by its id\n   - id (string) animation's id\n   = (object) See @mina\n  \\*/\n\n  mina.getById = function (id) {\n    return animations[id] || null;\n  };\n  /*\\\n   * mina.linear\n   [ method ]\n   **\n   * Default linear easing\n   - n (number) input 0..1\n   = (number) output 0..1\n  \\*/\n\n\n  mina.linear = function (n) {\n    return n;\n  };\n  /*\\\n   * mina.easeout\n   [ method ]\n   **\n   * Easeout easing\n   - n (number) input 0..1\n   = (number) output 0..1\n  \\*/\n\n\n  mina.easeout = function (n) {\n    return Math.pow(n, 1.7);\n  };\n  /*\\\n   * mina.easein\n   [ method ]\n   **\n   * Easein easing\n   - n (number) input 0..1\n   = (number) output 0..1\n  \\*/\n\n\n  mina.easein = function (n) {\n    return Math.pow(n, .48);\n  };\n  /*\\\n   * mina.easeinout\n   [ method ]\n   **\n   * Easeinout easing\n   - n (number) input 0..1\n   = (number) output 0..1\n  \\*/\n\n\n  mina.easeinout = function (n) {\n    if (n == 1) {\n      return 1;\n    }\n\n    if (n == 0) {\n      return 0;\n    }\n\n    var q = .48 - n / 1.04,\n        Q = Math.sqrt(.1734 + q * q),\n        x = Q - q,\n        X = Math.pow(Math.abs(x), 1 / 3) * (x < 0 ? -1 : 1),\n        y = -Q - q,\n        Y = Math.pow(Math.abs(y), 1 / 3) * (y < 0 ? -1 : 1),\n        t = X + Y + .5;\n    return (1 - t) * 3 * t * t + t * t * t;\n  };\n  /*\\\n   * mina.backin\n   [ method ]\n   **\n   * Backin easing\n   - n (number) input 0..1\n   = (number) output 0..1\n  \\*/\n\n\n  mina.backin = function (n) {\n    if (n == 1) {\n      return 1;\n    }\n\n    var s = 1.70158;\n    return n * n * ((s + 1) * n - s);\n  };\n  /*\\\n   * mina.backout\n   [ method ]\n   **\n   * Backout easing\n   - n (number) input 0..1\n   = (number) output 0..1\n  \\*/\n\n\n  mina.backout = function (n) {\n    if (n == 0) {\n      return 0;\n    }\n\n    n = n - 1;\n    var s = 1.70158;\n    return n * n * ((s + 1) * n + s) + 1;\n  };\n  /*\\\n   * mina.elastic\n   [ method ]\n   **\n   * Elastic easing\n   - n (number) input 0..1\n   = (number) output 0..1\n  \\*/\n\n\n  mina.elastic = function (n) {\n    if (n == !!n) {\n      return n;\n    }\n\n    return Math.pow(2, -10 * n) * Math.sin((n - .075) * (2 * Math.PI) / .3) + 1;\n  };\n  /*\\\n   * mina.bounce\n   [ method ]\n   **\n   * Bounce easing\n   - n (number) input 0..1\n   = (number) output 0..1\n  \\*/\n\n\n  mina.bounce = function (n) {\n    var s = 7.5625,\n        p = 2.75,\n        l;\n\n    if (n < 1 / p) {\n      l = s * n * n;\n    } else {\n      if (n < 2 / p) {\n        n -= 1.5 / p;\n        l = s * n * n + .75;\n      } else {\n        if (n < 2.5 / p) {\n          n -= 2.25 / p;\n          l = s * n * n + .9375;\n        } else {\n          n -= 2.625 / p;\n          l = s * n * n + .984375;\n        }\n      }\n    }\n\n    return l;\n  };\n\n  window.mina = mina;\n  return mina;\n}(typeof eve == \"undefined\" ? function () {} : eve); // Copyright (c) 2013 - 2017 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n\nvar Snap = function (root) {\n  Snap.version = \"0.5.1\";\n  /*\\\n   * Snap\n   [ method ]\n   **\n   * Creates a drawing surface or wraps existing SVG element.\n   **\n   - width (number|string) width of surface\n   - height (number|string) height of surface\n   * or\n   - DOM (SVGElement) element to be wrapped into Snap structure\n   * or\n   - array (array) array of elements (will return set of elements)\n   * or\n   - query (string) CSS query selector\n   = (object) @Element\n  \\*/\n\n  function Snap(w, h) {\n    if (w) {\n      if (w.nodeType) {\n        return wrap(w);\n      }\n\n      if (is(w, \"array\") && Snap.set) {\n        return Snap.set.apply(Snap, w);\n      }\n\n      if (w instanceof Element) {\n        return w;\n      }\n\n      if (h == null) {\n        try {\n          w = glob.doc.querySelector(String(w));\n          return wrap(w);\n        } catch (e) {\n          return null;\n        }\n      }\n    }\n\n    w = w == null ? \"100%\" : w;\n    h = h == null ? \"100%\" : h;\n    return new Paper(w, h);\n  }\n\n  Snap.toString = function () {\n    return \"Snap v\" + this.version;\n  };\n\n  Snap._ = {};\n  var glob = {\n    win: root.window,\n    doc: root.window.document\n  };\n  Snap._.glob = glob;\n\n  var has = \"hasOwnProperty\",\n      Str = String,\n      toFloat = parseFloat,\n      toInt = parseInt,\n      math = Math,\n      mmax = math.max,\n      mmin = math.min,\n      abs = math.abs,\n      pow = math.pow,\n      PI = math.PI,\n      round = math.round,\n      E = \"\",\n      S = \" \",\n      objectToString = Object.prototype.toString,\n      ISURL = /^url\\(['\"]?([^\\)]+?)['\"]?\\)$/i,\n      colourRegExp = /^\\s*((#[a-f\\d]{6})|(#[a-f\\d]{3})|rgba?\\(\\s*([\\d\\.]+%?\\s*,\\s*[\\d\\.]+%?\\s*,\\s*[\\d\\.]+%?(?:\\s*,\\s*[\\d\\.]+%?)?)\\s*\\)|hsba?\\(\\s*([\\d\\.]+(?:deg|\\xb0|%)?\\s*,\\s*[\\d\\.]+%?\\s*,\\s*[\\d\\.]+(?:%?\\s*,\\s*[\\d\\.]+)?%?)\\s*\\)|hsla?\\(\\s*([\\d\\.]+(?:deg|\\xb0|%)?\\s*,\\s*[\\d\\.]+%?\\s*,\\s*[\\d\\.]+(?:%?\\s*,\\s*[\\d\\.]+)?%?)\\s*\\))\\s*$/i,\n      bezierrg = /^(?:cubic-)?bezier\\(([^,]+),([^,]+),([^,]+),([^\\)]+)\\)/,\n      separator = Snap._.separator = /[,\\s]+/,\n      whitespace = /[\\s]/g,\n      commaSpaces = /[\\s]*,[\\s]*/,\n      hsrg = {\n    hs: 1,\n    rg: 1\n  },\n      pathCommand = /([a-z])[\\s,]*((-?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?[\\s]*,?[\\s]*)+)/ig,\n      tCommand = /([rstm])[\\s,]*((-?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?[\\s]*,?[\\s]*)+)/ig,\n      pathValues = /(-?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?)[\\s]*,?[\\s]*/ig,\n      idgen = 0,\n      idprefix = \"S\" + (+new Date()).toString(36),\n      ID = function ID(el) {\n    return (el && el.type ? el.type : E) + idprefix + (idgen++).toString(36);\n  },\n      xlink = \"http://www.w3.org/1999/xlink\",\n      xmlns = \"http://www.w3.org/2000/svg\",\n      hub = {},\n\n  /*\\\n   * Snap.url\n   [ method ]\n   **\n   * Wraps path into `\"url('<path>')\"`.\n   - value (string) path\n   = (string) wrapped path\n  \\*/\n  URL = Snap.url = function (url) {\n    return \"url('#\" + url + \"')\";\n  };\n\n  function $(el, attr) {\n    if (attr) {\n      if (el == \"#text\") {\n        el = glob.doc.createTextNode(attr.text || attr[\"#text\"] || \"\");\n      }\n\n      if (el == \"#comment\") {\n        el = glob.doc.createComment(attr.text || attr[\"#text\"] || \"\");\n      }\n\n      if (typeof el == \"string\") {\n        el = $(el);\n      }\n\n      if (typeof attr == \"string\") {\n        if (el.nodeType == 1) {\n          if (attr.substring(0, 6) == \"xlink:\") {\n            return el.getAttributeNS(xlink, attr.substring(6));\n          }\n\n          if (attr.substring(0, 4) == \"xml:\") {\n            return el.getAttributeNS(xmlns, attr.substring(4));\n          }\n\n          return el.getAttribute(attr);\n        } else if (attr == \"text\") {\n          return el.nodeValue;\n        } else {\n          return null;\n        }\n      }\n\n      if (el.nodeType == 1) {\n        for (var key in attr) {\n          if (attr[has](key)) {\n            var val = Str(attr[key]);\n\n            if (val) {\n              if (key.substring(0, 6) == \"xlink:\") {\n                el.setAttributeNS(xlink, key.substring(6), val);\n              } else if (key.substring(0, 4) == \"xml:\") {\n                el.setAttributeNS(xmlns, key.substring(4), val);\n              } else {\n                el.setAttribute(key, val);\n              }\n            } else {\n              el.removeAttribute(key);\n            }\n          }\n        }\n      } else if (\"text\" in attr) {\n        el.nodeValue = attr.text;\n      }\n    } else {\n      el = glob.doc.createElementNS(xmlns, el);\n    }\n\n    return el;\n  }\n\n  Snap._.$ = $;\n  Snap._.id = ID;\n\n  function getAttrs(el) {\n    var attrs = el.attributes,\n        name,\n        out = {};\n\n    for (var i = 0; i < attrs.length; i++) {\n      if (attrs[i].namespaceURI == xlink) {\n        name = \"xlink:\";\n      } else {\n        name = \"\";\n      }\n\n      name += attrs[i].name;\n      out[name] = attrs[i].textContent;\n    }\n\n    return out;\n  }\n\n  function is(o, type) {\n    type = Str.prototype.toLowerCase.call(type);\n\n    if (type == \"finite\") {\n      return isFinite(o);\n    }\n\n    if (type == \"array\" && (o instanceof Array || Array.isArray && Array.isArray(o))) {\n      return true;\n    }\n\n    return type == \"null\" && o === null || type == typeof o && o !== null || type == \"object\" && o === Object(o) || objectToString.call(o).slice(8, -1).toLowerCase() == type;\n  }\n  /*\\\n   * Snap.format\n   [ method ]\n   **\n   * Replaces construction of type `{<name>}` to the corresponding argument\n   **\n   - token (string) string to format\n   - json (object) object which properties are used as a replacement\n   = (string) formatted string\n   > Usage\n   | // this draws a rectangular shape equivalent to \"M10,20h40v50h-40z\"\n   | paper.path(Snap.format(\"M{x},{y}h{dim.width}v{dim.height}h{dim['negative width']}z\", {\n   |     x: 10,\n   |     y: 20,\n   |     dim: {\n   |         width: 40,\n   |         height: 50,\n   |         \"negative width\": -40\n   |     }\n   | }));\n  \\*/\n\n\n  Snap.format = function () {\n    var tokenRegex = /\\{([^\\}]+)\\}/g,\n        objNotationRegex = /(?:(?:^|\\.)(.+?)(?=\\[|\\.|$|\\()|\\[('|\")(.+?)\\2\\])(\\(\\))?/g,\n        // matches .xxxxx or [\"xxxxx\"] to run over object properties\n    replacer = function replacer(all, key, obj) {\n      var res = obj;\n      key.replace(objNotationRegex, function (all, name, quote, quotedName, isFunc) {\n        name = name || quotedName;\n\n        if (res) {\n          if (name in res) {\n            res = res[name];\n          }\n\n          typeof res == \"function\" && isFunc && (res = res());\n        }\n      });\n      res = (res == null || res == obj ? all : res) + \"\";\n      return res;\n    };\n\n    return function (str, obj) {\n      return Str(str).replace(tokenRegex, function (all, key) {\n        return replacer(all, key, obj);\n      });\n    };\n  }();\n\n  function clone(obj) {\n    if (typeof obj == \"function\" || Object(obj) !== obj) {\n      return obj;\n    }\n\n    var res = new obj.constructor();\n\n    for (var key in obj) {\n      if (obj[has](key)) {\n        res[key] = clone(obj[key]);\n      }\n    }\n\n    return res;\n  }\n\n  Snap._.clone = clone;\n\n  function repush(array, item) {\n    for (var i = 0, ii = array.length; i < ii; i++) {\n      if (array[i] === item) {\n        return array.push(array.splice(i, 1)[0]);\n      }\n    }\n  }\n\n  function cacher(f, scope, postprocessor) {\n    function newf() {\n      var arg = Array.prototype.slice.call(arguments, 0),\n          args = arg.join(\"\\u2400\"),\n          cache = newf.cache = newf.cache || {},\n          count = newf.count = newf.count || [];\n\n      if (cache[has](args)) {\n        repush(count, args);\n        return postprocessor ? postprocessor(cache[args]) : cache[args];\n      }\n\n      count.length >= 1e3 && delete cache[count.shift()];\n      count.push(args);\n      cache[args] = f.apply(scope, arg);\n      return postprocessor ? postprocessor(cache[args]) : cache[args];\n    }\n\n    return newf;\n  }\n\n  Snap._.cacher = cacher;\n\n  function angle(x1, y1, x2, y2, x3, y3) {\n    if (x3 == null) {\n      var x = x1 - x2,\n          y = y1 - y2;\n\n      if (!x && !y) {\n        return 0;\n      }\n\n      return (180 + math.atan2(-y, -x) * 180 / PI + 360) % 360;\n    } else {\n      return angle(x1, y1, x3, y3) - angle(x2, y2, x3, y3);\n    }\n  }\n\n  function rad(deg) {\n    return deg % 360 * PI / 180;\n  }\n\n  function deg(rad) {\n    return rad * 180 / PI % 360;\n  }\n\n  function x_y() {\n    return this.x + S + this.y;\n  }\n\n  function x_y_w_h() {\n    return this.x + S + this.y + S + this.width + \" \\xd7 \" + this.height;\n  }\n  /*\\\n   * Snap.rad\n   [ method ]\n   **\n   * Transform angle to radians\n   - deg (number) angle in degrees\n   = (number) angle in radians\n  \\*/\n\n\n  Snap.rad = rad;\n  /*\\\n   * Snap.deg\n   [ method ]\n   **\n   * Transform angle to degrees\n   - rad (number) angle in radians\n   = (number) angle in degrees\n  \\*/\n\n  Snap.deg = deg;\n  /*\\\n   * Snap.sin\n   [ method ]\n   **\n   * Equivalent to `Math.sin()` only works with degrees, not radians.\n   - angle (number) angle in degrees\n   = (number) sin\n  \\*/\n\n  Snap.sin = function (angle) {\n    return math.sin(Snap.rad(angle));\n  };\n  /*\\\n   * Snap.tan\n   [ method ]\n   **\n   * Equivalent to `Math.tan()` only works with degrees, not radians.\n   - angle (number) angle in degrees\n   = (number) tan\n  \\*/\n\n\n  Snap.tan = function (angle) {\n    return math.tan(Snap.rad(angle));\n  };\n  /*\\\n   * Snap.cos\n   [ method ]\n   **\n   * Equivalent to `Math.cos()` only works with degrees, not radians.\n   - angle (number) angle in degrees\n   = (number) cos\n  \\*/\n\n\n  Snap.cos = function (angle) {\n    return math.cos(Snap.rad(angle));\n  };\n  /*\\\n   * Snap.asin\n   [ method ]\n   **\n   * Equivalent to `Math.asin()` only works with degrees, not radians.\n   - num (number) value\n   = (number) asin in degrees\n  \\*/\n\n\n  Snap.asin = function (num) {\n    return Snap.deg(math.asin(num));\n  };\n  /*\\\n   * Snap.acos\n   [ method ]\n   **\n   * Equivalent to `Math.acos()` only works with degrees, not radians.\n   - num (number) value\n   = (number) acos in degrees\n  \\*/\n\n\n  Snap.acos = function (num) {\n    return Snap.deg(math.acos(num));\n  };\n  /*\\\n   * Snap.atan\n   [ method ]\n   **\n   * Equivalent to `Math.atan()` only works with degrees, not radians.\n   - num (number) value\n   = (number) atan in degrees\n  \\*/\n\n\n  Snap.atan = function (num) {\n    return Snap.deg(math.atan(num));\n  };\n  /*\\\n   * Snap.atan2\n   [ method ]\n   **\n   * Equivalent to `Math.atan2()` only works with degrees, not radians.\n   - num (number) value\n   = (number) atan2 in degrees\n  \\*/\n\n\n  Snap.atan2 = function (num) {\n    return Snap.deg(math.atan2(num));\n  };\n  /*\\\n   * Snap.angle\n   [ method ]\n   **\n   * Returns an angle between two or three points\n   - x1 (number) x coord of first point\n   - y1 (number) y coord of first point\n   - x2 (number) x coord of second point\n   - y2 (number) y coord of second point\n   - x3 (number) #optional x coord of third point\n   - y3 (number) #optional y coord of third point\n   = (number) angle in degrees\n  \\*/\n\n\n  Snap.angle = angle;\n  /*\\\n   * Snap.len\n   [ method ]\n   **\n   * Returns distance between two points\n   - x1 (number) x coord of first point\n   - y1 (number) y coord of first point\n   - x2 (number) x coord of second point\n   - y2 (number) y coord of second point\n   = (number) distance\n  \\*/\n\n  Snap.len = function (x1, y1, x2, y2) {\n    return Math.sqrt(Snap.len2(x1, y1, x2, y2));\n  };\n  /*\\\n   * Snap.len2\n   [ method ]\n   **\n   * Returns squared distance between two points\n   - x1 (number) x coord of first point\n   - y1 (number) y coord of first point\n   - x2 (number) x coord of second point\n   - y2 (number) y coord of second point\n   = (number) distance\n  \\*/\n\n\n  Snap.len2 = function (x1, y1, x2, y2) {\n    return (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2);\n  };\n  /*\\\n   * Snap.closestPoint\n   [ method ]\n   **\n   * Returns closest point to a given one on a given path.\n   - path (Element) path element\n   - x (number) x coord of a point\n   - y (number) y coord of a point\n   = (object) in format\n   {\n      x (number) x coord of the point on the path\n      y (number) y coord of the point on the path\n      length (number) length of the path to the point\n      distance (number) distance from the given point to the path\n   }\n  \\*/\n  // Copied from http://bl.ocks.org/mbostock/8027637\n\n\n  Snap.closestPoint = function (path, x, y) {\n    function distance2(p) {\n      var dx = p.x - x,\n          dy = p.y - y;\n      return dx * dx + dy * dy;\n    }\n\n    var pathNode = path.node,\n        pathLength = pathNode.getTotalLength(),\n        precision = pathLength / pathNode.pathSegList.numberOfItems * .125,\n        best,\n        bestLength,\n        bestDistance = Infinity; // linear scan for coarse approximation\n\n    for (var scan, scanLength = 0, scanDistance; scanLength <= pathLength; scanLength += precision) {\n      if ((scanDistance = distance2(scan = pathNode.getPointAtLength(scanLength))) < bestDistance) {\n        best = scan;\n        bestLength = scanLength;\n        bestDistance = scanDistance;\n      }\n    } // binary search for precise estimate\n\n\n    precision *= .5;\n\n    while (precision > .5) {\n      var before, after, beforeLength, afterLength, beforeDistance, afterDistance;\n\n      if ((beforeLength = bestLength - precision) >= 0 && (beforeDistance = distance2(before = pathNode.getPointAtLength(beforeLength))) < bestDistance) {\n        best = before;\n        bestLength = beforeLength;\n        bestDistance = beforeDistance;\n      } else if ((afterLength = bestLength + precision) <= pathLength && (afterDistance = distance2(after = pathNode.getPointAtLength(afterLength))) < bestDistance) {\n        best = after;\n        bestLength = afterLength;\n        bestDistance = afterDistance;\n      } else {\n        precision *= .5;\n      }\n    }\n\n    best = {\n      x: best.x,\n      y: best.y,\n      length: bestLength,\n      distance: Math.sqrt(bestDistance)\n    };\n    return best;\n  };\n  /*\\\n   * Snap.is\n   [ method ]\n   **\n   * Handy replacement for the `typeof` operator\n   - o (…) any object or primitive\n   - type (string) name of the type, e.g., `string`, `function`, `number`, etc.\n   = (boolean) `true` if given value is of given type\n  \\*/\n\n\n  Snap.is = is;\n  /*\\\n   * Snap.snapTo\n   [ method ]\n   **\n   * Snaps given value to given grid\n   - values (array|number) given array of values or step of the grid\n   - value (number) value to adjust\n   - tolerance (number) #optional maximum distance to the target value that would trigger the snap. Default is `10`.\n   = (number) adjusted value\n  \\*/\n\n  Snap.snapTo = function (values, value, tolerance) {\n    tolerance = is(tolerance, \"finite\") ? tolerance : 10;\n\n    if (is(values, \"array\")) {\n      var i = values.length;\n\n      while (i--) {\n        if (abs(values[i] - value) <= tolerance) {\n          return values[i];\n        }\n      }\n    } else {\n      values = +values;\n      var rem = value % values;\n\n      if (rem < tolerance) {\n        return value - rem;\n      }\n\n      if (rem > values - tolerance) {\n        return value - rem + values;\n      }\n    }\n\n    return value;\n  }; // Colour\n\n  /*\\\n   * Snap.getRGB\n   [ method ]\n   **\n   * Parses color string as RGB object\n   - color (string) color string in one of the following formats:\n   # <ul>\n   #     <li>Color name (<code>red</code>, <code>green</code>, <code>cornflowerblue</code>, etc)</li>\n   #     <li>#••• — shortened HTML color: (<code>#000</code>, <code>#fc0</code>, etc.)</li>\n   #     <li>#•••••• — full length HTML color: (<code>#000000</code>, <code>#bd2300</code>)</li>\n   #     <li>rgb(•••, •••, •••) — red, green and blue channels values: (<code>rgb(200,&nbsp;100,&nbsp;0)</code>)</li>\n   #     <li>rgba(•••, •••, •••, •••) — also with opacity</li>\n   #     <li>rgb(•••%, •••%, •••%) — same as above, but in %: (<code>rgb(100%,&nbsp;175%,&nbsp;0%)</code>)</li>\n   #     <li>rgba(•••%, •••%, •••%, •••%) — also with opacity</li>\n   #     <li>hsb(•••, •••, •••) — hue, saturation and brightness values: (<code>hsb(0.5,&nbsp;0.25,&nbsp;1)</code>)</li>\n   #     <li>hsba(•••, •••, •••, •••) — also with opacity</li>\n   #     <li>hsb(•••%, •••%, •••%) — same as above, but in %</li>\n   #     <li>hsba(•••%, •••%, •••%, •••%) — also with opacity</li>\n   #     <li>hsl(•••, •••, •••) — hue, saturation and luminosity values: (<code>hsb(0.5,&nbsp;0.25,&nbsp;0.5)</code>)</li>\n   #     <li>hsla(•••, •••, •••, •••) — also with opacity</li>\n   #     <li>hsl(•••%, •••%, •••%) — same as above, but in %</li>\n   #     <li>hsla(•••%, •••%, •••%, •••%) — also with opacity</li>\n   # </ul>\n   * Note that `%` can be used any time: `rgb(20%, 255, 50%)`.\n   = (object) RGB object in the following format:\n   o {\n   o     r (number) red,\n   o     g (number) green,\n   o     b (number) blue,\n   o     hex (string) color in HTML/CSS format: #••••••,\n   o     error (boolean) true if string can't be parsed\n   o }\n  \\*/\n\n\n  Snap.getRGB = cacher(function (colour) {\n    if (!colour || !!((colour = Str(colour)).indexOf(\"-\") + 1)) {\n      return {\n        r: -1,\n        g: -1,\n        b: -1,\n        hex: \"none\",\n        error: 1,\n        toString: rgbtoString\n      };\n    }\n\n    if (colour == \"none\") {\n      return {\n        r: -1,\n        g: -1,\n        b: -1,\n        hex: \"none\",\n        toString: rgbtoString\n      };\n    }\n\n    !(hsrg[has](colour.toLowerCase().substring(0, 2)) || colour.charAt() == \"#\") && (colour = _toHex(colour));\n\n    if (!colour) {\n      return {\n        r: -1,\n        g: -1,\n        b: -1,\n        hex: \"none\",\n        error: 1,\n        toString: rgbtoString\n      };\n    }\n\n    var res,\n        red,\n        green,\n        blue,\n        opacity,\n        t,\n        values,\n        rgb = colour.match(colourRegExp);\n\n    if (rgb) {\n      if (rgb[2]) {\n        blue = toInt(rgb[2].substring(5), 16);\n        green = toInt(rgb[2].substring(3, 5), 16);\n        red = toInt(rgb[2].substring(1, 3), 16);\n      }\n\n      if (rgb[3]) {\n        blue = toInt((t = rgb[3].charAt(3)) + t, 16);\n        green = toInt((t = rgb[3].charAt(2)) + t, 16);\n        red = toInt((t = rgb[3].charAt(1)) + t, 16);\n      }\n\n      if (rgb[4]) {\n        values = rgb[4].split(commaSpaces);\n        red = toFloat(values[0]);\n        values[0].slice(-1) == \"%\" && (red *= 2.55);\n        green = toFloat(values[1]);\n        values[1].slice(-1) == \"%\" && (green *= 2.55);\n        blue = toFloat(values[2]);\n        values[2].slice(-1) == \"%\" && (blue *= 2.55);\n        rgb[1].toLowerCase().slice(0, 4) == \"rgba\" && (opacity = toFloat(values[3]));\n        values[3] && values[3].slice(-1) == \"%\" && (opacity /= 100);\n      }\n\n      if (rgb[5]) {\n        values = rgb[5].split(commaSpaces);\n        red = toFloat(values[0]);\n        values[0].slice(-1) == \"%\" && (red /= 100);\n        green = toFloat(values[1]);\n        values[1].slice(-1) == \"%\" && (green /= 100);\n        blue = toFloat(values[2]);\n        values[2].slice(-1) == \"%\" && (blue /= 100);\n        (values[0].slice(-3) == \"deg\" || values[0].slice(-1) == \"\\xb0\") && (red /= 360);\n        rgb[1].toLowerCase().slice(0, 4) == \"hsba\" && (opacity = toFloat(values[3]));\n        values[3] && values[3].slice(-1) == \"%\" && (opacity /= 100);\n        return Snap.hsb2rgb(red, green, blue, opacity);\n      }\n\n      if (rgb[6]) {\n        values = rgb[6].split(commaSpaces);\n        red = toFloat(values[0]);\n        values[0].slice(-1) == \"%\" && (red /= 100);\n        green = toFloat(values[1]);\n        values[1].slice(-1) == \"%\" && (green /= 100);\n        blue = toFloat(values[2]);\n        values[2].slice(-1) == \"%\" && (blue /= 100);\n        (values[0].slice(-3) == \"deg\" || values[0].slice(-1) == \"\\xb0\") && (red /= 360);\n        rgb[1].toLowerCase().slice(0, 4) == \"hsla\" && (opacity = toFloat(values[3]));\n        values[3] && values[3].slice(-1) == \"%\" && (opacity /= 100);\n        return Snap.hsl2rgb(red, green, blue, opacity);\n      }\n\n      red = mmin(math.round(red), 255);\n      green = mmin(math.round(green), 255);\n      blue = mmin(math.round(blue), 255);\n      opacity = mmin(mmax(opacity, 0), 1);\n      rgb = {\n        r: red,\n        g: green,\n        b: blue,\n        toString: rgbtoString\n      };\n      rgb.hex = \"#\" + (16777216 | blue | green << 8 | red << 16).toString(16).slice(1);\n      rgb.opacity = is(opacity, \"finite\") ? opacity : 1;\n      return rgb;\n    }\n\n    return {\n      r: -1,\n      g: -1,\n      b: -1,\n      hex: \"none\",\n      error: 1,\n      toString: rgbtoString\n    };\n  }, Snap);\n  /*\\\n   * Snap.hsb\n   [ method ]\n   **\n   * Converts HSB values to a hex representation of the color\n   - h (number) hue\n   - s (number) saturation\n   - b (number) value or brightness\n   = (string) hex representation of the color\n  \\*/\n\n  Snap.hsb = cacher(function (h, s, b) {\n    return Snap.hsb2rgb(h, s, b).hex;\n  });\n  /*\\\n   * Snap.hsl\n   [ method ]\n   **\n   * Converts HSL values to a hex representation of the color\n   - h (number) hue\n   - s (number) saturation\n   - l (number) luminosity\n   = (string) hex representation of the color\n  \\*/\n\n  Snap.hsl = cacher(function (h, s, l) {\n    return Snap.hsl2rgb(h, s, l).hex;\n  });\n  /*\\\n   * Snap.rgb\n   [ method ]\n   **\n   * Converts RGB values to a hex representation of the color\n   - r (number) red\n   - g (number) green\n   - b (number) blue\n   = (string) hex representation of the color\n  \\*/\n\n  Snap.rgb = cacher(function (r, g, b, o) {\n    if (is(o, \"finite\")) {\n      var round = math.round;\n      return \"rgba(\" + [round(r), round(g), round(b), +o.toFixed(2)] + \")\";\n    }\n\n    return \"#\" + (16777216 | b | g << 8 | r << 16).toString(16).slice(1);\n  });\n\n  var _toHex = function toHex(color) {\n    var i = glob.doc.getElementsByTagName(\"head\")[0] || glob.doc.getElementsByTagName(\"svg\")[0],\n        red = \"rgb(255, 0, 0)\";\n    _toHex = cacher(function (color) {\n      if (color.toLowerCase() == \"red\") {\n        return red;\n      }\n\n      i.style.color = red;\n      i.style.color = color;\n      var out = glob.doc.defaultView.getComputedStyle(i, E).getPropertyValue(\"color\");\n      return out == red ? null : out;\n    });\n    return _toHex(color);\n  },\n      hsbtoString = function hsbtoString() {\n    return \"hsb(\" + [this.h, this.s, this.b] + \")\";\n  },\n      hsltoString = function hsltoString() {\n    return \"hsl(\" + [this.h, this.s, this.l] + \")\";\n  },\n      rgbtoString = function rgbtoString() {\n    return this.opacity == 1 || this.opacity == null ? this.hex : \"rgba(\" + [this.r, this.g, this.b, this.opacity] + \")\";\n  },\n      prepareRGB = function prepareRGB(r, g, b) {\n    if (g == null && is(r, \"object\") && \"r\" in r && \"g\" in r && \"b\" in r) {\n      b = r.b;\n      g = r.g;\n      r = r.r;\n    }\n\n    if (g == null && is(r, string)) {\n      var clr = Snap.getRGB(r);\n      r = clr.r;\n      g = clr.g;\n      b = clr.b;\n    }\n\n    if (r > 1 || g > 1 || b > 1) {\n      r /= 255;\n      g /= 255;\n      b /= 255;\n    }\n\n    return [r, g, b];\n  },\n      packageRGB = function packageRGB(r, g, b, o) {\n    r = math.round(r * 255);\n    g = math.round(g * 255);\n    b = math.round(b * 255);\n    var rgb = {\n      r: r,\n      g: g,\n      b: b,\n      opacity: is(o, \"finite\") ? o : 1,\n      hex: Snap.rgb(r, g, b),\n      toString: rgbtoString\n    };\n    is(o, \"finite\") && (rgb.opacity = o);\n    return rgb;\n  };\n  /*\\\n   * Snap.color\n   [ method ]\n   **\n   * Parses the color string and returns an object featuring the color's component values\n   - clr (string) color string in one of the supported formats (see @Snap.getRGB)\n   = (object) Combined RGB/HSB object in the following format:\n   o {\n   o     r (number) red,\n   o     g (number) green,\n   o     b (number) blue,\n   o     hex (string) color in HTML/CSS format: #••••••,\n   o     error (boolean) `true` if string can't be parsed,\n   o     h (number) hue,\n   o     s (number) saturation,\n   o     v (number) value (brightness),\n   o     l (number) lightness\n   o }\n  \\*/\n\n\n  Snap.color = function (clr) {\n    var rgb;\n\n    if (is(clr, \"object\") && \"h\" in clr && \"s\" in clr && \"b\" in clr) {\n      rgb = Snap.hsb2rgb(clr);\n      clr.r = rgb.r;\n      clr.g = rgb.g;\n      clr.b = rgb.b;\n      clr.opacity = 1;\n      clr.hex = rgb.hex;\n    } else if (is(clr, \"object\") && \"h\" in clr && \"s\" in clr && \"l\" in clr) {\n      rgb = Snap.hsl2rgb(clr);\n      clr.r = rgb.r;\n      clr.g = rgb.g;\n      clr.b = rgb.b;\n      clr.opacity = 1;\n      clr.hex = rgb.hex;\n    } else {\n      if (is(clr, \"string\")) {\n        clr = Snap.getRGB(clr);\n      }\n\n      if (is(clr, \"object\") && \"r\" in clr && \"g\" in clr && \"b\" in clr && !(\"error\" in clr)) {\n        rgb = Snap.rgb2hsl(clr);\n        clr.h = rgb.h;\n        clr.s = rgb.s;\n        clr.l = rgb.l;\n        rgb = Snap.rgb2hsb(clr);\n        clr.v = rgb.b;\n      } else {\n        clr = {\n          hex: \"none\"\n        };\n        clr.r = clr.g = clr.b = clr.h = clr.s = clr.v = clr.l = -1;\n        clr.error = 1;\n      }\n    }\n\n    clr.toString = rgbtoString;\n    return clr;\n  };\n  /*\\\n   * Snap.hsb2rgb\n   [ method ]\n   **\n   * Converts HSB values to an RGB object\n   - h (number) hue\n   - s (number) saturation\n   - v (number) value or brightness\n   = (object) RGB object in the following format:\n   o {\n   o     r (number) red,\n   o     g (number) green,\n   o     b (number) blue,\n   o     hex (string) color in HTML/CSS format: #••••••\n   o }\n  \\*/\n\n\n  Snap.hsb2rgb = function (h, s, v, o) {\n    if (is(h, \"object\") && \"h\" in h && \"s\" in h && \"b\" in h) {\n      v = h.b;\n      s = h.s;\n      o = h.o;\n      h = h.h;\n    }\n\n    h *= 360;\n    var R, G, B, X, C;\n    h = h % 360 / 60;\n    C = v * s;\n    X = C * (1 - abs(h % 2 - 1));\n    R = G = B = v - C;\n    h = ~~h;\n    R += [C, X, 0, 0, X, C][h];\n    G += [X, C, C, X, 0, 0][h];\n    B += [0, 0, X, C, C, X][h];\n    return packageRGB(R, G, B, o);\n  };\n  /*\\\n   * Snap.hsl2rgb\n   [ method ]\n   **\n   * Converts HSL values to an RGB object\n   - h (number) hue\n   - s (number) saturation\n   - l (number) luminosity\n   = (object) RGB object in the following format:\n   o {\n   o     r (number) red,\n   o     g (number) green,\n   o     b (number) blue,\n   o     hex (string) color in HTML/CSS format: #••••••\n   o }\n  \\*/\n\n\n  Snap.hsl2rgb = function (h, s, l, o) {\n    if (is(h, \"object\") && \"h\" in h && \"s\" in h && \"l\" in h) {\n      l = h.l;\n      s = h.s;\n      h = h.h;\n    }\n\n    if (h > 1 || s > 1 || l > 1) {\n      h /= 360;\n      s /= 100;\n      l /= 100;\n    }\n\n    h *= 360;\n    var R, G, B, X, C;\n    h = h % 360 / 60;\n    C = 2 * s * (l < .5 ? l : 1 - l);\n    X = C * (1 - abs(h % 2 - 1));\n    R = G = B = l - C / 2;\n    h = ~~h;\n    R += [C, X, 0, 0, X, C][h];\n    G += [X, C, C, X, 0, 0][h];\n    B += [0, 0, X, C, C, X][h];\n    return packageRGB(R, G, B, o);\n  };\n  /*\\\n   * Snap.rgb2hsb\n   [ method ]\n   **\n   * Converts RGB values to an HSB object\n   - r (number) red\n   - g (number) green\n   - b (number) blue\n   = (object) HSB object in the following format:\n   o {\n   o     h (number) hue,\n   o     s (number) saturation,\n   o     b (number) brightness\n   o }\n  \\*/\n\n\n  Snap.rgb2hsb = function (r, g, b) {\n    b = prepareRGB(r, g, b);\n    r = b[0];\n    g = b[1];\n    b = b[2];\n    var H, S, V, C;\n    V = mmax(r, g, b);\n    C = V - mmin(r, g, b);\n    H = C == 0 ? null : V == r ? (g - b) / C : V == g ? (b - r) / C + 2 : (r - g) / C + 4;\n    H = (H + 360) % 6 * 60 / 360;\n    S = C == 0 ? 0 : C / V;\n    return {\n      h: H,\n      s: S,\n      b: V,\n      toString: hsbtoString\n    };\n  };\n  /*\\\n   * Snap.rgb2hsl\n   [ method ]\n   **\n   * Converts RGB values to an HSL object\n   - r (number) red\n   - g (number) green\n   - b (number) blue\n   = (object) HSL object in the following format:\n   o {\n   o     h (number) hue,\n   o     s (number) saturation,\n   o     l (number) luminosity\n   o }\n  \\*/\n\n\n  Snap.rgb2hsl = function (r, g, b) {\n    b = prepareRGB(r, g, b);\n    r = b[0];\n    g = b[1];\n    b = b[2];\n    var H, S, L, M, m, C;\n    M = mmax(r, g, b);\n    m = mmin(r, g, b);\n    C = M - m;\n    H = C == 0 ? null : M == r ? (g - b) / C : M == g ? (b - r) / C + 2 : (r - g) / C + 4;\n    H = (H + 360) % 6 * 60 / 360;\n    L = (M + m) / 2;\n    S = C == 0 ? 0 : L < .5 ? C / (2 * L) : C / (2 - 2 * L);\n    return {\n      h: H,\n      s: S,\n      l: L,\n      toString: hsltoString\n    };\n  }; // Transformations\n\n  /*\\\n   * Snap.parsePathString\n   [ method ]\n   **\n   * Utility method\n   **\n   * Parses given path string into an array of arrays of path segments\n   - pathString (string|array) path string or array of segments (in the last case it is returned straight away)\n   = (array) array of segments\n  \\*/\n\n\n  Snap.parsePathString = function (pathString) {\n    if (!pathString) {\n      return null;\n    }\n\n    var pth = Snap.path(pathString);\n\n    if (pth.arr) {\n      return Snap.path.clone(pth.arr);\n    }\n\n    var paramCounts = {\n      a: 7,\n      c: 6,\n      o: 2,\n      h: 1,\n      l: 2,\n      m: 2,\n      r: 4,\n      q: 4,\n      s: 4,\n      t: 2,\n      v: 1,\n      u: 3,\n      z: 0\n    },\n        data = [];\n\n    if (is(pathString, \"array\") && is(pathString[0], \"array\")) {\n      // rough assumption\n      data = Snap.path.clone(pathString);\n    }\n\n    if (!data.length) {\n      Str(pathString).replace(pathCommand, function (a, b, c) {\n        var params = [],\n            name = b.toLowerCase();\n        c.replace(pathValues, function (a, b) {\n          b && params.push(+b);\n        });\n\n        if (name == \"m\" && params.length > 2) {\n          data.push([b].concat(params.splice(0, 2)));\n          name = \"l\";\n          b = b == \"m\" ? \"l\" : \"L\";\n        }\n\n        if (name == \"o\" && params.length == 1) {\n          data.push([b, params[0]]);\n        }\n\n        if (name == \"r\") {\n          data.push([b].concat(params));\n        } else while (params.length >= paramCounts[name]) {\n          data.push([b].concat(params.splice(0, paramCounts[name])));\n\n          if (!paramCounts[name]) {\n            break;\n          }\n        }\n      });\n    }\n\n    data.toString = Snap.path.toString;\n    pth.arr = Snap.path.clone(data);\n    return data;\n  };\n  /*\\\n   * Snap.parseTransformString\n   [ method ]\n   **\n   * Utility method\n   **\n   * Parses given transform string into an array of transformations\n   - TString (string|array) transform string or array of transformations (in the last case it is returned straight away)\n   = (array) array of transformations\n  \\*/\n\n\n  var parseTransformString = Snap.parseTransformString = function (TString) {\n    if (!TString) {\n      return null;\n    }\n\n    var paramCounts = {\n      r: 3,\n      s: 4,\n      t: 2,\n      m: 6\n    },\n        data = [];\n\n    if (is(TString, \"array\") && is(TString[0], \"array\")) {\n      // rough assumption\n      data = Snap.path.clone(TString);\n    }\n\n    if (!data.length) {\n      Str(TString).replace(tCommand, function (a, b, c) {\n        var params = [],\n            name = b.toLowerCase();\n        c.replace(pathValues, function (a, b) {\n          b && params.push(+b);\n        });\n        data.push([b].concat(params));\n      });\n    }\n\n    data.toString = Snap.path.toString;\n    return data;\n  };\n\n  function svgTransform2string(tstr) {\n    var res = [];\n    tstr = tstr.replace(/(?:^|\\s)(\\w+)\\(([^)]+)\\)/g, function (all, name, params) {\n      params = params.split(/\\s*,\\s*|\\s+/);\n\n      if (name == \"rotate\" && params.length == 1) {\n        params.push(0, 0);\n      }\n\n      if (name == \"scale\") {\n        if (params.length > 2) {\n          params = params.slice(0, 2);\n        } else if (params.length == 2) {\n          params.push(0, 0);\n        }\n\n        if (params.length == 1) {\n          params.push(params[0], 0, 0);\n        }\n      }\n\n      if (name == \"skewX\") {\n        res.push([\"m\", 1, 0, math.tan(rad(params[0])), 1, 0, 0]);\n      } else if (name == \"skewY\") {\n        res.push([\"m\", 1, math.tan(rad(params[0])), 0, 1, 0, 0]);\n      } else {\n        res.push([name.charAt(0)].concat(params));\n      }\n\n      return all;\n    });\n    return res;\n  }\n\n  Snap._.svgTransform2string = svgTransform2string;\n  Snap._.rgTransform = /^[a-z][\\s]*-?\\.?\\d/i;\n\n  function transform2matrix(tstr, bbox) {\n    var tdata = parseTransformString(tstr),\n        m = new Snap.Matrix();\n\n    if (tdata) {\n      for (var i = 0, ii = tdata.length; i < ii; i++) {\n        var t = tdata[i],\n            tlen = t.length,\n            command = Str(t[0]).toLowerCase(),\n            absolute = t[0] != command,\n            inver = absolute ? m.invert() : 0,\n            x1,\n            y1,\n            x2,\n            y2,\n            bb;\n\n        if (command == \"t\" && tlen == 2) {\n          m.translate(t[1], 0);\n        } else if (command == \"t\" && tlen == 3) {\n          if (absolute) {\n            x1 = inver.x(0, 0);\n            y1 = inver.y(0, 0);\n            x2 = inver.x(t[1], t[2]);\n            y2 = inver.y(t[1], t[2]);\n            m.translate(x2 - x1, y2 - y1);\n          } else {\n            m.translate(t[1], t[2]);\n          }\n        } else if (command == \"r\") {\n          if (tlen == 2) {\n            bb = bb || bbox;\n            m.rotate(t[1], bb.x + bb.width / 2, bb.y + bb.height / 2);\n          } else if (tlen == 4) {\n            if (absolute) {\n              x2 = inver.x(t[2], t[3]);\n              y2 = inver.y(t[2], t[3]);\n              m.rotate(t[1], x2, y2);\n            } else {\n              m.rotate(t[1], t[2], t[3]);\n            }\n          }\n        } else if (command == \"s\") {\n          if (tlen == 2 || tlen == 3) {\n            bb = bb || bbox;\n            m.scale(t[1], t[tlen - 1], bb.x + bb.width / 2, bb.y + bb.height / 2);\n          } else if (tlen == 4) {\n            if (absolute) {\n              x2 = inver.x(t[2], t[3]);\n              y2 = inver.y(t[2], t[3]);\n              m.scale(t[1], t[1], x2, y2);\n            } else {\n              m.scale(t[1], t[1], t[2], t[3]);\n            }\n          } else if (tlen == 5) {\n            if (absolute) {\n              x2 = inver.x(t[3], t[4]);\n              y2 = inver.y(t[3], t[4]);\n              m.scale(t[1], t[2], x2, y2);\n            } else {\n              m.scale(t[1], t[2], t[3], t[4]);\n            }\n          }\n        } else if (command == \"m\" && tlen == 7) {\n          m.add(t[1], t[2], t[3], t[4], t[5], t[6]);\n        }\n      }\n    }\n\n    return m;\n  }\n\n  Snap._.transform2matrix = transform2matrix;\n  Snap._unit2px = unit2px;\n  var contains = glob.doc.contains || glob.doc.compareDocumentPosition ? function (a, b) {\n    var adown = a.nodeType == 9 ? a.documentElement : a,\n        bup = b && b.parentNode;\n    return a == bup || !!(bup && bup.nodeType == 1 && (adown.contains ? adown.contains(bup) : a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16));\n  } : function (a, b) {\n    if (b) {\n      while (b) {\n        b = b.parentNode;\n\n        if (b == a) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  };\n\n  function getSomeDefs(el) {\n    var p = el.node.ownerSVGElement && wrap(el.node.ownerSVGElement) || el.node.parentNode && wrap(el.node.parentNode) || Snap.select(\"svg\") || Snap(0, 0),\n        pdefs = p.select(\"defs\"),\n        defs = pdefs == null ? false : pdefs.node;\n\n    if (!defs) {\n      defs = make(\"defs\", p.node).node;\n    }\n\n    return defs;\n  }\n\n  function getSomeSVG(el) {\n    return el.node.ownerSVGElement && wrap(el.node.ownerSVGElement) || Snap.select(\"svg\");\n  }\n\n  Snap._.getSomeDefs = getSomeDefs;\n  Snap._.getSomeSVG = getSomeSVG;\n\n  function unit2px(el, name, value) {\n    var svg = getSomeSVG(el).node,\n        out = {},\n        mgr = svg.querySelector(\".svg---mgr\");\n\n    if (!mgr) {\n      mgr = $(\"rect\");\n      $(mgr, {\n        x: -9e9,\n        y: -9e9,\n        width: 10,\n        height: 10,\n        \"class\": \"svg---mgr\",\n        fill: \"none\"\n      });\n      svg.appendChild(mgr);\n    }\n\n    function getW(val) {\n      if (val == null) {\n        return E;\n      }\n\n      if (val == +val) {\n        return val;\n      }\n\n      $(mgr, {\n        width: val\n      });\n\n      try {\n        return mgr.getBBox().width;\n      } catch (e) {\n        return 0;\n      }\n    }\n\n    function getH(val) {\n      if (val == null) {\n        return E;\n      }\n\n      if (val == +val) {\n        return val;\n      }\n\n      $(mgr, {\n        height: val\n      });\n\n      try {\n        return mgr.getBBox().height;\n      } catch (e) {\n        return 0;\n      }\n    }\n\n    function set(nam, f) {\n      if (name == null) {\n        out[nam] = f(el.attr(nam) || 0);\n      } else if (nam == name) {\n        out = f(value == null ? el.attr(nam) || 0 : value);\n      }\n    }\n\n    switch (el.type) {\n      case \"rect\":\n        set(\"rx\", getW);\n        set(\"ry\", getH);\n\n      case \"image\":\n        set(\"width\", getW);\n        set(\"height\", getH);\n\n      case \"text\":\n        set(\"x\", getW);\n        set(\"y\", getH);\n        break;\n\n      case \"circle\":\n        set(\"cx\", getW);\n        set(\"cy\", getH);\n        set(\"r\", getW);\n        break;\n\n      case \"ellipse\":\n        set(\"cx\", getW);\n        set(\"cy\", getH);\n        set(\"rx\", getW);\n        set(\"ry\", getH);\n        break;\n\n      case \"line\":\n        set(\"x1\", getW);\n        set(\"x2\", getW);\n        set(\"y1\", getH);\n        set(\"y2\", getH);\n        break;\n\n      case \"marker\":\n        set(\"refX\", getW);\n        set(\"markerWidth\", getW);\n        set(\"refY\", getH);\n        set(\"markerHeight\", getH);\n        break;\n\n      case \"radialGradient\":\n        set(\"fx\", getW);\n        set(\"fy\", getH);\n        break;\n\n      case \"tspan\":\n        set(\"dx\", getW);\n        set(\"dy\", getH);\n        break;\n\n      default:\n        set(name, getW);\n    }\n\n    svg.removeChild(mgr);\n    return out;\n  }\n  /*\\\n   * Snap.select\n   [ method ]\n   **\n   * Wraps a DOM element specified by CSS selector as @Element\n   - query (string) CSS selector of the element\n   = (Element) the current element\n  \\*/\n\n\n  Snap.select = function (query) {\n    query = Str(query).replace(/([^\\\\]):/g, \"$1\\\\:\");\n    return wrap(glob.doc.querySelector(query));\n  };\n  /*\\\n   * Snap.selectAll\n   [ method ]\n   **\n   * Wraps DOM elements specified by CSS selector as set or array of @Element\n   - query (string) CSS selector of the element\n   = (Element) the current element\n  \\*/\n\n\n  Snap.selectAll = function (query) {\n    var nodelist = glob.doc.querySelectorAll(query),\n        set = (Snap.set || Array)();\n\n    for (var i = 0; i < nodelist.length; i++) {\n      set.push(wrap(nodelist[i]));\n    }\n\n    return set;\n  };\n\n  function add2group(list) {\n    if (!is(list, \"array\")) {\n      list = Array.prototype.slice.call(arguments, 0);\n    }\n\n    var i = 0,\n        j = 0,\n        node = this.node;\n\n    while (this[i]) {\n      delete this[i++];\n    }\n\n    for (i = 0; i < list.length; i++) {\n      if (list[i].type == \"set\") {\n        list[i].forEach(function (el) {\n          node.appendChild(el.node);\n        });\n      } else {\n        node.appendChild(list[i].node);\n      }\n    }\n\n    var children = node.childNodes;\n\n    for (i = 0; i < children.length; i++) {\n      this[j++] = wrap(children[i]);\n    }\n\n    return this;\n  } // Hub garbage collector every 10s\n\n\n  setInterval(function () {\n    for (var key in hub) {\n      if (hub[has](key)) {\n        var el = hub[key],\n            node = el.node;\n\n        if (el.type != \"svg\" && !node.ownerSVGElement || el.type == \"svg\" && (!node.parentNode || \"ownerSVGElement\" in node.parentNode && !node.ownerSVGElement)) {\n          delete hub[key];\n        }\n      }\n    }\n  }, 1e4);\n\n  function Element(el) {\n    if (el.snap in hub) {\n      return hub[el.snap];\n    }\n\n    var svg;\n\n    try {\n      svg = el.ownerSVGElement;\n    } catch (e) {}\n    /*\\\n     * Element.node\n     [ property (object) ]\n     **\n     * Gives you a reference to the DOM object, so you can assign event handlers or just mess around.\n     > Usage\n     | // draw a circle at coordinate 10,10 with radius of 10\n     | var c = paper.circle(10, 10, 10);\n     | c.node.onclick = function () {\n     |     c.attr(\"fill\", \"red\");\n     | };\n    \\*/\n\n\n    this.node = el;\n\n    if (svg) {\n      this.paper = new Paper(svg);\n    }\n    /*\\\n     * Element.type\n     [ property (string) ]\n     **\n     * SVG tag name of the given element.\n    \\*/\n\n\n    this.type = el.tagName || el.nodeName;\n    var id = this.id = ID(this);\n    this.anims = {};\n    this._ = {\n      transform: []\n    };\n    el.snap = id;\n    hub[id] = this;\n\n    if (this.type == \"g\") {\n      this.add = add2group;\n    }\n\n    if (this.type in {\n      g: 1,\n      mask: 1,\n      pattern: 1,\n      symbol: 1\n    }) {\n      for (var method in Paper.prototype) {\n        if (Paper.prototype[has](method)) {\n          this[method] = Paper.prototype[method];\n        }\n      }\n    }\n  }\n  /*\\\n    * Element.attr\n    [ method ]\n    **\n    * Gets or sets given attributes of the element.\n    **\n    - params (object) contains key-value pairs of attributes you want to set\n    * or\n    - param (string) name of the attribute\n    = (Element) the current element\n    * or\n    = (string) value of attribute\n    > Usage\n    | el.attr({\n    |     fill: \"#fc0\",\n    |     stroke: \"#000\",\n    |     strokeWidth: 2, // CamelCase...\n    |     \"fill-opacity\": 0.5, // or dash-separated names\n    |     width: \"*=2\" // prefixed values\n    | });\n    | console.log(el.attr(\"fill\")); // #fc0\n    * Prefixed values in format `\"+=10\"` supported. All four operations\n    * (`+`, `-`, `*` and `/`) could be used. Optionally you can use units for `+`\n    * and `-`: `\"+=2em\"`.\n   \\*/\n\n\n  Element.prototype.attr = function (params, value) {\n    var el = this,\n        node = el.node;\n\n    if (!params) {\n      if (node.nodeType != 1) {\n        return {\n          text: node.nodeValue\n        };\n      }\n\n      var attr = node.attributes,\n          out = {};\n\n      for (var i = 0, ii = attr.length; i < ii; i++) {\n        out[attr[i].nodeName] = attr[i].nodeValue;\n      }\n\n      return out;\n    }\n\n    if (is(params, \"string\")) {\n      if (arguments.length > 1) {\n        var json = {};\n        json[params] = value;\n        params = json;\n      } else {\n        return eve(\"snap.util.getattr.\" + params, el).firstDefined();\n      }\n    }\n\n    for (var att in params) {\n      if (params[has](att)) {\n        eve(\"snap.util.attr.\" + att, el, params[att]);\n      }\n    }\n\n    return el;\n  };\n  /*\\\n   * Snap.parse\n   [ method ]\n   **\n   * Parses SVG fragment and converts it into a @Fragment\n   **\n   - svg (string) SVG string\n   = (Fragment) the @Fragment\n  \\*/\n\n\n  Snap.parse = function (svg) {\n    var f = glob.doc.createDocumentFragment(),\n        full = true,\n        div = glob.doc.createElement(\"div\");\n    svg = Str(svg);\n\n    if (!svg.match(/^\\s*<\\s*svg(?:\\s|>)/)) {\n      svg = \"<svg>\" + svg + \"</svg>\";\n      full = false;\n    }\n\n    div.innerHTML = svg;\n    svg = div.getElementsByTagName(\"svg\")[0];\n\n    if (svg) {\n      if (full) {\n        f = svg;\n      } else {\n        while (svg.firstChild) {\n          f.appendChild(svg.firstChild);\n        }\n      }\n    }\n\n    return new Fragment(f);\n  };\n\n  function Fragment(frag) {\n    this.node = frag;\n  }\n  /*\\\n   * Snap.fragment\n   [ method ]\n   **\n   * Creates a DOM fragment from a given list of elements or strings\n   **\n   - varargs (…) SVG string\n   = (Fragment) the @Fragment\n  \\*/\n\n\n  Snap.fragment = function () {\n    var args = Array.prototype.slice.call(arguments, 0),\n        f = glob.doc.createDocumentFragment();\n\n    for (var i = 0, ii = args.length; i < ii; i++) {\n      var item = args[i];\n\n      if (item.node && item.node.nodeType) {\n        f.appendChild(item.node);\n      }\n\n      if (item.nodeType) {\n        f.appendChild(item);\n      }\n\n      if (typeof item == \"string\") {\n        f.appendChild(Snap.parse(item).node);\n      }\n    }\n\n    return new Fragment(f);\n  };\n\n  function make(name, parent) {\n    var res = $(name);\n    parent.appendChild(res);\n    var el = wrap(res);\n    return el;\n  }\n\n  function Paper(w, h) {\n    var res,\n        desc,\n        defs,\n        proto = Paper.prototype;\n\n    if (w && w.tagName && w.tagName.toLowerCase() == \"svg\") {\n      if (w.snap in hub) {\n        return hub[w.snap];\n      }\n\n      var doc = w.ownerDocument;\n      res = new Element(w);\n      desc = w.getElementsByTagName(\"desc\")[0];\n      defs = w.getElementsByTagName(\"defs\")[0];\n\n      if (!desc) {\n        desc = $(\"desc\");\n        desc.appendChild(doc.createTextNode(\"Created with Snap\"));\n        res.node.appendChild(desc);\n      }\n\n      if (!defs) {\n        defs = $(\"defs\");\n        res.node.appendChild(defs);\n      }\n\n      res.defs = defs;\n\n      for (var key in proto) {\n        if (proto[has](key)) {\n          res[key] = proto[key];\n        }\n      }\n\n      res.paper = res.root = res;\n    } else {\n      res = make(\"svg\", glob.doc.body);\n      $(res.node, {\n        height: h,\n        version: 1.1,\n        width: w,\n        xmlns: xmlns\n      });\n    }\n\n    return res;\n  }\n\n  function wrap(dom) {\n    if (!dom) {\n      return dom;\n    }\n\n    if (dom instanceof Element || dom instanceof Fragment) {\n      return dom;\n    }\n\n    if (dom.tagName && dom.tagName.toLowerCase() == \"svg\") {\n      return new Paper(dom);\n    }\n\n    if (dom.tagName && dom.tagName.toLowerCase() == \"object\" && dom.type == \"image/svg+xml\") {\n      return new Paper(dom.contentDocument.getElementsByTagName(\"svg\")[0]);\n    }\n\n    return new Element(dom);\n  }\n\n  Snap._.make = make;\n  Snap._.wrap = wrap;\n  /*\\\n   * Paper.el\n   [ method ]\n   **\n   * Creates an element on paper with a given name and no attributes\n   **\n   - name (string) tag name\n   - attr (object) attributes\n   = (Element) the current element\n   > Usage\n   | var c = paper.circle(10, 10, 10); // is the same as...\n   | var c = paper.el(\"circle\").attr({\n   |     cx: 10,\n   |     cy: 10,\n   |     r: 10\n   | });\n   | // and the same as\n   | var c = paper.el(\"circle\", {\n   |     cx: 10,\n   |     cy: 10,\n   |     r: 10\n   | });\n  \\*/\n\n  Paper.prototype.el = function (name, attr) {\n    var el = make(name, this.node);\n    attr && el.attr(attr);\n    return el;\n  };\n  /*\\\n   * Element.children\n   [ method ]\n   **\n   * Returns array of all the children of the element.\n   = (array) array of Elements\n  \\*/\n\n\n  Element.prototype.children = function () {\n    var out = [],\n        ch = this.node.childNodes;\n\n    for (var i = 0, ii = ch.length; i < ii; i++) {\n      out[i] = Snap(ch[i]);\n    }\n\n    return out;\n  };\n\n  function jsonFiller(root, o) {\n    for (var i = 0, ii = root.length; i < ii; i++) {\n      var item = {\n        type: root[i].type,\n        attr: root[i].attr()\n      },\n          children = root[i].children();\n      o.push(item);\n\n      if (children.length) {\n        jsonFiller(children, item.childNodes = []);\n      }\n    }\n  }\n  /*\\\n   * Element.toJSON\n   [ method ]\n   **\n   * Returns object representation of the given element and all its children.\n   = (object) in format\n   o {\n   o     type (string) this.type,\n   o     attr (object) attributes map,\n   o     childNodes (array) optional array of children in the same format\n   o }\n  \\*/\n\n\n  Element.prototype.toJSON = function () {\n    var out = [];\n    jsonFiller([this], out);\n    return out[0];\n  }; // default\n\n\n  eve.on(\"snap.util.getattr\", function () {\n    var att = eve.nt();\n    att = att.substring(att.lastIndexOf(\".\") + 1);\n    var css = att.replace(/[A-Z]/g, function (letter) {\n      return \"-\" + letter.toLowerCase();\n    });\n\n    if (cssAttr[has](css)) {\n      return this.node.ownerDocument.defaultView.getComputedStyle(this.node, null).getPropertyValue(css);\n    } else {\n      return $(this.node, att);\n    }\n  });\n  var cssAttr = {\n    \"alignment-baseline\": 0,\n    \"baseline-shift\": 0,\n    \"clip\": 0,\n    \"clip-path\": 0,\n    \"clip-rule\": 0,\n    \"color\": 0,\n    \"color-interpolation\": 0,\n    \"color-interpolation-filters\": 0,\n    \"color-profile\": 0,\n    \"color-rendering\": 0,\n    \"cursor\": 0,\n    \"direction\": 0,\n    \"display\": 0,\n    \"dominant-baseline\": 0,\n    \"enable-background\": 0,\n    \"fill\": 0,\n    \"fill-opacity\": 0,\n    \"fill-rule\": 0,\n    \"filter\": 0,\n    \"flood-color\": 0,\n    \"flood-opacity\": 0,\n    \"font\": 0,\n    \"font-family\": 0,\n    \"font-size\": 0,\n    \"font-size-adjust\": 0,\n    \"font-stretch\": 0,\n    \"font-style\": 0,\n    \"font-variant\": 0,\n    \"font-weight\": 0,\n    \"glyph-orientation-horizontal\": 0,\n    \"glyph-orientation-vertical\": 0,\n    \"image-rendering\": 0,\n    \"kerning\": 0,\n    \"letter-spacing\": 0,\n    \"lighting-color\": 0,\n    \"marker\": 0,\n    \"marker-end\": 0,\n    \"marker-mid\": 0,\n    \"marker-start\": 0,\n    \"mask\": 0,\n    \"opacity\": 0,\n    \"overflow\": 0,\n    \"pointer-events\": 0,\n    \"shape-rendering\": 0,\n    \"stop-color\": 0,\n    \"stop-opacity\": 0,\n    \"stroke\": 0,\n    \"stroke-dasharray\": 0,\n    \"stroke-dashoffset\": 0,\n    \"stroke-linecap\": 0,\n    \"stroke-linejoin\": 0,\n    \"stroke-miterlimit\": 0,\n    \"stroke-opacity\": 0,\n    \"stroke-width\": 0,\n    \"text-anchor\": 0,\n    \"text-decoration\": 0,\n    \"text-rendering\": 0,\n    \"unicode-bidi\": 0,\n    \"visibility\": 0,\n    \"word-spacing\": 0,\n    \"writing-mode\": 0\n  };\n  eve.on(\"snap.util.attr\", function (value) {\n    var att = eve.nt(),\n        attr = {};\n    att = att.substring(att.lastIndexOf(\".\") + 1);\n    attr[att] = value;\n    var style = att.replace(/-(\\w)/gi, function (all, letter) {\n      return letter.toUpperCase();\n    }),\n        css = att.replace(/[A-Z]/g, function (letter) {\n      return \"-\" + letter.toLowerCase();\n    });\n\n    if (cssAttr[has](css)) {\n      this.node.style[style] = value == null ? E : value;\n    } else {\n      $(this.node, attr);\n    }\n  });\n\n  (function (proto) {})(Paper.prototype); // simple ajax\n\n  /*\\\n   * Snap.ajax\n   [ method ]\n   **\n   * Simple implementation of Ajax\n   **\n   - url (string) URL\n   - postData (object|string) data for post request\n   - callback (function) callback\n   - scope (object) #optional scope of callback\n   * or\n   - url (string) URL\n   - callback (function) callback\n   - scope (object) #optional scope of callback\n   = (XMLHttpRequest) the XMLHttpRequest object, just in case\n  \\*/\n\n\n  Snap.ajax = function (url, postData, callback, scope) {\n    var req = new XMLHttpRequest(),\n        id = ID();\n\n    if (req) {\n      if (is(postData, \"function\")) {\n        scope = callback;\n        callback = postData;\n        postData = null;\n      } else if (is(postData, \"object\")) {\n        var pd = [];\n\n        for (var key in postData) {\n          if (postData.hasOwnProperty(key)) {\n            pd.push(encodeURIComponent(key) + \"=\" + encodeURIComponent(postData[key]));\n          }\n        }\n\n        postData = pd.join(\"&\");\n      }\n\n      req.open(postData ? \"POST\" : \"GET\", url, true);\n\n      if (postData) {\n        req.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\");\n        req.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");\n      }\n\n      if (callback) {\n        eve.once(\"snap.ajax.\" + id + \".0\", callback);\n        eve.once(\"snap.ajax.\" + id + \".200\", callback);\n        eve.once(\"snap.ajax.\" + id + \".304\", callback);\n      }\n\n      req.onreadystatechange = function () {\n        if (req.readyState != 4) return;\n        eve(\"snap.ajax.\" + id + \".\" + req.status, scope, req);\n      };\n\n      if (req.readyState == 4) {\n        return req;\n      }\n\n      req.send(postData);\n      return req;\n    }\n  };\n  /*\\\n   * Snap.load\n   [ method ]\n   **\n   * Loads external SVG file as a @Fragment (see @Snap.ajax for more advanced AJAX)\n   **\n   - url (string) URL\n   - callback (function) callback\n   - scope (object) #optional scope of callback\n  \\*/\n\n\n  Snap.load = function (url, callback, scope) {\n    Snap.ajax(url, function (req) {\n      var f = Snap.parse(req.responseText);\n      scope ? callback.call(scope, f) : callback(f);\n    });\n  };\n\n  var getOffset = function getOffset(elem) {\n    var box = elem.getBoundingClientRect(),\n        doc = elem.ownerDocument,\n        body = doc.body,\n        docElem = doc.documentElement,\n        clientTop = docElem.clientTop || body.clientTop || 0,\n        clientLeft = docElem.clientLeft || body.clientLeft || 0,\n        top = box.top + (g.win.pageYOffset || docElem.scrollTop || body.scrollTop) - clientTop,\n        left = box.left + (g.win.pageXOffset || docElem.scrollLeft || body.scrollLeft) - clientLeft;\n    return {\n      y: top,\n      x: left\n    };\n  };\n  /*\\\n   * Snap.getElementByPoint\n   [ method ]\n   **\n   * Returns you topmost element under given point.\n   **\n   = (object) Snap element object\n   - x (number) x coordinate from the top left corner of the window\n   - y (number) y coordinate from the top left corner of the window\n   > Usage\n   | Snap.getElementByPoint(mouseX, mouseY).attr({stroke: \"#f00\"});\n  \\*/\n\n\n  Snap.getElementByPoint = function (x, y) {\n    var paper = this,\n        svg = paper.canvas,\n        target = glob.doc.elementFromPoint(x, y);\n\n    if (glob.win.opera && target.tagName == \"svg\") {\n      var so = getOffset(target),\n          sr = target.createSVGRect();\n      sr.x = x - so.x;\n      sr.y = y - so.y;\n      sr.width = sr.height = 1;\n      var hits = target.getIntersectionList(sr, null);\n\n      if (hits.length) {\n        target = hits[hits.length - 1];\n      }\n    }\n\n    if (!target) {\n      return null;\n    }\n\n    return wrap(target);\n  };\n  /*\\\n   * Snap.plugin\n   [ method ]\n   **\n   * Let you write plugins. You pass in a function with five arguments, like this:\n   | Snap.plugin(function (Snap, Element, Paper, global, Fragment) {\n   |     Snap.newmethod = function () {};\n   |     Element.prototype.newmethod = function () {};\n   |     Paper.prototype.newmethod = function () {};\n   | });\n   * Inside the function you have access to all main objects (and their\n   * prototypes). This allow you to extend anything you want.\n   **\n   - f (function) your plugin body\n  \\*/\n\n\n  Snap.plugin = function (f) {\n    f(Snap, Element, Paper, glob, Fragment);\n  };\n\n  glob.win.Snap = Snap;\n  return Snap;\n}(window || this); // Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n\nSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n  var elproto = Element.prototype,\n      is = Snap.is,\n      Str = String,\n      unit2px = Snap._unit2px,\n      $ = Snap._.$,\n      make = Snap._.make,\n      getSomeDefs = Snap._.getSomeDefs,\n      has = \"hasOwnProperty\",\n      wrap = Snap._.wrap;\n  /*\\\n   * Element.getBBox\n   [ method ]\n   **\n   * Returns the bounding box descriptor for the given element\n   **\n   = (object) bounding box descriptor:\n   o {\n   o     cx: (number) x of the center,\n   o     cy: (number) x of the center,\n   o     h: (number) height,\n   o     height: (number) height,\n   o     path: (string) path command for the box,\n   o     r0: (number) radius of a circle that fully encloses the box,\n   o     r1: (number) radius of the smallest circle that can be enclosed,\n   o     r2: (number) radius of the largest circle that can be enclosed,\n   o     vb: (string) box as a viewbox command,\n   o     w: (number) width,\n   o     width: (number) width,\n   o     x2: (number) x of the right side,\n   o     x: (number) x of the left side,\n   o     y2: (number) y of the bottom edge,\n   o     y: (number) y of the top edge\n   o }\n  \\*/\n\n  elproto.getBBox = function (isWithoutTransform) {\n    if (this.type == \"tspan\") {\n      return Snap._.box(this.node.getClientRects().item(0));\n    }\n\n    if (!Snap.Matrix || !Snap.path) {\n      return this.node.getBBox();\n    }\n\n    var el = this,\n        m = new Snap.Matrix();\n\n    if (el.removed) {\n      return Snap._.box();\n    }\n\n    while (el.type == \"use\") {\n      if (!isWithoutTransform) {\n        m = m.add(el.transform().localMatrix.translate(el.attr(\"x\") || 0, el.attr(\"y\") || 0));\n      }\n\n      if (el.original) {\n        el = el.original;\n      } else {\n        var href = el.attr(\"xlink:href\");\n        el = el.original = el.node.ownerDocument.getElementById(href.substring(href.indexOf(\"#\") + 1));\n      }\n    }\n\n    var _ = el._,\n        pathfinder = Snap.path.get[el.type] || Snap.path.get.deflt;\n\n    try {\n      if (isWithoutTransform) {\n        _.bboxwt = pathfinder ? Snap.path.getBBox(el.realPath = pathfinder(el)) : Snap._.box(el.node.getBBox());\n        return Snap._.box(_.bboxwt);\n      } else {\n        el.realPath = pathfinder(el);\n        el.matrix = el.transform().localMatrix;\n        _.bbox = Snap.path.getBBox(Snap.path.map(el.realPath, m.add(el.matrix)));\n        return Snap._.box(_.bbox);\n      }\n    } catch (e) {\n      // Firefox doesn’t give you bbox of hidden element\n      return Snap._.box();\n    }\n  };\n\n  var propString = function propString() {\n    return this.string;\n  };\n\n  function extractTransform(el, tstr) {\n    if (tstr == null) {\n      var doReturn = true;\n\n      if (el.type == \"linearGradient\" || el.type == \"radialGradient\") {\n        tstr = el.node.getAttribute(\"gradientTransform\");\n      } else if (el.type == \"pattern\") {\n        tstr = el.node.getAttribute(\"patternTransform\");\n      } else {\n        tstr = el.node.getAttribute(\"transform\");\n      }\n\n      if (!tstr) {\n        return new Snap.Matrix();\n      }\n\n      tstr = Snap._.svgTransform2string(tstr);\n    } else {\n      if (!Snap._.rgTransform.test(tstr)) {\n        tstr = Snap._.svgTransform2string(tstr);\n      } else {\n        tstr = Str(tstr).replace(/\\.{3}|\\u2026/g, el._.transform || \"\");\n      }\n\n      if (is(tstr, \"array\")) {\n        tstr = Snap.path ? Snap.path.toString.call(tstr) : Str(tstr);\n      }\n\n      el._.transform = tstr;\n    }\n\n    var m = Snap._.transform2matrix(tstr, el.getBBox(1));\n\n    if (doReturn) {\n      return m;\n    } else {\n      el.matrix = m;\n    }\n  }\n  /*\\\n   * Element.transform\n   [ method ]\n   **\n   * Gets or sets transformation of the element\n   **\n   - tstr (string) transform string in Snap or SVG format\n   = (Element) the current element\n   * or\n   = (object) transformation descriptor:\n   o {\n   o     string (string) transform string,\n   o     globalMatrix (Matrix) matrix of all transformations applied to element or its parents,\n   o     localMatrix (Matrix) matrix of transformations applied only to the element,\n   o     diffMatrix (Matrix) matrix of difference between global and local transformations,\n   o     global (string) global transformation as string,\n   o     local (string) local transformation as string,\n   o     toString (function) returns `string` property\n   o }\n  \\*/\n\n\n  elproto.transform = function (tstr) {\n    var _ = this._;\n\n    if (tstr == null) {\n      var papa = this,\n          global = new Snap.Matrix(this.node.getCTM()),\n          local = extractTransform(this),\n          ms = [local],\n          m = new Snap.Matrix(),\n          i,\n          localString = local.toTransformString(),\n          string = Str(local) == Str(this.matrix) ? Str(_.transform) : localString;\n\n      while (papa.type != \"svg\" && (papa = papa.parent())) {\n        ms.push(extractTransform(papa));\n      }\n\n      i = ms.length;\n\n      while (i--) {\n        m.add(ms[i]);\n      }\n\n      return {\n        string: string,\n        globalMatrix: global,\n        totalMatrix: m,\n        localMatrix: local,\n        diffMatrix: global.clone().add(local.invert()),\n        global: global.toTransformString(),\n        total: m.toTransformString(),\n        local: localString,\n        toString: propString\n      };\n    }\n\n    if (tstr instanceof Snap.Matrix) {\n      this.matrix = tstr;\n      this._.transform = tstr.toTransformString();\n    } else {\n      extractTransform(this, tstr);\n    }\n\n    if (this.node) {\n      if (this.type == \"linearGradient\" || this.type == \"radialGradient\") {\n        $(this.node, {\n          gradientTransform: this.matrix\n        });\n      } else if (this.type == \"pattern\") {\n        $(this.node, {\n          patternTransform: this.matrix\n        });\n      } else {\n        $(this.node, {\n          transform: this.matrix\n        });\n      }\n    }\n\n    return this;\n  };\n  /*\\\n   * Element.parent\n   [ method ]\n   **\n   * Returns the element's parent\n   **\n   = (Element) the parent element\n  \\*/\n\n\n  elproto.parent = function () {\n    return wrap(this.node.parentNode);\n  };\n  /*\\\n   * Element.append\n   [ method ]\n   **\n   * Appends the given element to current one\n   **\n   - el (Element|Set) element to append\n   = (Element) the parent element\n  \\*/\n\n  /*\\\n   * Element.add\n   [ method ]\n   **\n   * See @Element.append\n  \\*/\n\n\n  elproto.append = elproto.add = function (el) {\n    if (el) {\n      if (el.type == \"set\") {\n        var it = this;\n        el.forEach(function (el) {\n          it.add(el);\n        });\n        return this;\n      }\n\n      el = wrap(el);\n      this.node.appendChild(el.node);\n      el.paper = this.paper;\n    }\n\n    return this;\n  };\n  /*\\\n   * Element.appendTo\n   [ method ]\n   **\n   * Appends the current element to the given one\n   **\n   - el (Element) parent element to append to\n   = (Element) the child element\n  \\*/\n\n\n  elproto.appendTo = function (el) {\n    if (el) {\n      el = wrap(el);\n      el.append(this);\n    }\n\n    return this;\n  };\n  /*\\\n   * Element.prepend\n   [ method ]\n   **\n   * Prepends the given element to the current one\n   **\n   - el (Element) element to prepend\n   = (Element) the parent element\n  \\*/\n\n\n  elproto.prepend = function (el) {\n    if (el) {\n      if (el.type == \"set\") {\n        var it = this,\n            first;\n        el.forEach(function (el) {\n          if (first) {\n            first.after(el);\n          } else {\n            it.prepend(el);\n          }\n\n          first = el;\n        });\n        return this;\n      }\n\n      el = wrap(el);\n      var parent = el.parent();\n      this.node.insertBefore(el.node, this.node.firstChild);\n      this.add && this.add();\n      el.paper = this.paper;\n      this.parent() && this.parent().add();\n      parent && parent.add();\n    }\n\n    return this;\n  };\n  /*\\\n   * Element.prependTo\n   [ method ]\n   **\n   * Prepends the current element to the given one\n   **\n   - el (Element) parent element to prepend to\n   = (Element) the child element\n  \\*/\n\n\n  elproto.prependTo = function (el) {\n    el = wrap(el);\n    el.prepend(this);\n    return this;\n  };\n  /*\\\n   * Element.before\n   [ method ]\n   **\n   * Inserts given element before the current one\n   **\n   - el (Element) element to insert\n   = (Element) the parent element\n  \\*/\n\n\n  elproto.before = function (el) {\n    if (el.type == \"set\") {\n      var it = this;\n      el.forEach(function (el) {\n        var parent = el.parent();\n        it.node.parentNode.insertBefore(el.node, it.node);\n        parent && parent.add();\n      });\n      this.parent().add();\n      return this;\n    }\n\n    el = wrap(el);\n    var parent = el.parent();\n    this.node.parentNode.insertBefore(el.node, this.node);\n    this.parent() && this.parent().add();\n    parent && parent.add();\n    el.paper = this.paper;\n    return this;\n  };\n  /*\\\n   * Element.after\n   [ method ]\n   **\n   * Inserts given element after the current one\n   **\n   - el (Element) element to insert\n   = (Element) the parent element\n  \\*/\n\n\n  elproto.after = function (el) {\n    el = wrap(el);\n    var parent = el.parent();\n\n    if (this.node.nextSibling) {\n      this.node.parentNode.insertBefore(el.node, this.node.nextSibling);\n    } else {\n      this.node.parentNode.appendChild(el.node);\n    }\n\n    this.parent() && this.parent().add();\n    parent && parent.add();\n    el.paper = this.paper;\n    return this;\n  };\n  /*\\\n   * Element.insertBefore\n   [ method ]\n   **\n   * Inserts the element after the given one\n   **\n   - el (Element) element next to whom insert to\n   = (Element) the parent element\n  \\*/\n\n\n  elproto.insertBefore = function (el) {\n    el = wrap(el);\n    var parent = this.parent();\n    el.node.parentNode.insertBefore(this.node, el.node);\n    this.paper = el.paper;\n    parent && parent.add();\n    el.parent() && el.parent().add();\n    return this;\n  };\n  /*\\\n   * Element.insertAfter\n   [ method ]\n   **\n   * Inserts the element after the given one\n   **\n   - el (Element) element next to whom insert to\n   = (Element) the parent element\n  \\*/\n\n\n  elproto.insertAfter = function (el) {\n    el = wrap(el);\n    var parent = this.parent();\n    el.node.parentNode.insertBefore(this.node, el.node.nextSibling);\n    this.paper = el.paper;\n    parent && parent.add();\n    el.parent() && el.parent().add();\n    return this;\n  };\n  /*\\\n   * Element.remove\n   [ method ]\n   **\n   * Removes element from the DOM\n   = (Element) the detached element\n  \\*/\n\n\n  elproto.remove = function () {\n    var parent = this.parent();\n    this.node.parentNode && this.node.parentNode.removeChild(this.node);\n    delete this.paper;\n    this.removed = true;\n    parent && parent.add();\n    return this;\n  };\n  /*\\\n   * Element.select\n   [ method ]\n   **\n   * Gathers the nested @Element matching the given set of CSS selectors\n   **\n   - query (string) CSS selector\n   = (Element) result of query selection\n  \\*/\n\n\n  elproto.select = function (query) {\n    return wrap(this.node.querySelector(query));\n  };\n  /*\\\n   * Element.selectAll\n   [ method ]\n   **\n   * Gathers nested @Element objects matching the given set of CSS selectors\n   **\n   - query (string) CSS selector\n   = (Set|array) result of query selection\n  \\*/\n\n\n  elproto.selectAll = function (query) {\n    var nodelist = this.node.querySelectorAll(query),\n        set = (Snap.set || Array)();\n\n    for (var i = 0; i < nodelist.length; i++) {\n      set.push(wrap(nodelist[i]));\n    }\n\n    return set;\n  };\n  /*\\\n   * Element.asPX\n   [ method ]\n   **\n   * Returns given attribute of the element as a `px` value (not %, em, etc.)\n   **\n   - attr (string) attribute name\n   - value (string) #optional attribute value\n   = (Element) result of query selection\n  \\*/\n\n\n  elproto.asPX = function (attr, value) {\n    if (value == null) {\n      value = this.attr(attr);\n    }\n\n    return +unit2px(this, attr, value);\n  }; // SIERRA Element.use(): I suggest adding a note about how to access the original element the returned <use> instantiates. It's a part of SVG with which ordinary web developers may be least familiar.\n\n  /*\\\n   * Element.use\n   [ method ]\n   **\n   * Creates a `<use>` element linked to the current element\n   **\n   = (Element) the `<use>` element\n  \\*/\n\n\n  elproto.use = function () {\n    var use,\n        id = this.node.id;\n\n    if (!id) {\n      id = this.id;\n      $(this.node, {\n        id: id\n      });\n    }\n\n    if (this.type == \"linearGradient\" || this.type == \"radialGradient\" || this.type == \"pattern\") {\n      use = make(this.type, this.node.parentNode);\n    } else {\n      use = make(\"use\", this.node.parentNode);\n    }\n\n    $(use.node, {\n      \"xlink:href\": \"#\" + id\n    });\n    use.original = this;\n    return use;\n  };\n\n  function fixids(el) {\n    var els = el.selectAll(\"*\"),\n        it,\n        url = /^\\s*url\\((\"|'|)(.*)\\1\\)\\s*$/,\n        ids = [],\n        uses = {};\n\n    function urltest(it, name) {\n      var val = $(it.node, name);\n      val = val && val.match(url);\n      val = val && val[2];\n\n      if (val && val.charAt() == \"#\") {\n        val = val.substring(1);\n      } else {\n        return;\n      }\n\n      if (val) {\n        uses[val] = (uses[val] || []).concat(function (id) {\n          var attr = {};\n          attr[name] = Snap.url(id);\n          $(it.node, attr);\n        });\n      }\n    }\n\n    function linktest(it) {\n      var val = $(it.node, \"xlink:href\");\n\n      if (val && val.charAt() == \"#\") {\n        val = val.substring(1);\n      } else {\n        return;\n      }\n\n      if (val) {\n        uses[val] = (uses[val] || []).concat(function (id) {\n          it.attr(\"xlink:href\", \"#\" + id);\n        });\n      }\n    }\n\n    for (var i = 0, ii = els.length; i < ii; i++) {\n      it = els[i];\n      urltest(it, \"fill\");\n      urltest(it, \"stroke\");\n      urltest(it, \"filter\");\n      urltest(it, \"mask\");\n      urltest(it, \"clip-path\");\n      linktest(it);\n      var oldid = $(it.node, \"id\");\n\n      if (oldid) {\n        $(it.node, {\n          id: it.id\n        });\n        ids.push({\n          old: oldid,\n          id: it.id\n        });\n      }\n    }\n\n    for (i = 0, ii = ids.length; i < ii; i++) {\n      var fs = uses[ids[i].old];\n\n      if (fs) {\n        for (var j = 0, jj = fs.length; j < jj; j++) {\n          fs[j](ids[i].id);\n        }\n      }\n    }\n  }\n  /*\\\n   * Element.clone\n   [ method ]\n   **\n   * Creates a clone of the element and inserts it after the element\n   **\n   = (Element) the clone\n  \\*/\n\n\n  elproto.clone = function () {\n    var clone = wrap(this.node.cloneNode(true));\n\n    if ($(clone.node, \"id\")) {\n      $(clone.node, {\n        id: clone.id\n      });\n    }\n\n    fixids(clone);\n    clone.insertAfter(this);\n    return clone;\n  };\n  /*\\\n   * Element.toDefs\n   [ method ]\n   **\n   * Moves element to the shared `<defs>` area\n   **\n   = (Element) the element\n  \\*/\n\n\n  elproto.toDefs = function () {\n    var defs = getSomeDefs(this);\n    defs.appendChild(this.node);\n    return this;\n  };\n  /*\\\n   * Element.toPattern\n   [ method ]\n   **\n   * Creates a `<pattern>` element from the current element\n   **\n   * To create a pattern you have to specify the pattern rect:\n   - x (string|number)\n   - y (string|number)\n   - width (string|number)\n   - height (string|number)\n   = (Element) the `<pattern>` element\n   * You can use pattern later on as an argument for `fill` attribute:\n   | var p = paper.path(\"M10-5-10,15M15,0,0,15M0-5-20,15\").attr({\n   |         fill: \"none\",\n   |         stroke: \"#bada55\",\n   |         strokeWidth: 5\n   |     }).pattern(0, 0, 10, 10),\n   |     c = paper.circle(200, 200, 100);\n   | c.attr({\n   |     fill: p\n   | });\n  \\*/\n\n\n  elproto.pattern = elproto.toPattern = function (x, y, width, height) {\n    var p = make(\"pattern\", getSomeDefs(this));\n\n    if (x == null) {\n      x = this.getBBox();\n    }\n\n    if (is(x, \"object\") && \"x\" in x) {\n      y = x.y;\n      width = x.width;\n      height = x.height;\n      x = x.x;\n    }\n\n    $(p.node, {\n      x: x,\n      y: y,\n      width: width,\n      height: height,\n      patternUnits: \"userSpaceOnUse\",\n      id: p.id,\n      viewBox: [x, y, width, height].join(\" \")\n    });\n    p.node.appendChild(this.node);\n    return p;\n  }; // SIERRA Element.marker(): clarify what a reference point is. E.g., helps you offset the object from its edge such as when centering it over a path.\n  // SIERRA Element.marker(): I suggest the method should accept default reference point values.  Perhaps centered with (refX = width/2) and (refY = height/2)? Also, couldn't it assume the element's current _width_ and _height_? And please specify what _x_ and _y_ mean: offsets? If so, from where?  Couldn't they also be assigned default values?\n\n  /*\\\n   * Element.marker\n   [ method ]\n   **\n   * Creates a `<marker>` element from the current element\n   **\n   * To create a marker you have to specify the bounding rect and reference point:\n   - x (number)\n   - y (number)\n   - width (number)\n   - height (number)\n   - refX (number)\n   - refY (number)\n   = (Element) the `<marker>` element\n   * You can specify the marker later as an argument for `marker-start`, `marker-end`, `marker-mid`, and `marker` attributes. The `marker` attribute places the marker at every point along the path, and `marker-mid` places them at every point except the start and end.\n  \\*/\n  // TODO add usage for markers\n\n\n  elproto.marker = function (x, y, width, height, refX, refY) {\n    var p = make(\"marker\", getSomeDefs(this));\n\n    if (x == null) {\n      x = this.getBBox();\n    }\n\n    if (is(x, \"object\") && \"x\" in x) {\n      y = x.y;\n      width = x.width;\n      height = x.height;\n      refX = x.refX || x.cx;\n      refY = x.refY || x.cy;\n      x = x.x;\n    }\n\n    $(p.node, {\n      viewBox: [x, y, width, height].join(\" \"),\n      markerWidth: width,\n      markerHeight: height,\n      orient: \"auto\",\n      refX: refX || 0,\n      refY: refY || 0,\n      id: p.id\n    });\n    p.node.appendChild(this.node);\n    return p;\n  };\n\n  var eldata = {};\n  /*\\\n   * Element.data\n   [ method ]\n   **\n   * Adds or retrieves given value associated with given key. (Don’t confuse\n   * with `data-` attributes)\n   *\n   * See also @Element.removeData\n   - key (string) key to store data\n   - value (any) #optional value to store\n   = (object) @Element\n   * or, if value is not specified:\n   = (any) value\n   > Usage\n   | for (var i = 0, i < 5, i++) {\n   |     paper.circle(10 + 15 * i, 10, 10)\n   |          .attr({fill: \"#000\"})\n   |          .data(\"i\", i)\n   |          .click(function () {\n   |             alert(this.data(\"i\"));\n   |          });\n   | }\n  \\*/\n\n  elproto.data = function (key, value) {\n    var data = eldata[this.id] = eldata[this.id] || {};\n\n    if (arguments.length == 0) {\n      eve(\"snap.data.get.\" + this.id, this, data, null);\n      return data;\n    }\n\n    if (arguments.length == 1) {\n      if (Snap.is(key, \"object\")) {\n        for (var i in key) {\n          if (key[has](i)) {\n            this.data(i, key[i]);\n          }\n        }\n\n        return this;\n      }\n\n      eve(\"snap.data.get.\" + this.id, this, data[key], key);\n      return data[key];\n    }\n\n    data[key] = value;\n    eve(\"snap.data.set.\" + this.id, this, value, key);\n    return this;\n  };\n  /*\\\n   * Element.removeData\n   [ method ]\n   **\n   * Removes value associated with an element by given key.\n   * If key is not provided, removes all the data of the element.\n   - key (string) #optional key\n   = (object) @Element\n  \\*/\n\n\n  elproto.removeData = function (key) {\n    if (key == null) {\n      eldata[this.id] = {};\n    } else {\n      eldata[this.id] && delete eldata[this.id][key];\n    }\n\n    return this;\n  };\n  /*\\\n   * Element.outerSVG\n   [ method ]\n   **\n   * Returns SVG code for the element, equivalent to HTML's `outerHTML`.\n   *\n   * See also @Element.innerSVG\n   = (string) SVG code for the element\n  \\*/\n\n  /*\\\n   * Element.toString\n   [ method ]\n   **\n   * See @Element.outerSVG\n  \\*/\n\n\n  elproto.outerSVG = elproto.toString = toString(1);\n  /*\\\n   * Element.innerSVG\n   [ method ]\n   **\n   * Returns SVG code for the element's contents, equivalent to HTML's `innerHTML`\n   = (string) SVG code for the element\n  \\*/\n\n  elproto.innerSVG = toString();\n\n  function toString(type) {\n    return function () {\n      var res = type ? \"<\" + this.type : \"\",\n          attr = this.node.attributes,\n          chld = this.node.childNodes;\n\n      if (type) {\n        for (var i = 0, ii = attr.length; i < ii; i++) {\n          res += \" \" + attr[i].name + '=\"' + attr[i].value.replace(/\"/g, '\\\\\"') + '\"';\n        }\n      }\n\n      if (chld.length) {\n        type && (res += \">\");\n\n        for (i = 0, ii = chld.length; i < ii; i++) {\n          if (chld[i].nodeType == 3) {\n            res += chld[i].nodeValue;\n          } else if (chld[i].nodeType == 1) {\n            res += wrap(chld[i]).toString();\n          }\n        }\n\n        type && (res += \"</\" + this.type + \">\");\n      } else {\n        type && (res += \"/>\");\n      }\n\n      return res;\n    };\n  }\n\n  elproto.toDataURL = function () {\n    if (window && window.btoa) {\n      var bb = this.getBBox(),\n          svg = Snap.format('<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"{width}\" height=\"{height}\" viewBox=\"{x} {y} {width} {height}\">{contents}</svg>', {\n        x: +bb.x.toFixed(3),\n        y: +bb.y.toFixed(3),\n        width: +bb.width.toFixed(3),\n        height: +bb.height.toFixed(3),\n        contents: this.outerSVG()\n      });\n      return \"data:image/svg+xml;base64,\" + btoa(unescape(encodeURIComponent(svg)));\n    }\n  };\n  /*\\\n   * Fragment.select\n   [ method ]\n   **\n   * See @Element.select\n  \\*/\n\n\n  Fragment.prototype.select = elproto.select;\n  /*\\\n   * Fragment.selectAll\n   [ method ]\n   **\n   * See @Element.selectAll\n  \\*/\n\n  Fragment.prototype.selectAll = elproto.selectAll;\n}); // Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n  var objectToString = Object.prototype.toString,\n      Str = String,\n      math = Math,\n      E = \"\";\n\n  function Matrix(a, b, c, d, e, f) {\n    if (b == null && objectToString.call(a) == \"[object SVGMatrix]\") {\n      this.a = a.a;\n      this.b = a.b;\n      this.c = a.c;\n      this.d = a.d;\n      this.e = a.e;\n      this.f = a.f;\n      return;\n    }\n\n    if (a != null) {\n      this.a = +a;\n      this.b = +b;\n      this.c = +c;\n      this.d = +d;\n      this.e = +e;\n      this.f = +f;\n    } else {\n      this.a = 1;\n      this.b = 0;\n      this.c = 0;\n      this.d = 1;\n      this.e = 0;\n      this.f = 0;\n    }\n  }\n\n  (function (matrixproto) {\n    /*\\\n     * Matrix.add\n     [ method ]\n     **\n     * Adds the given matrix to existing one\n     - a (number)\n     - b (number)\n     - c (number)\n     - d (number)\n     - e (number)\n     - f (number)\n     * or\n     - matrix (object) @Matrix\n    \\*/\n    matrixproto.add = function (a, b, c, d, e, f) {\n      if (a && a instanceof Matrix) {\n        return this.add(a.a, a.b, a.c, a.d, a.e, a.f);\n      }\n\n      var aNew = a * this.a + b * this.c,\n          bNew = a * this.b + b * this.d;\n      this.e += e * this.a + f * this.c;\n      this.f += e * this.b + f * this.d;\n      this.c = c * this.a + d * this.c;\n      this.d = c * this.b + d * this.d;\n      this.a = aNew;\n      this.b = bNew;\n      return this;\n    };\n    /*\\\n     * Matrix.multLeft\n     [ method ]\n     **\n     * Multiplies a passed affine transform to the left: M * this.\n     - a (number)\n     - b (number)\n     - c (number)\n     - d (number)\n     - e (number)\n     - f (number)\n     * or\n     - matrix (object) @Matrix\n    \\*/\n\n\n    Matrix.prototype.multLeft = function (a, b, c, d, e, f) {\n      if (a && a instanceof Matrix) {\n        return this.multLeft(a.a, a.b, a.c, a.d, a.e, a.f);\n      }\n\n      var aNew = a * this.a + c * this.b,\n          cNew = a * this.c + c * this.d,\n          eNew = a * this.e + c * this.f + e;\n      this.b = b * this.a + d * this.b;\n      this.d = b * this.c + d * this.d;\n      this.f = b * this.e + d * this.f + f;\n      this.a = aNew;\n      this.c = cNew;\n      this.e = eNew;\n      return this;\n    };\n    /*\\\n     * Matrix.invert\n     [ method ]\n     **\n     * Returns an inverted version of the matrix\n     = (object) @Matrix\n    \\*/\n\n\n    matrixproto.invert = function () {\n      var me = this,\n          x = me.a * me.d - me.b * me.c;\n      return new Matrix(me.d / x, -me.b / x, -me.c / x, me.a / x, (me.c * me.f - me.d * me.e) / x, (me.b * me.e - me.a * me.f) / x);\n    };\n    /*\\\n     * Matrix.clone\n     [ method ]\n     **\n     * Returns a copy of the matrix\n     = (object) @Matrix\n    \\*/\n\n\n    matrixproto.clone = function () {\n      return new Matrix(this.a, this.b, this.c, this.d, this.e, this.f);\n    };\n    /*\\\n     * Matrix.translate\n     [ method ]\n     **\n     * Translate the matrix\n     - x (number) horizontal offset distance\n     - y (number) vertical offset distance\n    \\*/\n\n\n    matrixproto.translate = function (x, y) {\n      this.e += x * this.a + y * this.c;\n      this.f += x * this.b + y * this.d;\n      return this;\n    };\n    /*\\\n     * Matrix.scale\n     [ method ]\n     **\n     * Scales the matrix\n     - x (number) amount to be scaled, with `1` resulting in no change\n     - y (number) #optional amount to scale along the vertical axis. (Otherwise `x` applies to both axes.)\n     - cx (number) #optional horizontal origin point from which to scale\n     - cy (number) #optional vertical origin point from which to scale\n     * Default cx, cy is the middle point of the element.\n    \\*/\n\n\n    matrixproto.scale = function (x, y, cx, cy) {\n      y == null && (y = x);\n      (cx || cy) && this.translate(cx, cy);\n      this.a *= x;\n      this.b *= x;\n      this.c *= y;\n      this.d *= y;\n      (cx || cy) && this.translate(-cx, -cy);\n      return this;\n    };\n    /*\\\n     * Matrix.rotate\n     [ method ]\n     **\n     * Rotates the matrix\n     - a (number) angle of rotation, in degrees\n     - x (number) horizontal origin point from which to rotate\n     - y (number) vertical origin point from which to rotate\n    \\*/\n\n\n    matrixproto.rotate = function (a, x, y) {\n      a = Snap.rad(a);\n      x = x || 0;\n      y = y || 0;\n      var cos = +math.cos(a).toFixed(9),\n          sin = +math.sin(a).toFixed(9);\n      this.add(cos, sin, -sin, cos, x, y);\n      return this.add(1, 0, 0, 1, -x, -y);\n    };\n    /*\\\n     * Matrix.skewX\n     [ method ]\n     **\n     * Skews the matrix along the x-axis\n     - x (number) Angle to skew along the x-axis (in degrees).\n    \\*/\n\n\n    matrixproto.skewX = function (x) {\n      return this.skew(x, 0);\n    };\n    /*\\\n     * Matrix.skewY\n     [ method ]\n     **\n     * Skews the matrix along the y-axis\n     - y (number) Angle to skew along the y-axis (in degrees).\n    \\*/\n\n\n    matrixproto.skewY = function (y) {\n      return this.skew(0, y);\n    };\n    /*\\\n     * Matrix.skew\n     [ method ]\n     **\n     * Skews the matrix\n     - y (number) Angle to skew along the y-axis (in degrees).\n     - x (number) Angle to skew along the x-axis (in degrees).\n    \\*/\n\n\n    matrixproto.skew = function (x, y) {\n      x = x || 0;\n      y = y || 0;\n      x = Snap.rad(x);\n      y = Snap.rad(y);\n      var c = math.tan(x).toFixed(9);\n      var b = math.tan(y).toFixed(9);\n      return this.add(1, b, c, 1, 0, 0);\n    };\n    /*\\\n     * Matrix.x\n     [ method ]\n     **\n     * Returns x coordinate for given point after transformation described by the matrix. See also @Matrix.y\n     - x (number)\n     - y (number)\n     = (number) x\n    \\*/\n\n\n    matrixproto.x = function (x, y) {\n      return x * this.a + y * this.c + this.e;\n    };\n    /*\\\n     * Matrix.y\n     [ method ]\n     **\n     * Returns y coordinate for given point after transformation described by the matrix. See also @Matrix.x\n     - x (number)\n     - y (number)\n     = (number) y\n    \\*/\n\n\n    matrixproto.y = function (x, y) {\n      return x * this.b + y * this.d + this.f;\n    };\n\n    matrixproto.get = function (i) {\n      return +this[Str.fromCharCode(97 + i)].toFixed(4);\n    };\n\n    matrixproto.toString = function () {\n      return \"matrix(\" + [this.get(0), this.get(1), this.get(2), this.get(3), this.get(4), this.get(5)].join() + \")\";\n    };\n\n    matrixproto.offset = function () {\n      return [this.e.toFixed(4), this.f.toFixed(4)];\n    };\n\n    function norm(a) {\n      return a[0] * a[0] + a[1] * a[1];\n    }\n\n    function normalize(a) {\n      var mag = math.sqrt(norm(a));\n      a[0] && (a[0] /= mag);\n      a[1] && (a[1] /= mag);\n    }\n    /*\\\n     * Matrix.determinant\n     [ method ]\n     **\n     * Finds determinant of the given matrix.\n     = (number) determinant\n    \\*/\n\n\n    matrixproto.determinant = function () {\n      return this.a * this.d - this.b * this.c;\n    };\n    /*\\\n     * Matrix.split\n     [ method ]\n     **\n     * Splits matrix into primitive transformations\n     = (object) in format:\n     o dx (number) translation by x\n     o dy (number) translation by y\n     o scalex (number) scale by x\n     o scaley (number) scale by y\n     o shear (number) shear\n     o rotate (number) rotation in deg\n     o isSimple (boolean) could it be represented via simple transformations\n    \\*/\n\n\n    matrixproto.split = function () {\n      var out = {}; // translation\n\n      out.dx = this.e;\n      out.dy = this.f; // scale and shear\n\n      var row = [[this.a, this.b], [this.c, this.d]];\n      out.scalex = math.sqrt(norm(row[0]));\n      normalize(row[0]);\n      out.shear = row[0][0] * row[1][0] + row[0][1] * row[1][1];\n      row[1] = [row[1][0] - row[0][0] * out.shear, row[1][1] - row[0][1] * out.shear];\n      out.scaley = math.sqrt(norm(row[1]));\n      normalize(row[1]);\n      out.shear /= out.scaley;\n\n      if (this.determinant() < 0) {\n        out.scalex = -out.scalex;\n      } // rotation\n\n\n      var sin = row[0][1],\n          cos = row[1][1];\n\n      if (cos < 0) {\n        out.rotate = Snap.deg(math.acos(cos));\n\n        if (sin < 0) {\n          out.rotate = 360 - out.rotate;\n        }\n      } else {\n        out.rotate = Snap.deg(math.asin(sin));\n      }\n\n      out.isSimple = !+out.shear.toFixed(9) && (out.scalex.toFixed(9) == out.scaley.toFixed(9) || !out.rotate);\n      out.isSuperSimple = !+out.shear.toFixed(9) && out.scalex.toFixed(9) == out.scaley.toFixed(9) && !out.rotate;\n      out.noRotation = !+out.shear.toFixed(9) && !out.rotate;\n      return out;\n    };\n    /*\\\n     * Matrix.toTransformString\n     [ method ]\n     **\n     * Returns transform string that represents given matrix\n     = (string) transform string\n    \\*/\n\n\n    matrixproto.toTransformString = function (shorter) {\n      var s = shorter || this.split();\n\n      if (!+s.shear.toFixed(9)) {\n        s.scalex = +s.scalex.toFixed(4);\n        s.scaley = +s.scaley.toFixed(4);\n        s.rotate = +s.rotate.toFixed(4);\n        return (s.dx || s.dy ? \"t\" + [+s.dx.toFixed(4), +s.dy.toFixed(4)] : E) + (s.rotate ? \"r\" + [+s.rotate.toFixed(4), 0, 0] : E) + (s.scalex != 1 || s.scaley != 1 ? \"s\" + [s.scalex, s.scaley, 0, 0] : E);\n      } else {\n        return \"m\" + [this.get(0), this.get(1), this.get(2), this.get(3), this.get(4), this.get(5)];\n      }\n    };\n  })(Matrix.prototype);\n  /*\\\n   * Snap.Matrix\n   [ method ]\n   **\n   * Matrix constructor, extend on your own risk.\n   * To create matrices use @Snap.matrix.\n  \\*/\n\n\n  Snap.Matrix = Matrix;\n  /*\\\n   * Snap.matrix\n   [ method ]\n   **\n   * Utility method\n   **\n   * Returns a matrix based on the given parameters\n   - a (number)\n   - b (number)\n   - c (number)\n   - d (number)\n   - e (number)\n   - f (number)\n   * or\n   - svgMatrix (SVGMatrix)\n   = (object) @Matrix\n  \\*/\n\n  Snap.matrix = function (a, b, c, d, e, f) {\n    return new Matrix(a, b, c, d, e, f);\n  };\n}); // Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n  var has = \"hasOwnProperty\",\n      make = Snap._.make,\n      wrap = Snap._.wrap,\n      is = Snap.is,\n      getSomeDefs = Snap._.getSomeDefs,\n      reURLValue = /^url\\((['\"]?)([^)]+)\\1\\)$/,\n      $ = Snap._.$,\n      URL = Snap.url,\n      Str = String,\n      separator = Snap._.separator,\n      E = \"\";\n  /*\\\n   * Snap.deurl\n   [ method ]\n   **\n   * Unwraps path from `\"url(<path>)\"`.\n   - value (string) url path\n   = (string) unwrapped path\n  \\*/\n\n  Snap.deurl = function (value) {\n    var res = String(value).match(reURLValue);\n    return res ? res[2] : value;\n  }; // Attributes event handlers\n\n\n  eve.on(\"snap.util.attr.mask\", function (value) {\n    if (value instanceof Element || value instanceof Fragment) {\n      eve.stop();\n\n      if (value instanceof Fragment && value.node.childNodes.length == 1) {\n        value = value.node.firstChild;\n        getSomeDefs(this).appendChild(value);\n        value = wrap(value);\n      }\n\n      if (value.type == \"mask\") {\n        var mask = value;\n      } else {\n        mask = make(\"mask\", getSomeDefs(this));\n        mask.node.appendChild(value.node);\n      }\n\n      !mask.node.id && $(mask.node, {\n        id: mask.id\n      });\n      $(this.node, {\n        mask: URL(mask.id)\n      });\n    }\n  });\n\n  (function (clipIt) {\n    eve.on(\"snap.util.attr.clip\", clipIt);\n    eve.on(\"snap.util.attr.clip-path\", clipIt);\n    eve.on(\"snap.util.attr.clipPath\", clipIt);\n  })(function (value) {\n    if (value instanceof Element || value instanceof Fragment) {\n      eve.stop();\n      var clip,\n          node = value.node;\n\n      while (node) {\n        if (node.nodeName === \"clipPath\") {\n          clip = new Element(node);\n          break;\n        }\n\n        if (node.nodeName === \"svg\") {\n          clip = undefined;\n          break;\n        }\n\n        node = node.parentNode;\n      }\n\n      if (!clip) {\n        clip = make(\"clipPath\", getSomeDefs(this));\n        clip.node.appendChild(value.node);\n        !clip.node.id && $(clip.node, {\n          id: clip.id\n        });\n      }\n\n      $(this.node, {\n        \"clip-path\": URL(clip.node.id || clip.id)\n      });\n    }\n  });\n\n  function fillStroke(name) {\n    return function (value) {\n      eve.stop();\n\n      if (value instanceof Fragment && value.node.childNodes.length == 1 && (value.node.firstChild.tagName == \"radialGradient\" || value.node.firstChild.tagName == \"linearGradient\" || value.node.firstChild.tagName == \"pattern\")) {\n        value = value.node.firstChild;\n        getSomeDefs(this).appendChild(value);\n        value = wrap(value);\n      }\n\n      if (value instanceof Element) {\n        if (value.type == \"radialGradient\" || value.type == \"linearGradient\" || value.type == \"pattern\") {\n          if (!value.node.id) {\n            $(value.node, {\n              id: value.id\n            });\n          }\n\n          var fill = URL(value.node.id);\n        } else {\n          fill = value.attr(name);\n        }\n      } else {\n        fill = Snap.color(value);\n\n        if (fill.error) {\n          var grad = Snap(getSomeDefs(this).ownerSVGElement).gradient(value);\n\n          if (grad) {\n            if (!grad.node.id) {\n              $(grad.node, {\n                id: grad.id\n              });\n            }\n\n            fill = URL(grad.node.id);\n          } else {\n            fill = value;\n          }\n        } else {\n          fill = Str(fill);\n        }\n      }\n\n      var attrs = {};\n      attrs[name] = fill;\n      $(this.node, attrs);\n      this.node.style[name] = E;\n    };\n  }\n\n  eve.on(\"snap.util.attr.fill\", fillStroke(\"fill\"));\n  eve.on(\"snap.util.attr.stroke\", fillStroke(\"stroke\"));\n  var gradrg = /^([lr])(?:\\(([^)]*)\\))?(.*)$/i;\n  eve.on(\"snap.util.grad.parse\", function parseGrad(string) {\n    string = Str(string);\n    var tokens = string.match(gradrg);\n\n    if (!tokens) {\n      return null;\n    }\n\n    var type = tokens[1],\n        params = tokens[2],\n        stops = tokens[3];\n    params = params.split(/\\s*,\\s*/).map(function (el) {\n      return +el == el ? +el : el;\n    });\n\n    if (params.length == 1 && params[0] == 0) {\n      params = [];\n    }\n\n    stops = stops.split(\"-\");\n    stops = stops.map(function (el) {\n      el = el.split(\":\");\n      var out = {\n        color: el[0]\n      };\n\n      if (el[1]) {\n        out.offset = parseFloat(el[1]);\n      }\n\n      return out;\n    });\n    var len = stops.length,\n        start = 0,\n        j = 0;\n\n    function seed(i, end) {\n      var step = (end - start) / (i - j);\n\n      for (var k = j; k < i; k++) {\n        stops[k].offset = +(+start + step * (k - j)).toFixed(2);\n      }\n\n      j = i;\n      start = end;\n    }\n\n    len--;\n\n    for (var i = 0; i < len; i++) {\n      if (\"offset\" in stops[i]) {\n        seed(i, stops[i].offset);\n      }\n    }\n\n    stops[len].offset = stops[len].offset || 100;\n    seed(len, stops[len].offset);\n    return {\n      type: type,\n      params: params,\n      stops: stops\n    };\n  });\n  eve.on(\"snap.util.attr.d\", function (value) {\n    eve.stop();\n\n    if (is(value, \"array\") && is(value[0], \"array\")) {\n      value = Snap.path.toString.call(value);\n    }\n\n    value = Str(value);\n\n    if (value.match(/[ruo]/i)) {\n      value = Snap.path.toAbsolute(value);\n    }\n\n    $(this.node, {\n      d: value\n    });\n  })(-1);\n  eve.on(\"snap.util.attr.#text\", function (value) {\n    eve.stop();\n    value = Str(value);\n    var txt = glob.doc.createTextNode(value);\n\n    while (this.node.firstChild) {\n      this.node.removeChild(this.node.firstChild);\n    }\n\n    this.node.appendChild(txt);\n  })(-1);\n  eve.on(\"snap.util.attr.path\", function (value) {\n    eve.stop();\n    this.attr({\n      d: value\n    });\n  })(-1);\n  eve.on(\"snap.util.attr.class\", function (value) {\n    eve.stop();\n    this.node.className.baseVal = value;\n  })(-1);\n  eve.on(\"snap.util.attr.viewBox\", function (value) {\n    var vb;\n\n    if (is(value, \"object\") && \"x\" in value) {\n      vb = [value.x, value.y, value.width, value.height].join(\" \");\n    } else if (is(value, \"array\")) {\n      vb = value.join(\" \");\n    } else {\n      vb = value;\n    }\n\n    $(this.node, {\n      viewBox: vb\n    });\n    eve.stop();\n  })(-1);\n  eve.on(\"snap.util.attr.transform\", function (value) {\n    this.transform(value);\n    eve.stop();\n  })(-1);\n  eve.on(\"snap.util.attr.r\", function (value) {\n    if (this.type == \"rect\") {\n      eve.stop();\n      $(this.node, {\n        rx: value,\n        ry: value\n      });\n    }\n  })(-1);\n  eve.on(\"snap.util.attr.textpath\", function (value) {\n    eve.stop();\n\n    if (this.type == \"text\") {\n      var id, tp, node;\n\n      if (!value && this.textPath) {\n        tp = this.textPath;\n\n        while (tp.node.firstChild) {\n          this.node.appendChild(tp.node.firstChild);\n        }\n\n        tp.remove();\n        delete this.textPath;\n        return;\n      }\n\n      if (is(value, \"string\")) {\n        var defs = getSomeDefs(this),\n            path = wrap(defs.parentNode).path(value);\n        defs.appendChild(path.node);\n        id = path.id;\n        path.attr({\n          id: id\n        });\n      } else {\n        value = wrap(value);\n\n        if (value instanceof Element) {\n          id = value.attr(\"id\");\n\n          if (!id) {\n            id = value.id;\n            value.attr({\n              id: id\n            });\n          }\n        }\n      }\n\n      if (id) {\n        tp = this.textPath;\n        node = this.node;\n\n        if (tp) {\n          tp.attr({\n            \"xlink:href\": \"#\" + id\n          });\n        } else {\n          tp = $(\"textPath\", {\n            \"xlink:href\": \"#\" + id\n          });\n\n          while (node.firstChild) {\n            tp.appendChild(node.firstChild);\n          }\n\n          node.appendChild(tp);\n          this.textPath = wrap(tp);\n        }\n      }\n    }\n  })(-1);\n  eve.on(\"snap.util.attr.text\", function (value) {\n    if (this.type == \"text\") {\n      var i = 0,\n          node = this.node,\n          tuner = function tuner(chunk) {\n        var out = $(\"tspan\");\n\n        if (is(chunk, \"array\")) {\n          for (var i = 0; i < chunk.length; i++) {\n            out.appendChild(tuner(chunk[i]));\n          }\n        } else {\n          out.appendChild(glob.doc.createTextNode(chunk));\n        }\n\n        out.normalize && out.normalize();\n        return out;\n      };\n\n      while (node.firstChild) {\n        node.removeChild(node.firstChild);\n      }\n\n      var tuned = tuner(value);\n\n      while (tuned.firstChild) {\n        node.appendChild(tuned.firstChild);\n      }\n    }\n\n    eve.stop();\n  })(-1);\n\n  function setFontSize(value) {\n    eve.stop();\n\n    if (value == +value) {\n      value += \"px\";\n    }\n\n    this.node.style.fontSize = value;\n  }\n\n  eve.on(\"snap.util.attr.fontSize\", setFontSize)(-1);\n  eve.on(\"snap.util.attr.font-size\", setFontSize)(-1);\n  eve.on(\"snap.util.getattr.transform\", function () {\n    eve.stop();\n    return this.transform();\n  })(-1);\n  eve.on(\"snap.util.getattr.textpath\", function () {\n    eve.stop();\n    return this.textPath;\n  })(-1); // Markers\n\n  (function () {\n    function getter(end) {\n      return function () {\n        eve.stop();\n        var style = glob.doc.defaultView.getComputedStyle(this.node, null).getPropertyValue(\"marker-\" + end);\n\n        if (style == \"none\") {\n          return style;\n        } else {\n          return Snap(glob.doc.getElementById(style.match(reURLValue)[1]));\n        }\n      };\n    }\n\n    function setter(end) {\n      return function (value) {\n        eve.stop();\n        var name = \"marker\" + end.charAt(0).toUpperCase() + end.substring(1);\n\n        if (value == \"\" || !value) {\n          this.node.style[name] = \"none\";\n          return;\n        }\n\n        if (value.type == \"marker\") {\n          var id = value.node.id;\n\n          if (!id) {\n            $(value.node, {\n              id: value.id\n            });\n          }\n\n          this.node.style[name] = URL(id);\n          return;\n        }\n      };\n    }\n\n    eve.on(\"snap.util.getattr.marker-end\", getter(\"end\"))(-1);\n    eve.on(\"snap.util.getattr.markerEnd\", getter(\"end\"))(-1);\n    eve.on(\"snap.util.getattr.marker-start\", getter(\"start\"))(-1);\n    eve.on(\"snap.util.getattr.markerStart\", getter(\"start\"))(-1);\n    eve.on(\"snap.util.getattr.marker-mid\", getter(\"mid\"))(-1);\n    eve.on(\"snap.util.getattr.markerMid\", getter(\"mid\"))(-1);\n    eve.on(\"snap.util.attr.marker-end\", setter(\"end\"))(-1);\n    eve.on(\"snap.util.attr.markerEnd\", setter(\"end\"))(-1);\n    eve.on(\"snap.util.attr.marker-start\", setter(\"start\"))(-1);\n    eve.on(\"snap.util.attr.markerStart\", setter(\"start\"))(-1);\n    eve.on(\"snap.util.attr.marker-mid\", setter(\"mid\"))(-1);\n    eve.on(\"snap.util.attr.markerMid\", setter(\"mid\"))(-1);\n  })();\n\n  eve.on(\"snap.util.getattr.r\", function () {\n    if (this.type == \"rect\" && $(this.node, \"rx\") == $(this.node, \"ry\")) {\n      eve.stop();\n      return $(this.node, \"rx\");\n    }\n  })(-1);\n\n  function textExtract(node) {\n    var out = [];\n    var children = node.childNodes;\n\n    for (var i = 0, ii = children.length; i < ii; i++) {\n      var chi = children[i];\n\n      if (chi.nodeType == 3) {\n        out.push(chi.nodeValue);\n      }\n\n      if (chi.tagName == \"tspan\") {\n        if (chi.childNodes.length == 1 && chi.firstChild.nodeType == 3) {\n          out.push(chi.firstChild.nodeValue);\n        } else {\n          out.push(textExtract(chi));\n        }\n      }\n    }\n\n    return out;\n  }\n\n  eve.on(\"snap.util.getattr.text\", function () {\n    if (this.type == \"text\" || this.type == \"tspan\") {\n      eve.stop();\n      var out = textExtract(this.node);\n      return out.length == 1 ? out[0] : out;\n    }\n  })(-1);\n  eve.on(\"snap.util.getattr.#text\", function () {\n    return this.node.textContent;\n  })(-1);\n  eve.on(\"snap.util.getattr.fill\", function (internal) {\n    if (internal) {\n      return;\n    }\n\n    eve.stop();\n    var value = eve(\"snap.util.getattr.fill\", this, true).firstDefined();\n    return Snap(Snap.deurl(value)) || value;\n  })(-1);\n  eve.on(\"snap.util.getattr.stroke\", function (internal) {\n    if (internal) {\n      return;\n    }\n\n    eve.stop();\n    var value = eve(\"snap.util.getattr.stroke\", this, true).firstDefined();\n    return Snap(Snap.deurl(value)) || value;\n  })(-1);\n  eve.on(\"snap.util.getattr.viewBox\", function () {\n    eve.stop();\n    var vb = $(this.node, \"viewBox\");\n\n    if (vb) {\n      vb = vb.split(separator);\n      return Snap._.box(+vb[0], +vb[1], +vb[2], +vb[3]);\n    } else {\n      return;\n    }\n  })(-1);\n  eve.on(\"snap.util.getattr.points\", function () {\n    var p = $(this.node, \"points\");\n    eve.stop();\n\n    if (p) {\n      return p.split(separator);\n    } else {\n      return;\n    }\n  })(-1);\n  eve.on(\"snap.util.getattr.path\", function () {\n    var p = $(this.node, \"d\");\n    eve.stop();\n    return p;\n  })(-1);\n  eve.on(\"snap.util.getattr.class\", function () {\n    return this.node.className.baseVal;\n  })(-1);\n\n  function getFontSize() {\n    eve.stop();\n    return this.node.style.fontSize;\n  }\n\n  eve.on(\"snap.util.getattr.fontSize\", getFontSize)(-1);\n  eve.on(\"snap.util.getattr.font-size\", getFontSize)(-1);\n}); // Copyright (c) 2014 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n  var rgNotSpace = /\\S+/g,\n      rgBadSpace = /[\\t\\r\\n\\f]/g,\n      rgTrim = /(^\\s+|\\s+$)/g,\n      Str = String,\n      elproto = Element.prototype;\n  /*\\\n   * Element.addClass\n   [ method ]\n   **\n   * Adds given class name or list of class names to the element.\n   - value (string) class name or space separated list of class names\n   **\n   = (Element) original element.\n  \\*/\n\n  elproto.addClass = function (value) {\n    var classes = Str(value || \"\").match(rgNotSpace) || [],\n        elem = this.node,\n        className = elem.className.baseVal,\n        curClasses = className.match(rgNotSpace) || [],\n        j,\n        pos,\n        clazz,\n        finalValue;\n\n    if (classes.length) {\n      j = 0;\n\n      while (clazz = classes[j++]) {\n        pos = curClasses.indexOf(clazz);\n\n        if (!~pos) {\n          curClasses.push(clazz);\n        }\n      }\n\n      finalValue = curClasses.join(\" \");\n\n      if (className != finalValue) {\n        elem.className.baseVal = finalValue;\n      }\n    }\n\n    return this;\n  };\n  /*\\\n   * Element.removeClass\n   [ method ]\n   **\n   * Removes given class name or list of class names from the element.\n   - value (string) class name or space separated list of class names\n   **\n   = (Element) original element.\n  \\*/\n\n\n  elproto.removeClass = function (value) {\n    var classes = Str(value || \"\").match(rgNotSpace) || [],\n        elem = this.node,\n        className = elem.className.baseVal,\n        curClasses = className.match(rgNotSpace) || [],\n        j,\n        pos,\n        clazz,\n        finalValue;\n\n    if (curClasses.length) {\n      j = 0;\n\n      while (clazz = classes[j++]) {\n        pos = curClasses.indexOf(clazz);\n\n        if (~pos) {\n          curClasses.splice(pos, 1);\n        }\n      }\n\n      finalValue = curClasses.join(\" \");\n\n      if (className != finalValue) {\n        elem.className.baseVal = finalValue;\n      }\n    }\n\n    return this;\n  };\n  /*\\\n   * Element.hasClass\n   [ method ]\n   **\n   * Checks if the element has a given class name in the list of class names applied to it.\n   - value (string) class name\n   **\n   = (boolean) `true` if the element has given class\n  \\*/\n\n\n  elproto.hasClass = function (value) {\n    var elem = this.node,\n        className = elem.className.baseVal,\n        curClasses = className.match(rgNotSpace) || [];\n    return !!~curClasses.indexOf(value);\n  };\n  /*\\\n   * Element.toggleClass\n   [ method ]\n   **\n   * Add or remove one or more classes from the element, depending on either\n   * the class’s presence or the value of the `flag` argument.\n   - value (string) class name or space separated list of class names\n   - flag (boolean) value to determine whether the class should be added or removed\n   **\n   = (Element) original element.\n  \\*/\n\n\n  elproto.toggleClass = function (value, flag) {\n    if (flag != null) {\n      if (flag) {\n        return this.addClass(value);\n      } else {\n        return this.removeClass(value);\n      }\n    }\n\n    var classes = (value || \"\").match(rgNotSpace) || [],\n        elem = this.node,\n        className = elem.className.baseVal,\n        curClasses = className.match(rgNotSpace) || [],\n        j,\n        pos,\n        clazz,\n        finalValue;\n    j = 0;\n\n    while (clazz = classes[j++]) {\n      pos = curClasses.indexOf(clazz);\n\n      if (~pos) {\n        curClasses.splice(pos, 1);\n      } else {\n        curClasses.push(clazz);\n      }\n    }\n\n    finalValue = curClasses.join(\" \");\n\n    if (className != finalValue) {\n      elem.className.baseVal = finalValue;\n    }\n\n    return this;\n  };\n}); // Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n  var operators = {\n    \"+\": function _(x, y) {\n      return x + y;\n    },\n    \"-\": function _(x, y) {\n      return x - y;\n    },\n    \"/\": function _(x, y) {\n      return x / y;\n    },\n    \"*\": function _(x, y) {\n      return x * y;\n    }\n  },\n      Str = String,\n      reUnit = /[a-z]+$/i,\n      reAddon = /^\\s*([+\\-\\/*])\\s*=\\s*([\\d.eE+\\-]+)\\s*([^\\d\\s]+)?\\s*$/;\n\n  function getNumber(val) {\n    return val;\n  }\n\n  function getUnit(unit) {\n    return function (val) {\n      return +val.toFixed(3) + unit;\n    };\n  }\n\n  eve.on(\"snap.util.attr\", function (val) {\n    var plus = Str(val).match(reAddon);\n\n    if (plus) {\n      var evnt = eve.nt(),\n          name = evnt.substring(evnt.lastIndexOf(\".\") + 1),\n          a = this.attr(name),\n          atr = {};\n      eve.stop();\n      var unit = plus[3] || \"\",\n          aUnit = a.match(reUnit),\n          op = operators[plus[1]];\n\n      if (aUnit && aUnit == unit) {\n        val = op(parseFloat(a), +plus[2]);\n      } else {\n        a = this.asPX(name);\n        val = op(this.asPX(name), this.asPX(name, plus[2] + unit));\n      }\n\n      if (isNaN(a) || isNaN(val)) {\n        return;\n      }\n\n      atr[name] = val;\n      this.attr(atr);\n    }\n  })(-10);\n  eve.on(\"snap.util.equal\", function (name, b) {\n    var A,\n        B,\n        a = Str(this.attr(name) || \"\"),\n        el = this,\n        bplus = Str(b).match(reAddon);\n\n    if (bplus) {\n      eve.stop();\n      var unit = bplus[3] || \"\",\n          aUnit = a.match(reUnit),\n          op = operators[bplus[1]];\n\n      if (aUnit && aUnit == unit) {\n        return {\n          from: parseFloat(a),\n          to: op(parseFloat(a), +bplus[2]),\n          f: getUnit(aUnit)\n        };\n      } else {\n        a = this.asPX(name);\n        return {\n          from: a,\n          to: op(a, this.asPX(name, bplus[2] + unit)),\n          f: getNumber\n        };\n      }\n    }\n  })(-10);\n}); // Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n  var proto = Paper.prototype,\n      is = Snap.is;\n  /*\\\n   * Paper.rect\n   [ method ]\n   *\n   * Draws a rectangle\n   **\n   - x (number) x coordinate of the top left corner\n   - y (number) y coordinate of the top left corner\n   - width (number) width\n   - height (number) height\n   - rx (number) #optional horizontal radius for rounded corners, default is 0\n   - ry (number) #optional vertical radius for rounded corners, default is rx or 0\n   = (object) the `rect` element\n   **\n   > Usage\n   | // regular rectangle\n   | var c = paper.rect(10, 10, 50, 50);\n   | // rectangle with rounded corners\n   | var c = paper.rect(40, 40, 50, 50, 10);\n  \\*/\n\n  proto.rect = function (x, y, w, h, rx, ry) {\n    var attr;\n\n    if (ry == null) {\n      ry = rx;\n    }\n\n    if (is(x, \"object\") && x == \"[object Object]\") {\n      attr = x;\n    } else if (x != null) {\n      attr = {\n        x: x,\n        y: y,\n        width: w,\n        height: h\n      };\n\n      if (rx != null) {\n        attr.rx = rx;\n        attr.ry = ry;\n      }\n    }\n\n    return this.el(\"rect\", attr);\n  };\n  /*\\\n   * Paper.circle\n   [ method ]\n   **\n   * Draws a circle\n   **\n   - x (number) x coordinate of the centre\n   - y (number) y coordinate of the centre\n   - r (number) radius\n   = (object) the `circle` element\n   **\n   > Usage\n   | var c = paper.circle(50, 50, 40);\n  \\*/\n\n\n  proto.circle = function (cx, cy, r) {\n    var attr;\n\n    if (is(cx, \"object\") && cx == \"[object Object]\") {\n      attr = cx;\n    } else if (cx != null) {\n      attr = {\n        cx: cx,\n        cy: cy,\n        r: r\n      };\n    }\n\n    return this.el(\"circle\", attr);\n  };\n\n  var preload = function () {\n    function onerror() {\n      this.parentNode.removeChild(this);\n    }\n\n    return function (src, f) {\n      var img = glob.doc.createElement(\"img\"),\n          body = glob.doc.body;\n      img.style.cssText = \"position:absolute;left:-9999em;top:-9999em\";\n\n      img.onload = function () {\n        f.call(img);\n        img.onload = img.onerror = null;\n        body.removeChild(img);\n      };\n\n      img.onerror = onerror;\n      body.appendChild(img);\n      img.src = src;\n    };\n  }();\n  /*\\\n   * Paper.image\n   [ method ]\n   **\n   * Places an image on the surface\n   **\n   - src (string) URI of the source image\n   - x (number) x offset position\n   - y (number) y offset position\n   - width (number) width of the image\n   - height (number) height of the image\n   = (object) the `image` element\n   * or\n   = (object) Snap element object with type `image`\n   **\n   > Usage\n   | var c = paper.image(\"apple.png\", 10, 10, 80, 80);\n  \\*/\n\n\n  proto.image = function (src, x, y, width, height) {\n    var el = this.el(\"image\");\n\n    if (is(src, \"object\") && \"src\" in src) {\n      el.attr(src);\n    } else if (src != null) {\n      var set = {\n        \"xlink:href\": src,\n        preserveAspectRatio: \"none\"\n      };\n\n      if (x != null && y != null) {\n        set.x = x;\n        set.y = y;\n      }\n\n      if (width != null && height != null) {\n        set.width = width;\n        set.height = height;\n      } else {\n        preload(src, function () {\n          Snap._.$(el.node, {\n            width: this.offsetWidth,\n            height: this.offsetHeight\n          });\n        });\n      }\n\n      Snap._.$(el.node, set);\n    }\n\n    return el;\n  };\n  /*\\\n   * Paper.ellipse\n   [ method ]\n   **\n   * Draws an ellipse\n   **\n   - x (number) x coordinate of the centre\n   - y (number) y coordinate of the centre\n   - rx (number) horizontal radius\n   - ry (number) vertical radius\n   = (object) the `ellipse` element\n   **\n   > Usage\n   | var c = paper.ellipse(50, 50, 40, 20);\n  \\*/\n\n\n  proto.ellipse = function (cx, cy, rx, ry) {\n    var attr;\n\n    if (is(cx, \"object\") && cx == \"[object Object]\") {\n      attr = cx;\n    } else if (cx != null) {\n      attr = {\n        cx: cx,\n        cy: cy,\n        rx: rx,\n        ry: ry\n      };\n    }\n\n    return this.el(\"ellipse\", attr);\n  }; // SIERRA Paper.path(): Unclear from the link what a Catmull-Rom curveto is, and why it would make life any easier.\n\n  /*\\\n   * Paper.path\n   [ method ]\n   **\n   * Creates a `<path>` element using the given string as the path's definition\n   - pathString (string) #optional path string in SVG format\n   * Path string consists of one-letter commands, followed by comma seprarated arguments in numerical form. Example:\n   | \"M10,20L30,40\"\n   * This example features two commands: `M`, with arguments `(10, 20)` and `L` with arguments `(30, 40)`. Uppercase letter commands express coordinates in absolute terms, while lowercase commands express them in relative terms from the most recently declared coordinates.\n   *\n   # <p>Here is short list of commands available, for more details see <a href=\"http://www.w3.org/TR/SVG/paths.html#PathData\" title=\"Details of a path's data attribute's format are described in the SVG specification.\">SVG path string format</a> or <a href=\"https://developer.mozilla.org/en/SVG/Tutorial/Paths\">article about path strings at MDN</a>.</p>\n   # <table><thead><tr><th>Command</th><th>Name</th><th>Parameters</th></tr></thead><tbody>\n   # <tr><td>M</td><td>moveto</td><td>(x y)+</td></tr>\n   # <tr><td>Z</td><td>closepath</td><td>(none)</td></tr>\n   # <tr><td>L</td><td>lineto</td><td>(x y)+</td></tr>\n   # <tr><td>H</td><td>horizontal lineto</td><td>x+</td></tr>\n   # <tr><td>V</td><td>vertical lineto</td><td>y+</td></tr>\n   # <tr><td>C</td><td>curveto</td><td>(x1 y1 x2 y2 x y)+</td></tr>\n   # <tr><td>S</td><td>smooth curveto</td><td>(x2 y2 x y)+</td></tr>\n   # <tr><td>Q</td><td>quadratic Bézier curveto</td><td>(x1 y1 x y)+</td></tr>\n   # <tr><td>T</td><td>smooth quadratic Bézier curveto</td><td>(x y)+</td></tr>\n   # <tr><td>A</td><td>elliptical arc</td><td>(rx ry x-axis-rotation large-arc-flag sweep-flag x y)+</td></tr>\n   # <tr><td>R</td><td><a href=\"http://en.wikipedia.org/wiki/Catmull–Rom_spline#Catmull.E2.80.93Rom_spline\">Catmull-Rom curveto</a>*</td><td>x1 y1 (x y)+</td></tr></tbody></table>\n   * * _Catmull-Rom curveto_ is a not standard SVG command and added to make life easier.\n   * Note: there is a special case when a path consists of only three commands: `M10,10R…z`. In this case the path connects back to its starting point.\n   > Usage\n   | var c = paper.path(\"M10 10L90 90\");\n   | // draw a diagonal line:\n   | // move to 10,10, line to 90,90\n  \\*/\n\n\n  proto.path = function (d) {\n    var attr;\n\n    if (is(d, \"object\") && !is(d, \"array\")) {\n      attr = d;\n    } else if (d) {\n      attr = {\n        d: d\n      };\n    }\n\n    return this.el(\"path\", attr);\n  };\n  /*\\\n   * Paper.g\n   [ method ]\n   **\n   * Creates a group element\n   **\n   - varargs (…) #optional elements to nest within the group\n   = (object) the `g` element\n   **\n   > Usage\n   | var c1 = paper.circle(),\n   |     c2 = paper.rect(),\n   |     g = paper.g(c2, c1); // note that the order of elements is different\n   * or\n   | var c1 = paper.circle(),\n   |     c2 = paper.rect(),\n   |     g = paper.g();\n   | g.add(c2, c1);\n  \\*/\n\n  /*\\\n   * Paper.group\n   [ method ]\n   **\n   * See @Paper.g\n  \\*/\n\n\n  proto.group = proto.g = function (first) {\n    var attr,\n        el = this.el(\"g\");\n\n    if (arguments.length == 1 && first && !first.type) {\n      el.attr(first);\n    } else if (arguments.length) {\n      el.add(Array.prototype.slice.call(arguments, 0));\n    }\n\n    return el;\n  };\n  /*\\\n   * Paper.svg\n   [ method ]\n   **\n   * Creates a nested SVG element.\n   - x (number) @optional X of the element\n   - y (number) @optional Y of the element\n   - width (number) @optional width of the element\n   - height (number) @optional height of the element\n   - vbx (number) @optional viewbox X\n   - vby (number) @optional viewbox Y\n   - vbw (number) @optional viewbox width\n   - vbh (number) @optional viewbox height\n   **\n   = (object) the `svg` element\n   **\n  \\*/\n\n\n  proto.svg = function (x, y, width, height, vbx, vby, vbw, vbh) {\n    var attrs = {};\n\n    if (is(x, \"object\") && y == null) {\n      attrs = x;\n    } else {\n      if (x != null) {\n        attrs.x = x;\n      }\n\n      if (y != null) {\n        attrs.y = y;\n      }\n\n      if (width != null) {\n        attrs.width = width;\n      }\n\n      if (height != null) {\n        attrs.height = height;\n      }\n\n      if (vbx != null && vby != null && vbw != null && vbh != null) {\n        attrs.viewBox = [vbx, vby, vbw, vbh];\n      }\n    }\n\n    return this.el(\"svg\", attrs);\n  };\n  /*\\\n   * Paper.mask\n   [ method ]\n   **\n   * Equivalent in behaviour to @Paper.g, except it’s a mask.\n   **\n   = (object) the `mask` element\n   **\n  \\*/\n\n\n  proto.mask = function (first) {\n    var attr,\n        el = this.el(\"mask\");\n\n    if (arguments.length == 1 && first && !first.type) {\n      el.attr(first);\n    } else if (arguments.length) {\n      el.add(Array.prototype.slice.call(arguments, 0));\n    }\n\n    return el;\n  };\n  /*\\\n   * Paper.ptrn\n   [ method ]\n   **\n   * Equivalent in behaviour to @Paper.g, except it’s a pattern.\n   - x (number) @optional X of the element\n   - y (number) @optional Y of the element\n   - width (number) @optional width of the element\n   - height (number) @optional height of the element\n   - vbx (number) @optional viewbox X\n   - vby (number) @optional viewbox Y\n   - vbw (number) @optional viewbox width\n   - vbh (number) @optional viewbox height\n   **\n   = (object) the `pattern` element\n   **\n  \\*/\n\n\n  proto.ptrn = function (x, y, width, height, vx, vy, vw, vh) {\n    if (is(x, \"object\")) {\n      var attr = x;\n    } else {\n      attr = {\n        patternUnits: \"userSpaceOnUse\"\n      };\n\n      if (x) {\n        attr.x = x;\n      }\n\n      if (y) {\n        attr.y = y;\n      }\n\n      if (width != null) {\n        attr.width = width;\n      }\n\n      if (height != null) {\n        attr.height = height;\n      }\n\n      if (vx != null && vy != null && vw != null && vh != null) {\n        attr.viewBox = [vx, vy, vw, vh];\n      } else {\n        attr.viewBox = [x || 0, y || 0, width || 0, height || 0];\n      }\n    }\n\n    return this.el(\"pattern\", attr);\n  };\n  /*\\\n   * Paper.use\n   [ method ]\n   **\n   * Creates a <use> element.\n   - id (string) @optional id of element to link\n   * or\n   - id (Element) @optional element to link\n   **\n   = (object) the `use` element\n   **\n  \\*/\n\n\n  proto.use = function (id) {\n    if (id != null) {\n      if (id instanceof Element) {\n        if (!id.attr(\"id\")) {\n          id.attr({\n            id: Snap._.id(id)\n          });\n        }\n\n        id = id.attr(\"id\");\n      }\n\n      if (String(id).charAt() == \"#\") {\n        id = id.substring(1);\n      }\n\n      return this.el(\"use\", {\n        \"xlink:href\": \"#\" + id\n      });\n    } else {\n      return Element.prototype.use.call(this);\n    }\n  };\n  /*\\\n   * Paper.symbol\n   [ method ]\n   **\n   * Creates a <symbol> element.\n   - vbx (number) @optional viewbox X\n   - vby (number) @optional viewbox Y\n   - vbw (number) @optional viewbox width\n   - vbh (number) @optional viewbox height\n   = (object) the `symbol` element\n   **\n  \\*/\n\n\n  proto.symbol = function (vx, vy, vw, vh) {\n    var attr = {};\n\n    if (vx != null && vy != null && vw != null && vh != null) {\n      attr.viewBox = [vx, vy, vw, vh];\n    }\n\n    return this.el(\"symbol\", attr);\n  };\n  /*\\\n   * Paper.text\n   [ method ]\n   **\n   * Draws a text string\n   **\n   - x (number) x coordinate position\n   - y (number) y coordinate position\n   - text (string|array) The text string to draw or array of strings to nest within separate `<tspan>` elements\n   = (object) the `text` element\n   **\n   > Usage\n   | var t1 = paper.text(50, 50, \"Snap\");\n   | var t2 = paper.text(50, 50, [\"S\",\"n\",\"a\",\"p\"]);\n   | // Text path usage\n   | t1.attr({textpath: \"M10,10L100,100\"});\n   | // or\n   | var pth = paper.path(\"M10,10L100,100\");\n   | t1.attr({textpath: pth});\n  \\*/\n\n\n  proto.text = function (x, y, text) {\n    var attr = {};\n\n    if (is(x, \"object\")) {\n      attr = x;\n    } else if (x != null) {\n      attr = {\n        x: x,\n        y: y,\n        text: text || \"\"\n      };\n    }\n\n    return this.el(\"text\", attr);\n  };\n  /*\\\n   * Paper.line\n   [ method ]\n   **\n   * Draws a line\n   **\n   - x1 (number) x coordinate position of the start\n   - y1 (number) y coordinate position of the start\n   - x2 (number) x coordinate position of the end\n   - y2 (number) y coordinate position of the end\n   = (object) the `line` element\n   **\n   > Usage\n   | var t1 = paper.line(50, 50, 100, 100);\n  \\*/\n\n\n  proto.line = function (x1, y1, x2, y2) {\n    var attr = {};\n\n    if (is(x1, \"object\")) {\n      attr = x1;\n    } else if (x1 != null) {\n      attr = {\n        x1: x1,\n        x2: x2,\n        y1: y1,\n        y2: y2\n      };\n    }\n\n    return this.el(\"line\", attr);\n  };\n  /*\\\n   * Paper.polyline\n   [ method ]\n   **\n   * Draws a polyline\n   **\n   - points (array) array of points\n   * or\n   - varargs (…) points\n   = (object) the `polyline` element\n   **\n   > Usage\n   | var p1 = paper.polyline([10, 10, 100, 100]);\n   | var p2 = paper.polyline(10, 10, 100, 100);\n  \\*/\n\n\n  proto.polyline = function (points) {\n    if (arguments.length > 1) {\n      points = Array.prototype.slice.call(arguments, 0);\n    }\n\n    var attr = {};\n\n    if (is(points, \"object\") && !is(points, \"array\")) {\n      attr = points;\n    } else if (points != null) {\n      attr = {\n        points: points\n      };\n    }\n\n    return this.el(\"polyline\", attr);\n  };\n  /*\\\n   * Paper.polygon\n   [ method ]\n   **\n   * Draws a polygon. See @Paper.polyline\n  \\*/\n\n\n  proto.polygon = function (points) {\n    if (arguments.length > 1) {\n      points = Array.prototype.slice.call(arguments, 0);\n    }\n\n    var attr = {};\n\n    if (is(points, \"object\") && !is(points, \"array\")) {\n      attr = points;\n    } else if (points != null) {\n      attr = {\n        points: points\n      };\n    }\n\n    return this.el(\"polygon\", attr);\n  }; // gradients\n\n\n  (function () {\n    var $ = Snap._.$; // gradients' helpers\n\n    /*\\\n     * Element.stops\n     [ method ]\n     **\n     * Only for gradients!\n     * Returns array of gradient stops elements.\n     = (array) the stops array.\n    \\*/\n\n    function Gstops() {\n      return this.selectAll(\"stop\");\n    }\n    /*\\\n     * Element.addStop\n     [ method ]\n     **\n     * Only for gradients!\n     * Adds another stop to the gradient.\n     - color (string) stops color\n     - offset (number) stops offset 0..100\n     = (object) gradient element\n    \\*/\n\n\n    function GaddStop(color, offset) {\n      var stop = $(\"stop\"),\n          attr = {\n        offset: +offset + \"%\"\n      };\n      color = Snap.color(color);\n      attr[\"stop-color\"] = color.hex;\n\n      if (color.opacity < 1) {\n        attr[\"stop-opacity\"] = color.opacity;\n      }\n\n      $(stop, attr);\n      var stops = this.stops(),\n          inserted;\n\n      for (var i = 0; i < stops.length; i++) {\n        var stopOffset = parseFloat(stops[i].attr(\"offset\"));\n\n        if (stopOffset > offset) {\n          this.node.insertBefore(stop, stops[i].node);\n          inserted = true;\n          break;\n        }\n      }\n\n      if (!inserted) {\n        this.node.appendChild(stop);\n      }\n\n      return this;\n    }\n\n    function GgetBBox() {\n      if (this.type == \"linearGradient\") {\n        var x1 = $(this.node, \"x1\") || 0,\n            x2 = $(this.node, \"x2\") || 1,\n            y1 = $(this.node, \"y1\") || 0,\n            y2 = $(this.node, \"y2\") || 0;\n        return Snap._.box(x1, y1, math.abs(x2 - x1), math.abs(y2 - y1));\n      } else {\n        var cx = this.node.cx || .5,\n            cy = this.node.cy || .5,\n            r = this.node.r || 0;\n        return Snap._.box(cx - r, cy - r, r * 2, r * 2);\n      }\n    }\n    /*\\\n     * Element.setStops\n     [ method ]\n     **\n     * Only for gradients!\n     * Updates stops of the gradient based on passed gradient descriptor. See @Ppaer.gradient\n     - str (string) gradient descriptor part after `()`.\n     = (object) gradient element\n     | var g = paper.gradient(\"l(0, 0, 1, 1)#000-#f00-#fff\");\n     | g.setStops(\"#fff-#000-#f00-#fc0\");\n    \\*/\n\n\n    function GsetStops(str) {\n      var grad = str,\n          stops = this.stops();\n\n      if (typeof str == \"string\") {\n        grad = eve(\"snap.util.grad.parse\", null, \"l(0,0,0,1)\" + str).firstDefined().stops;\n      }\n\n      if (!Snap.is(grad, \"array\")) {\n        return;\n      }\n\n      for (var i = 0; i < stops.length; i++) {\n        if (grad[i]) {\n          var color = Snap.color(grad[i].color),\n              attr = {\n            \"offset\": grad[i].offset + \"%\"\n          };\n          attr[\"stop-color\"] = color.hex;\n\n          if (color.opacity < 1) {\n            attr[\"stop-opacity\"] = color.opacity;\n          }\n\n          stops[i].attr(attr);\n        } else {\n          stops[i].remove();\n        }\n      }\n\n      for (i = stops.length; i < grad.length; i++) {\n        this.addStop(grad[i].color, grad[i].offset);\n      }\n\n      return this;\n    }\n\n    function gradient(defs, str) {\n      var grad = eve(\"snap.util.grad.parse\", null, str).firstDefined(),\n          el;\n\n      if (!grad) {\n        return null;\n      }\n\n      grad.params.unshift(defs);\n\n      if (grad.type.toLowerCase() == \"l\") {\n        el = gradientLinear.apply(0, grad.params);\n      } else {\n        el = gradientRadial.apply(0, grad.params);\n      }\n\n      if (grad.type != grad.type.toLowerCase()) {\n        $(el.node, {\n          gradientUnits: \"userSpaceOnUse\"\n        });\n      }\n\n      var stops = grad.stops,\n          len = stops.length;\n\n      for (var i = 0; i < len; i++) {\n        var stop = stops[i];\n        el.addStop(stop.color, stop.offset);\n      }\n\n      return el;\n    }\n\n    function gradientLinear(defs, x1, y1, x2, y2) {\n      var el = Snap._.make(\"linearGradient\", defs);\n\n      el.stops = Gstops;\n      el.addStop = GaddStop;\n      el.getBBox = GgetBBox;\n      el.setStops = GsetStops;\n\n      if (x1 != null) {\n        $(el.node, {\n          x1: x1,\n          y1: y1,\n          x2: x2,\n          y2: y2\n        });\n      }\n\n      return el;\n    }\n\n    function gradientRadial(defs, cx, cy, r, fx, fy) {\n      var el = Snap._.make(\"radialGradient\", defs);\n\n      el.stops = Gstops;\n      el.addStop = GaddStop;\n      el.getBBox = GgetBBox;\n\n      if (cx != null) {\n        $(el.node, {\n          cx: cx,\n          cy: cy,\n          r: r\n        });\n      }\n\n      if (fx != null && fy != null) {\n        $(el.node, {\n          fx: fx,\n          fy: fy\n        });\n      }\n\n      return el;\n    }\n    /*\\\n     * Paper.gradient\n     [ method ]\n     **\n     * Creates a gradient element\n     **\n     - gradient (string) gradient descriptor\n     > Gradient Descriptor\n     * The gradient descriptor is an expression formatted as\n     * follows: `<type>(<coords>)<colors>`.  The `<type>` can be\n     * either linear or radial.  The uppercase `L` or `R` letters\n     * indicate absolute coordinates offset from the SVG surface.\n     * Lowercase `l` or `r` letters indicate coordinates\n     * calculated relative to the element to which the gradient is\n     * applied.  Coordinates specify a linear gradient vector as\n     * `x1`, `y1`, `x2`, `y2`, or a radial gradient as `cx`, `cy`,\n     * `r` and optional `fx`, `fy` specifying a focal point away\n     * from the center of the circle. Specify `<colors>` as a list\n     * of dash-separated CSS color values.  Each color may be\n     * followed by a custom offset value, separated with a colon\n     * character.\n     > Examples\n     * Linear gradient, relative from top-left corner to bottom-right\n     * corner, from black through red to white:\n     | var g = paper.gradient(\"l(0, 0, 1, 1)#000-#f00-#fff\");\n     * Linear gradient, absolute from (0, 0) to (100, 100), from black\n     * through red at 25% to white:\n     | var g = paper.gradient(\"L(0, 0, 100, 100)#000-#f00:25-#fff\");\n     * Radial gradient, relative from the center of the element with radius\n     * half the width, from black to white:\n     | var g = paper.gradient(\"r(0.5, 0.5, 0.5)#000-#fff\");\n     * To apply the gradient:\n     | paper.circle(50, 50, 40).attr({\n     |     fill: g\n     | });\n     = (object) the `gradient` element\n    \\*/\n\n\n    proto.gradient = function (str) {\n      return gradient(this.defs, str);\n    };\n\n    proto.gradientLinear = function (x1, y1, x2, y2) {\n      return gradientLinear(this.defs, x1, y1, x2, y2);\n    };\n\n    proto.gradientRadial = function (cx, cy, r, fx, fy) {\n      return gradientRadial(this.defs, cx, cy, r, fx, fy);\n    };\n    /*\\\n     * Paper.toString\n     [ method ]\n     **\n     * Returns SVG code for the @Paper\n     = (string) SVG code for the @Paper\n    \\*/\n\n\n    proto.toString = function () {\n      var doc = this.node.ownerDocument,\n          f = doc.createDocumentFragment(),\n          d = doc.createElement(\"div\"),\n          svg = this.node.cloneNode(true),\n          res;\n      f.appendChild(d);\n      d.appendChild(svg);\n\n      Snap._.$(svg, {\n        xmlns: \"http://www.w3.org/2000/svg\"\n      });\n\n      res = d.innerHTML;\n      f.removeChild(f.firstChild);\n      return res;\n    };\n    /*\\\n     * Paper.toDataURL\n     [ method ]\n     **\n     * Returns SVG code for the @Paper as Data URI string.\n     = (string) Data URI string\n    \\*/\n\n\n    proto.toDataURL = function () {\n      if (window && window.btoa) {\n        return \"data:image/svg+xml;base64,\" + btoa(unescape(encodeURIComponent(this)));\n      }\n    };\n    /*\\\n     * Paper.clear\n     [ method ]\n     **\n     * Removes all child nodes of the paper, except <defs>.\n    \\*/\n\n\n    proto.clear = function () {\n      var node = this.node.firstChild,\n          next;\n\n      while (node) {\n        next = node.nextSibling;\n\n        if (node.tagName != \"defs\") {\n          node.parentNode.removeChild(node);\n        } else {\n          proto.clear.call({\n            node: node\n          });\n        }\n\n        node = next;\n      }\n    };\n  })();\n}); // Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nSnap.plugin(function (Snap, Element, Paper, glob) {\n  var elproto = Element.prototype,\n      is = Snap.is,\n      clone = Snap._.clone,\n      has = \"hasOwnProperty\",\n      p2s = /,?([a-z]),?/gi,\n      toFloat = parseFloat,\n      math = Math,\n      PI = math.PI,\n      mmin = math.min,\n      mmax = math.max,\n      pow = math.pow,\n      abs = math.abs;\n\n  function paths(ps) {\n    var p = paths.ps = paths.ps || {};\n\n    if (p[ps]) {\n      p[ps].sleep = 100;\n    } else {\n      p[ps] = {\n        sleep: 100\n      };\n    }\n\n    setTimeout(function () {\n      for (var key in p) {\n        if (p[has](key) && key != ps) {\n          p[key].sleep--;\n          !p[key].sleep && delete p[key];\n        }\n      }\n    });\n    return p[ps];\n  }\n\n  function box(x, y, width, height) {\n    if (x == null) {\n      x = y = width = height = 0;\n    }\n\n    if (y == null) {\n      y = x.y;\n      width = x.width;\n      height = x.height;\n      x = x.x;\n    }\n\n    return {\n      x: x,\n      y: y,\n      width: width,\n      w: width,\n      height: height,\n      h: height,\n      x2: x + width,\n      y2: y + height,\n      cx: x + width / 2,\n      cy: y + height / 2,\n      r1: math.min(width, height) / 2,\n      r2: math.max(width, height) / 2,\n      r0: math.sqrt(width * width + height * height) / 2,\n      path: rectPath(x, y, width, height),\n      vb: [x, y, width, height].join(\" \")\n    };\n  }\n\n  function toString() {\n    return this.join(\",\").replace(p2s, \"$1\");\n  }\n\n  function pathClone(pathArray) {\n    var res = clone(pathArray);\n    res.toString = toString;\n    return res;\n  }\n\n  function getPointAtSegmentLength(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, length) {\n    if (length == null) {\n      return bezlen(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y);\n    } else {\n      return findDotsAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, getTotLen(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, length));\n    }\n  }\n\n  function getLengthFactory(istotal, subpath) {\n    function O(val) {\n      return +(+val).toFixed(3);\n    }\n\n    return Snap._.cacher(function (path, length, onlystart) {\n      if (path instanceof Element) {\n        path = path.attr(\"d\");\n      }\n\n      path = path2curve(path);\n      var x,\n          y,\n          p,\n          l,\n          sp = \"\",\n          subpaths = {},\n          point,\n          len = 0;\n\n      for (var i = 0, ii = path.length; i < ii; i++) {\n        p = path[i];\n\n        if (p[0] == \"M\") {\n          x = +p[1];\n          y = +p[2];\n        } else {\n          l = getPointAtSegmentLength(x, y, p[1], p[2], p[3], p[4], p[5], p[6]);\n\n          if (len + l > length) {\n            if (subpath && !subpaths.start) {\n              point = getPointAtSegmentLength(x, y, p[1], p[2], p[3], p[4], p[5], p[6], length - len);\n              sp += [\"C\" + O(point.start.x), O(point.start.y), O(point.m.x), O(point.m.y), O(point.x), O(point.y)];\n\n              if (onlystart) {\n                return sp;\n              }\n\n              subpaths.start = sp;\n              sp = [\"M\" + O(point.x), O(point.y) + \"C\" + O(point.n.x), O(point.n.y), O(point.end.x), O(point.end.y), O(p[5]), O(p[6])].join();\n              len += l;\n              x = +p[5];\n              y = +p[6];\n              continue;\n            }\n\n            if (!istotal && !subpath) {\n              point = getPointAtSegmentLength(x, y, p[1], p[2], p[3], p[4], p[5], p[6], length - len);\n              return point;\n            }\n          }\n\n          len += l;\n          x = +p[5];\n          y = +p[6];\n        }\n\n        sp += p.shift() + p;\n      }\n\n      subpaths.end = sp;\n      point = istotal ? len : subpath ? subpaths : findDotsAtSegment(x, y, p[0], p[1], p[2], p[3], p[4], p[5], 1);\n      return point;\n    }, null, Snap._.clone);\n  }\n\n  var getTotalLength = getLengthFactory(1),\n      getPointAtLength = getLengthFactory(),\n      getSubpathsAtLength = getLengthFactory(0, 1);\n\n  function findDotsAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t) {\n    var t1 = 1 - t,\n        t13 = pow(t1, 3),\n        t12 = pow(t1, 2),\n        t2 = t * t,\n        t3 = t2 * t,\n        x = t13 * p1x + t12 * 3 * t * c1x + t1 * 3 * t * t * c2x + t3 * p2x,\n        y = t13 * p1y + t12 * 3 * t * c1y + t1 * 3 * t * t * c2y + t3 * p2y,\n        mx = p1x + 2 * t * (c1x - p1x) + t2 * (c2x - 2 * c1x + p1x),\n        my = p1y + 2 * t * (c1y - p1y) + t2 * (c2y - 2 * c1y + p1y),\n        nx = c1x + 2 * t * (c2x - c1x) + t2 * (p2x - 2 * c2x + c1x),\n        ny = c1y + 2 * t * (c2y - c1y) + t2 * (p2y - 2 * c2y + c1y),\n        ax = t1 * p1x + t * c1x,\n        ay = t1 * p1y + t * c1y,\n        cx = t1 * c2x + t * p2x,\n        cy = t1 * c2y + t * p2y,\n        alpha = 90 - math.atan2(mx - nx, my - ny) * 180 / PI; // (mx > nx || my < ny) && (alpha += 180);\n\n    return {\n      x: x,\n      y: y,\n      m: {\n        x: mx,\n        y: my\n      },\n      n: {\n        x: nx,\n        y: ny\n      },\n      start: {\n        x: ax,\n        y: ay\n      },\n      end: {\n        x: cx,\n        y: cy\n      },\n      alpha: alpha\n    };\n  }\n\n  function bezierBBox(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y) {\n    if (!Snap.is(p1x, \"array\")) {\n      p1x = [p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y];\n    }\n\n    var bbox = curveDim.apply(null, p1x);\n    return box(bbox.min.x, bbox.min.y, bbox.max.x - bbox.min.x, bbox.max.y - bbox.min.y);\n  }\n\n  function isPointInsideBBox(bbox, x, y) {\n    return x >= bbox.x && x <= bbox.x + bbox.width && y >= bbox.y && y <= bbox.y + bbox.height;\n  }\n\n  function isBBoxIntersect(bbox1, bbox2) {\n    bbox1 = box(bbox1);\n    bbox2 = box(bbox2);\n    return isPointInsideBBox(bbox2, bbox1.x, bbox1.y) || isPointInsideBBox(bbox2, bbox1.x2, bbox1.y) || isPointInsideBBox(bbox2, bbox1.x, bbox1.y2) || isPointInsideBBox(bbox2, bbox1.x2, bbox1.y2) || isPointInsideBBox(bbox1, bbox2.x, bbox2.y) || isPointInsideBBox(bbox1, bbox2.x2, bbox2.y) || isPointInsideBBox(bbox1, bbox2.x, bbox2.y2) || isPointInsideBBox(bbox1, bbox2.x2, bbox2.y2) || (bbox1.x < bbox2.x2 && bbox1.x > bbox2.x || bbox2.x < bbox1.x2 && bbox2.x > bbox1.x) && (bbox1.y < bbox2.y2 && bbox1.y > bbox2.y || bbox2.y < bbox1.y2 && bbox2.y > bbox1.y);\n  }\n\n  function base3(t, p1, p2, p3, p4) {\n    var t1 = -3 * p1 + 9 * p2 - 9 * p3 + 3 * p4,\n        t2 = t * t1 + 6 * p1 - 12 * p2 + 6 * p3;\n    return t * t2 - 3 * p1 + 3 * p2;\n  }\n\n  function bezlen(x1, y1, x2, y2, x3, y3, x4, y4, z) {\n    if (z == null) {\n      z = 1;\n    }\n\n    z = z > 1 ? 1 : z < 0 ? 0 : z;\n    var z2 = z / 2,\n        n = 12,\n        Tvalues = [-.1252, .1252, -.3678, .3678, -.5873, .5873, -.7699, .7699, -.9041, .9041, -.9816, .9816],\n        Cvalues = [0.2491, 0.2491, 0.2335, 0.2335, 0.2032, 0.2032, 0.1601, 0.1601, 0.1069, 0.1069, 0.0472, 0.0472],\n        sum = 0;\n\n    for (var i = 0; i < n; i++) {\n      var ct = z2 * Tvalues[i] + z2,\n          xbase = base3(ct, x1, x2, x3, x4),\n          ybase = base3(ct, y1, y2, y3, y4),\n          comb = xbase * xbase + ybase * ybase;\n      sum += Cvalues[i] * math.sqrt(comb);\n    }\n\n    return z2 * sum;\n  }\n\n  function getTotLen(x1, y1, x2, y2, x3, y3, x4, y4, ll) {\n    if (ll < 0 || bezlen(x1, y1, x2, y2, x3, y3, x4, y4) < ll) {\n      return;\n    }\n\n    var t = 1,\n        step = t / 2,\n        t2 = t - step,\n        l,\n        e = .01;\n    l = bezlen(x1, y1, x2, y2, x3, y3, x4, y4, t2);\n\n    while (abs(l - ll) > e) {\n      step /= 2;\n      t2 += (l < ll ? 1 : -1) * step;\n      l = bezlen(x1, y1, x2, y2, x3, y3, x4, y4, t2);\n    }\n\n    return t2;\n  }\n\n  function intersect(x1, y1, x2, y2, x3, y3, x4, y4) {\n    if (mmax(x1, x2) < mmin(x3, x4) || mmin(x1, x2) > mmax(x3, x4) || mmax(y1, y2) < mmin(y3, y4) || mmin(y1, y2) > mmax(y3, y4)) {\n      return;\n    }\n\n    var nx = (x1 * y2 - y1 * x2) * (x3 - x4) - (x1 - x2) * (x3 * y4 - y3 * x4),\n        ny = (x1 * y2 - y1 * x2) * (y3 - y4) - (y1 - y2) * (x3 * y4 - y3 * x4),\n        denominator = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4);\n\n    if (!denominator) {\n      return;\n    }\n\n    var px = nx / denominator,\n        py = ny / denominator,\n        px2 = +px.toFixed(2),\n        py2 = +py.toFixed(2);\n\n    if (px2 < +mmin(x1, x2).toFixed(2) || px2 > +mmax(x1, x2).toFixed(2) || px2 < +mmin(x3, x4).toFixed(2) || px2 > +mmax(x3, x4).toFixed(2) || py2 < +mmin(y1, y2).toFixed(2) || py2 > +mmax(y1, y2).toFixed(2) || py2 < +mmin(y3, y4).toFixed(2) || py2 > +mmax(y3, y4).toFixed(2)) {\n      return;\n    }\n\n    return {\n      x: px,\n      y: py\n    };\n  }\n\n  function inter(bez1, bez2) {\n    return interHelper(bez1, bez2);\n  }\n\n  function interCount(bez1, bez2) {\n    return interHelper(bez1, bez2, 1);\n  }\n\n  function interHelper(bez1, bez2, justCount) {\n    var bbox1 = bezierBBox(bez1),\n        bbox2 = bezierBBox(bez2);\n\n    if (!isBBoxIntersect(bbox1, bbox2)) {\n      return justCount ? 0 : [];\n    }\n\n    var l1 = bezlen.apply(0, bez1),\n        l2 = bezlen.apply(0, bez2),\n        n1 = ~~(l1 / 8),\n        n2 = ~~(l2 / 8),\n        dots1 = [],\n        dots2 = [],\n        xy = {},\n        res = justCount ? 0 : [];\n\n    for (var i = 0; i < n1 + 1; i++) {\n      var p = findDotsAtSegment.apply(0, bez1.concat(i / n1));\n      dots1.push({\n        x: p.x,\n        y: p.y,\n        t: i / n1\n      });\n    }\n\n    for (i = 0; i < n2 + 1; i++) {\n      p = findDotsAtSegment.apply(0, bez2.concat(i / n2));\n      dots2.push({\n        x: p.x,\n        y: p.y,\n        t: i / n2\n      });\n    }\n\n    for (i = 0; i < n1; i++) {\n      for (var j = 0; j < n2; j++) {\n        var di = dots1[i],\n            di1 = dots1[i + 1],\n            dj = dots2[j],\n            dj1 = dots2[j + 1],\n            ci = abs(di1.x - di.x) < .001 ? \"y\" : \"x\",\n            cj = abs(dj1.x - dj.x) < .001 ? \"y\" : \"x\",\n            is = intersect(di.x, di.y, di1.x, di1.y, dj.x, dj.y, dj1.x, dj1.y);\n\n        if (is) {\n          if (xy[is.x.toFixed(4)] == is.y.toFixed(4)) {\n            continue;\n          }\n\n          xy[is.x.toFixed(4)] = is.y.toFixed(4);\n          var t1 = di.t + abs((is[ci] - di[ci]) / (di1[ci] - di[ci])) * (di1.t - di.t),\n              t2 = dj.t + abs((is[cj] - dj[cj]) / (dj1[cj] - dj[cj])) * (dj1.t - dj.t);\n\n          if (t1 >= 0 && t1 <= 1 && t2 >= 0 && t2 <= 1) {\n            if (justCount) {\n              res++;\n            } else {\n              res.push({\n                x: is.x,\n                y: is.y,\n                t1: t1,\n                t2: t2\n              });\n            }\n          }\n        }\n      }\n    }\n\n    return res;\n  }\n\n  function pathIntersection(path1, path2) {\n    return interPathHelper(path1, path2);\n  }\n\n  function pathIntersectionNumber(path1, path2) {\n    return interPathHelper(path1, path2, 1);\n  }\n\n  function interPathHelper(path1, path2, justCount) {\n    path1 = path2curve(path1);\n    path2 = path2curve(path2);\n    var x1,\n        y1,\n        x2,\n        y2,\n        x1m,\n        y1m,\n        x2m,\n        y2m,\n        bez1,\n        bez2,\n        res = justCount ? 0 : [];\n\n    for (var i = 0, ii = path1.length; i < ii; i++) {\n      var pi = path1[i];\n\n      if (pi[0] == \"M\") {\n        x1 = x1m = pi[1];\n        y1 = y1m = pi[2];\n      } else {\n        if (pi[0] == \"C\") {\n          bez1 = [x1, y1].concat(pi.slice(1));\n          x1 = bez1[6];\n          y1 = bez1[7];\n        } else {\n          bez1 = [x1, y1, x1, y1, x1m, y1m, x1m, y1m];\n          x1 = x1m;\n          y1 = y1m;\n        }\n\n        for (var j = 0, jj = path2.length; j < jj; j++) {\n          var pj = path2[j];\n\n          if (pj[0] == \"M\") {\n            x2 = x2m = pj[1];\n            y2 = y2m = pj[2];\n          } else {\n            if (pj[0] == \"C\") {\n              bez2 = [x2, y2].concat(pj.slice(1));\n              x2 = bez2[6];\n              y2 = bez2[7];\n            } else {\n              bez2 = [x2, y2, x2, y2, x2m, y2m, x2m, y2m];\n              x2 = x2m;\n              y2 = y2m;\n            }\n\n            var intr = interHelper(bez1, bez2, justCount);\n\n            if (justCount) {\n              res += intr;\n            } else {\n              for (var k = 0, kk = intr.length; k < kk; k++) {\n                intr[k].segment1 = i;\n                intr[k].segment2 = j;\n                intr[k].bez1 = bez1;\n                intr[k].bez2 = bez2;\n              }\n\n              res = res.concat(intr);\n            }\n          }\n        }\n      }\n    }\n\n    return res;\n  }\n\n  function isPointInsidePath(path, x, y) {\n    var bbox = pathBBox(path);\n    return isPointInsideBBox(bbox, x, y) && interPathHelper(path, [[\"M\", x, y], [\"H\", bbox.x2 + 10]], 1) % 2 == 1;\n  }\n\n  function pathBBox(path) {\n    var pth = paths(path);\n\n    if (pth.bbox) {\n      return clone(pth.bbox);\n    }\n\n    if (!path) {\n      return box();\n    }\n\n    path = path2curve(path);\n    var x = 0,\n        y = 0,\n        X = [],\n        Y = [],\n        p;\n\n    for (var i = 0, ii = path.length; i < ii; i++) {\n      p = path[i];\n\n      if (p[0] == \"M\") {\n        x = p[1];\n        y = p[2];\n        X.push(x);\n        Y.push(y);\n      } else {\n        var dim = curveDim(x, y, p[1], p[2], p[3], p[4], p[5], p[6]);\n        X = X.concat(dim.min.x, dim.max.x);\n        Y = Y.concat(dim.min.y, dim.max.y);\n        x = p[5];\n        y = p[6];\n      }\n    }\n\n    var xmin = mmin.apply(0, X),\n        ymin = mmin.apply(0, Y),\n        xmax = mmax.apply(0, X),\n        ymax = mmax.apply(0, Y),\n        bb = box(xmin, ymin, xmax - xmin, ymax - ymin);\n    pth.bbox = clone(bb);\n    return bb;\n  }\n\n  function rectPath(x, y, w, h, r) {\n    if (r) {\n      return [[\"M\", +x + +r, y], [\"l\", w - r * 2, 0], [\"a\", r, r, 0, 0, 1, r, r], [\"l\", 0, h - r * 2], [\"a\", r, r, 0, 0, 1, -r, r], [\"l\", r * 2 - w, 0], [\"a\", r, r, 0, 0, 1, -r, -r], [\"l\", 0, r * 2 - h], [\"a\", r, r, 0, 0, 1, r, -r], [\"z\"]];\n    }\n\n    var res = [[\"M\", x, y], [\"l\", w, 0], [\"l\", 0, h], [\"l\", -w, 0], [\"z\"]];\n    res.toString = toString;\n    return res;\n  }\n\n  function ellipsePath(x, y, rx, ry, a) {\n    if (a == null && ry == null) {\n      ry = rx;\n    }\n\n    x = +x;\n    y = +y;\n    rx = +rx;\n    ry = +ry;\n\n    if (a != null) {\n      var rad = Math.PI / 180,\n          x1 = x + rx * Math.cos(-ry * rad),\n          x2 = x + rx * Math.cos(-a * rad),\n          y1 = y + rx * Math.sin(-ry * rad),\n          y2 = y + rx * Math.sin(-a * rad),\n          res = [[\"M\", x1, y1], [\"A\", rx, rx, 0, +(a - ry > 180), 0, x2, y2]];\n    } else {\n      res = [[\"M\", x, y], [\"m\", 0, -ry], [\"a\", rx, ry, 0, 1, 1, 0, 2 * ry], [\"a\", rx, ry, 0, 1, 1, 0, -2 * ry], [\"z\"]];\n    }\n\n    res.toString = toString;\n    return res;\n  }\n\n  var unit2px = Snap._unit2px,\n      getPath = {\n    path: function path(el) {\n      return el.attr(\"path\");\n    },\n    circle: function circle(el) {\n      var attr = unit2px(el);\n      return ellipsePath(attr.cx, attr.cy, attr.r);\n    },\n    ellipse: function ellipse(el) {\n      var attr = unit2px(el);\n      return ellipsePath(attr.cx || 0, attr.cy || 0, attr.rx, attr.ry);\n    },\n    rect: function rect(el) {\n      var attr = unit2px(el);\n      return rectPath(attr.x || 0, attr.y || 0, attr.width, attr.height, attr.rx, attr.ry);\n    },\n    image: function image(el) {\n      var attr = unit2px(el);\n      return rectPath(attr.x || 0, attr.y || 0, attr.width, attr.height);\n    },\n    line: function line(el) {\n      return \"M\" + [el.attr(\"x1\") || 0, el.attr(\"y1\") || 0, el.attr(\"x2\"), el.attr(\"y2\")];\n    },\n    polyline: function polyline(el) {\n      return \"M\" + el.attr(\"points\");\n    },\n    polygon: function polygon(el) {\n      return \"M\" + el.attr(\"points\") + \"z\";\n    },\n    deflt: function deflt(el) {\n      var bbox = el.node.getBBox();\n      return rectPath(bbox.x, bbox.y, bbox.width, bbox.height);\n    }\n  };\n\n  function pathToRelative(pathArray) {\n    var pth = paths(pathArray),\n        lowerCase = String.prototype.toLowerCase;\n\n    if (pth.rel) {\n      return pathClone(pth.rel);\n    }\n\n    if (!Snap.is(pathArray, \"array\") || !Snap.is(pathArray && pathArray[0], \"array\")) {\n      pathArray = Snap.parsePathString(pathArray);\n    }\n\n    var res = [],\n        x = 0,\n        y = 0,\n        mx = 0,\n        my = 0,\n        start = 0;\n\n    if (pathArray[0][0] == \"M\") {\n      x = pathArray[0][1];\n      y = pathArray[0][2];\n      mx = x;\n      my = y;\n      start++;\n      res.push([\"M\", x, y]);\n    }\n\n    for (var i = start, ii = pathArray.length; i < ii; i++) {\n      var r = res[i] = [],\n          pa = pathArray[i];\n\n      if (pa[0] != lowerCase.call(pa[0])) {\n        r[0] = lowerCase.call(pa[0]);\n\n        switch (r[0]) {\n          case \"a\":\n            r[1] = pa[1];\n            r[2] = pa[2];\n            r[3] = pa[3];\n            r[4] = pa[4];\n            r[5] = pa[5];\n            r[6] = +(pa[6] - x).toFixed(3);\n            r[7] = +(pa[7] - y).toFixed(3);\n            break;\n\n          case \"v\":\n            r[1] = +(pa[1] - y).toFixed(3);\n            break;\n\n          case \"m\":\n            mx = pa[1];\n            my = pa[2];\n\n          default:\n            for (var j = 1, jj = pa.length; j < jj; j++) {\n              r[j] = +(pa[j] - (j % 2 ? x : y)).toFixed(3);\n            }\n\n        }\n      } else {\n        r = res[i] = [];\n\n        if (pa[0] == \"m\") {\n          mx = pa[1] + x;\n          my = pa[2] + y;\n        }\n\n        for (var k = 0, kk = pa.length; k < kk; k++) {\n          res[i][k] = pa[k];\n        }\n      }\n\n      var len = res[i].length;\n\n      switch (res[i][0]) {\n        case \"z\":\n          x = mx;\n          y = my;\n          break;\n\n        case \"h\":\n          x += +res[i][len - 1];\n          break;\n\n        case \"v\":\n          y += +res[i][len - 1];\n          break;\n\n        default:\n          x += +res[i][len - 2];\n          y += +res[i][len - 1];\n      }\n    }\n\n    res.toString = toString;\n    pth.rel = pathClone(res);\n    return res;\n  }\n\n  function pathToAbsolute(pathArray) {\n    var pth = paths(pathArray);\n\n    if (pth.abs) {\n      return pathClone(pth.abs);\n    }\n\n    if (!is(pathArray, \"array\") || !is(pathArray && pathArray[0], \"array\")) {\n      // rough assumption\n      pathArray = Snap.parsePathString(pathArray);\n    }\n\n    if (!pathArray || !pathArray.length) {\n      return [[\"M\", 0, 0]];\n    }\n\n    var res = [],\n        x = 0,\n        y = 0,\n        mx = 0,\n        my = 0,\n        start = 0,\n        pa0;\n\n    if (pathArray[0][0] == \"M\") {\n      x = +pathArray[0][1];\n      y = +pathArray[0][2];\n      mx = x;\n      my = y;\n      start++;\n      res[0] = [\"M\", x, y];\n    }\n\n    var crz = pathArray.length == 3 && pathArray[0][0] == \"M\" && pathArray[1][0].toUpperCase() == \"R\" && pathArray[2][0].toUpperCase() == \"Z\";\n\n    for (var r, pa, i = start, ii = pathArray.length; i < ii; i++) {\n      res.push(r = []);\n      pa = pathArray[i];\n      pa0 = pa[0];\n\n      if (pa0 != pa0.toUpperCase()) {\n        r[0] = pa0.toUpperCase();\n\n        switch (r[0]) {\n          case \"A\":\n            r[1] = pa[1];\n            r[2] = pa[2];\n            r[3] = pa[3];\n            r[4] = pa[4];\n            r[5] = pa[5];\n            r[6] = +pa[6] + x;\n            r[7] = +pa[7] + y;\n            break;\n\n          case \"V\":\n            r[1] = +pa[1] + y;\n            break;\n\n          case \"H\":\n            r[1] = +pa[1] + x;\n            break;\n\n          case \"R\":\n            var dots = [x, y].concat(pa.slice(1));\n\n            for (var j = 2, jj = dots.length; j < jj; j++) {\n              dots[j] = +dots[j] + x;\n              dots[++j] = +dots[j] + y;\n            }\n\n            res.pop();\n            res = res.concat(catmullRom2bezier(dots, crz));\n            break;\n\n          case \"O\":\n            res.pop();\n            dots = ellipsePath(x, y, pa[1], pa[2]);\n            dots.push(dots[0]);\n            res = res.concat(dots);\n            break;\n\n          case \"U\":\n            res.pop();\n            res = res.concat(ellipsePath(x, y, pa[1], pa[2], pa[3]));\n            r = [\"U\"].concat(res[res.length - 1].slice(-2));\n            break;\n\n          case \"M\":\n            mx = +pa[1] + x;\n            my = +pa[2] + y;\n\n          default:\n            for (j = 1, jj = pa.length; j < jj; j++) {\n              r[j] = +pa[j] + (j % 2 ? x : y);\n            }\n\n        }\n      } else if (pa0 == \"R\") {\n        dots = [x, y].concat(pa.slice(1));\n        res.pop();\n        res = res.concat(catmullRom2bezier(dots, crz));\n        r = [\"R\"].concat(pa.slice(-2));\n      } else if (pa0 == \"O\") {\n        res.pop();\n        dots = ellipsePath(x, y, pa[1], pa[2]);\n        dots.push(dots[0]);\n        res = res.concat(dots);\n      } else if (pa0 == \"U\") {\n        res.pop();\n        res = res.concat(ellipsePath(x, y, pa[1], pa[2], pa[3]));\n        r = [\"U\"].concat(res[res.length - 1].slice(-2));\n      } else {\n        for (var k = 0, kk = pa.length; k < kk; k++) {\n          r[k] = pa[k];\n        }\n      }\n\n      pa0 = pa0.toUpperCase();\n\n      if (pa0 != \"O\") {\n        switch (r[0]) {\n          case \"Z\":\n            x = +mx;\n            y = +my;\n            break;\n\n          case \"H\":\n            x = r[1];\n            break;\n\n          case \"V\":\n            y = r[1];\n            break;\n\n          case \"M\":\n            mx = r[r.length - 2];\n            my = r[r.length - 1];\n\n          default:\n            x = r[r.length - 2];\n            y = r[r.length - 1];\n        }\n      }\n    }\n\n    res.toString = toString;\n    pth.abs = pathClone(res);\n    return res;\n  }\n\n  function l2c(x1, y1, x2, y2) {\n    return [x1, y1, x2, y2, x2, y2];\n  }\n\n  function q2c(x1, y1, ax, ay, x2, y2) {\n    var _13 = 1 / 3,\n        _23 = 2 / 3;\n\n    return [_13 * x1 + _23 * ax, _13 * y1 + _23 * ay, _13 * x2 + _23 * ax, _13 * y2 + _23 * ay, x2, y2];\n  }\n\n  function a2c(x1, y1, rx, ry, angle, large_arc_flag, sweep_flag, x2, y2, recursive) {\n    // for more information of where this math came from visit:\n    // http://www.w3.org/TR/SVG11/implnote.html#ArcImplementationNotes\n    var _120 = PI * 120 / 180,\n        rad = PI / 180 * (+angle || 0),\n        res = [],\n        xy,\n        rotate = Snap._.cacher(function (x, y, rad) {\n      var X = x * math.cos(rad) - y * math.sin(rad),\n          Y = x * math.sin(rad) + y * math.cos(rad);\n      return {\n        x: X,\n        y: Y\n      };\n    });\n\n    if (!rx || !ry) {\n      return [x1, y1, x2, y2, x2, y2];\n    }\n\n    if (!recursive) {\n      xy = rotate(x1, y1, -rad);\n      x1 = xy.x;\n      y1 = xy.y;\n      xy = rotate(x2, y2, -rad);\n      x2 = xy.x;\n      y2 = xy.y;\n      var cos = math.cos(PI / 180 * angle),\n          sin = math.sin(PI / 180 * angle),\n          x = (x1 - x2) / 2,\n          y = (y1 - y2) / 2;\n      var h = x * x / (rx * rx) + y * y / (ry * ry);\n\n      if (h > 1) {\n        h = math.sqrt(h);\n        rx = h * rx;\n        ry = h * ry;\n      }\n\n      var rx2 = rx * rx,\n          ry2 = ry * ry,\n          k = (large_arc_flag == sweep_flag ? -1 : 1) * math.sqrt(abs((rx2 * ry2 - rx2 * y * y - ry2 * x * x) / (rx2 * y * y + ry2 * x * x))),\n          cx = k * rx * y / ry + (x1 + x2) / 2,\n          cy = k * -ry * x / rx + (y1 + y2) / 2,\n          f1 = math.asin(((y1 - cy) / ry).toFixed(9)),\n          f2 = math.asin(((y2 - cy) / ry).toFixed(9));\n      f1 = x1 < cx ? PI - f1 : f1;\n      f2 = x2 < cx ? PI - f2 : f2;\n      f1 < 0 && (f1 = PI * 2 + f1);\n      f2 < 0 && (f2 = PI * 2 + f2);\n\n      if (sweep_flag && f1 > f2) {\n        f1 = f1 - PI * 2;\n      }\n\n      if (!sweep_flag && f2 > f1) {\n        f2 = f2 - PI * 2;\n      }\n    } else {\n      f1 = recursive[0];\n      f2 = recursive[1];\n      cx = recursive[2];\n      cy = recursive[3];\n    }\n\n    var df = f2 - f1;\n\n    if (abs(df) > _120) {\n      var f2old = f2,\n          x2old = x2,\n          y2old = y2;\n      f2 = f1 + _120 * (sweep_flag && f2 > f1 ? 1 : -1);\n      x2 = cx + rx * math.cos(f2);\n      y2 = cy + ry * math.sin(f2);\n      res = a2c(x2, y2, rx, ry, angle, 0, sweep_flag, x2old, y2old, [f2, f2old, cx, cy]);\n    }\n\n    df = f2 - f1;\n    var c1 = math.cos(f1),\n        s1 = math.sin(f1),\n        c2 = math.cos(f2),\n        s2 = math.sin(f2),\n        t = math.tan(df / 4),\n        hx = 4 / 3 * rx * t,\n        hy = 4 / 3 * ry * t,\n        m1 = [x1, y1],\n        m2 = [x1 + hx * s1, y1 - hy * c1],\n        m3 = [x2 + hx * s2, y2 - hy * c2],\n        m4 = [x2, y2];\n    m2[0] = 2 * m1[0] - m2[0];\n    m2[1] = 2 * m1[1] - m2[1];\n\n    if (recursive) {\n      return [m2, m3, m4].concat(res);\n    } else {\n      res = [m2, m3, m4].concat(res).join().split(\",\");\n      var newres = [];\n\n      for (var i = 0, ii = res.length; i < ii; i++) {\n        newres[i] = i % 2 ? rotate(res[i - 1], res[i], rad).y : rotate(res[i], res[i + 1], rad).x;\n      }\n\n      return newres;\n    }\n  }\n\n  function findDotAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t) {\n    var t1 = 1 - t;\n    return {\n      x: pow(t1, 3) * p1x + pow(t1, 2) * 3 * t * c1x + t1 * 3 * t * t * c2x + pow(t, 3) * p2x,\n      y: pow(t1, 3) * p1y + pow(t1, 2) * 3 * t * c1y + t1 * 3 * t * t * c2y + pow(t, 3) * p2y\n    };\n  } // Returns bounding box of cubic bezier curve.\n  // Source: http://blog.hackers-cafe.net/2009/06/how-to-calculate-bezier-curves-bounding.html\n  // Original version: NISHIO Hirokazu\n  // Modifications: https://github.com/timo22345\n\n\n  function curveDim(x0, y0, x1, y1, x2, y2, x3, y3) {\n    var tvalues = [],\n        bounds = [[], []],\n        a,\n        b,\n        c,\n        t,\n        t1,\n        t2,\n        b2ac,\n        sqrtb2ac;\n\n    for (var i = 0; i < 2; ++i) {\n      if (i == 0) {\n        b = 6 * x0 - 12 * x1 + 6 * x2;\n        a = -3 * x0 + 9 * x1 - 9 * x2 + 3 * x3;\n        c = 3 * x1 - 3 * x0;\n      } else {\n        b = 6 * y0 - 12 * y1 + 6 * y2;\n        a = -3 * y0 + 9 * y1 - 9 * y2 + 3 * y3;\n        c = 3 * y1 - 3 * y0;\n      }\n\n      if (abs(a) < 1e-12) {\n        if (abs(b) < 1e-12) {\n          continue;\n        }\n\n        t = -c / b;\n\n        if (0 < t && t < 1) {\n          tvalues.push(t);\n        }\n\n        continue;\n      }\n\n      b2ac = b * b - 4 * c * a;\n      sqrtb2ac = math.sqrt(b2ac);\n\n      if (b2ac < 0) {\n        continue;\n      }\n\n      t1 = (-b + sqrtb2ac) / (2 * a);\n\n      if (0 < t1 && t1 < 1) {\n        tvalues.push(t1);\n      }\n\n      t2 = (-b - sqrtb2ac) / (2 * a);\n\n      if (0 < t2 && t2 < 1) {\n        tvalues.push(t2);\n      }\n    }\n\n    var x,\n        y,\n        j = tvalues.length,\n        jlen = j,\n        mt;\n\n    while (j--) {\n      t = tvalues[j];\n      mt = 1 - t;\n      bounds[0][j] = mt * mt * mt * x0 + 3 * mt * mt * t * x1 + 3 * mt * t * t * x2 + t * t * t * x3;\n      bounds[1][j] = mt * mt * mt * y0 + 3 * mt * mt * t * y1 + 3 * mt * t * t * y2 + t * t * t * y3;\n    }\n\n    bounds[0][jlen] = x0;\n    bounds[1][jlen] = y0;\n    bounds[0][jlen + 1] = x3;\n    bounds[1][jlen + 1] = y3;\n    bounds[0].length = bounds[1].length = jlen + 2;\n    return {\n      min: {\n        x: mmin.apply(0, bounds[0]),\n        y: mmin.apply(0, bounds[1])\n      },\n      max: {\n        x: mmax.apply(0, bounds[0]),\n        y: mmax.apply(0, bounds[1])\n      }\n    };\n  }\n\n  function path2curve(path, path2) {\n    var pth = !path2 && paths(path);\n\n    if (!path2 && pth.curve) {\n      return pathClone(pth.curve);\n    }\n\n    var p = pathToAbsolute(path),\n        p2 = path2 && pathToAbsolute(path2),\n        attrs = {\n      x: 0,\n      y: 0,\n      bx: 0,\n      by: 0,\n      X: 0,\n      Y: 0,\n      qx: null,\n      qy: null\n    },\n        attrs2 = {\n      x: 0,\n      y: 0,\n      bx: 0,\n      by: 0,\n      X: 0,\n      Y: 0,\n      qx: null,\n      qy: null\n    },\n        processPath = function processPath(path, d, pcom) {\n      var nx, ny;\n\n      if (!path) {\n        return [\"C\", d.x, d.y, d.x, d.y, d.x, d.y];\n      }\n\n      !(path[0] in {\n        T: 1,\n        Q: 1\n      }) && (d.qx = d.qy = null);\n\n      switch (path[0]) {\n        case \"M\":\n          d.X = path[1];\n          d.Y = path[2];\n          break;\n\n        case \"A\":\n          path = [\"C\"].concat(a2c.apply(0, [d.x, d.y].concat(path.slice(1))));\n          break;\n\n        case \"S\":\n          if (pcom == \"C\" || pcom == \"S\") {\n            // In \"S\" case we have to take into account, if the previous command is C/S.\n            nx = d.x * 2 - d.bx; // And reflect the previous\n\n            ny = d.y * 2 - d.by; // command's control point relative to the current point.\n          } else {\n            // or some else or nothing\n            nx = d.x;\n            ny = d.y;\n          }\n\n          path = [\"C\", nx, ny].concat(path.slice(1));\n          break;\n\n        case \"T\":\n          if (pcom == \"Q\" || pcom == \"T\") {\n            // In \"T\" case we have to take into account, if the previous command is Q/T.\n            d.qx = d.x * 2 - d.qx; // And make a reflection similar\n\n            d.qy = d.y * 2 - d.qy; // to case \"S\".\n          } else {\n            // or something else or nothing\n            d.qx = d.x;\n            d.qy = d.y;\n          }\n\n          path = [\"C\"].concat(q2c(d.x, d.y, d.qx, d.qy, path[1], path[2]));\n          break;\n\n        case \"Q\":\n          d.qx = path[1];\n          d.qy = path[2];\n          path = [\"C\"].concat(q2c(d.x, d.y, path[1], path[2], path[3], path[4]));\n          break;\n\n        case \"L\":\n          path = [\"C\"].concat(l2c(d.x, d.y, path[1], path[2]));\n          break;\n\n        case \"H\":\n          path = [\"C\"].concat(l2c(d.x, d.y, path[1], d.y));\n          break;\n\n        case \"V\":\n          path = [\"C\"].concat(l2c(d.x, d.y, d.x, path[1]));\n          break;\n\n        case \"Z\":\n          path = [\"C\"].concat(l2c(d.x, d.y, d.X, d.Y));\n          break;\n      }\n\n      return path;\n    },\n        fixArc = function fixArc(pp, i) {\n      if (pp[i].length > 7) {\n        pp[i].shift();\n        var pi = pp[i];\n\n        while (pi.length) {\n          pcoms1[i] = \"A\"; // if created multiple C:s, their original seg is saved\n\n          p2 && (pcoms2[i] = \"A\"); // the same as above\n\n          pp.splice(i++, 0, [\"C\"].concat(pi.splice(0, 6)));\n        }\n\n        pp.splice(i, 1);\n        ii = mmax(p.length, p2 && p2.length || 0);\n      }\n    },\n        fixM = function fixM(path1, path2, a1, a2, i) {\n      if (path1 && path2 && path1[i][0] == \"M\" && path2[i][0] != \"M\") {\n        path2.splice(i, 0, [\"M\", a2.x, a2.y]);\n        a1.bx = 0;\n        a1.by = 0;\n        a1.x = path1[i][1];\n        a1.y = path1[i][2];\n        ii = mmax(p.length, p2 && p2.length || 0);\n      }\n    },\n        pcoms1 = [],\n        // path commands of original path p\n    pcoms2 = [],\n        // path commands of original path p2\n    pfirst = \"\",\n        // temporary holder for original path command\n    pcom = \"\"; // holder for previous path command of original path\n\n\n    for (var i = 0, ii = mmax(p.length, p2 && p2.length || 0); i < ii; i++) {\n      p[i] && (pfirst = p[i][0]); // save current path command\n\n      if (pfirst != \"C\") // C is not saved yet, because it may be result of conversion\n        {\n          pcoms1[i] = pfirst; // Save current path command\n\n          i && (pcom = pcoms1[i - 1]); // Get previous path command pcom\n        }\n\n      p[i] = processPath(p[i], attrs, pcom); // Previous path command is inputted to processPath\n\n      if (pcoms1[i] != \"A\" && pfirst == \"C\") pcoms1[i] = \"C\"; // A is the only command\n      // which may produce multiple C:s\n      // so we have to make sure that C is also C in original path\n\n      fixArc(p, i); // fixArc adds also the right amount of A:s to pcoms1\n\n      if (p2) {\n        // the same procedures is done to p2\n        p2[i] && (pfirst = p2[i][0]);\n\n        if (pfirst != \"C\") {\n          pcoms2[i] = pfirst;\n          i && (pcom = pcoms2[i - 1]);\n        }\n\n        p2[i] = processPath(p2[i], attrs2, pcom);\n\n        if (pcoms2[i] != \"A\" && pfirst == \"C\") {\n          pcoms2[i] = \"C\";\n        }\n\n        fixArc(p2, i);\n      }\n\n      fixM(p, p2, attrs, attrs2, i);\n      fixM(p2, p, attrs2, attrs, i);\n      var seg = p[i],\n          seg2 = p2 && p2[i],\n          seglen = seg.length,\n          seg2len = p2 && seg2.length;\n      attrs.x = seg[seglen - 2];\n      attrs.y = seg[seglen - 1];\n      attrs.bx = toFloat(seg[seglen - 4]) || attrs.x;\n      attrs.by = toFloat(seg[seglen - 3]) || attrs.y;\n      attrs2.bx = p2 && (toFloat(seg2[seg2len - 4]) || attrs2.x);\n      attrs2.by = p2 && (toFloat(seg2[seg2len - 3]) || attrs2.y);\n      attrs2.x = p2 && seg2[seg2len - 2];\n      attrs2.y = p2 && seg2[seg2len - 1];\n    }\n\n    if (!p2) {\n      pth.curve = pathClone(p);\n    }\n\n    return p2 ? [p, p2] : p;\n  }\n\n  function mapPath(path, matrix) {\n    if (!matrix) {\n      return path;\n    }\n\n    var x, y, i, j, ii, jj, pathi;\n    path = path2curve(path);\n\n    for (i = 0, ii = path.length; i < ii; i++) {\n      pathi = path[i];\n\n      for (j = 1, jj = pathi.length; j < jj; j += 2) {\n        x = matrix.x(pathi[j], pathi[j + 1]);\n        y = matrix.y(pathi[j], pathi[j + 1]);\n        pathi[j] = x;\n        pathi[j + 1] = y;\n      }\n    }\n\n    return path;\n  } // http://schepers.cc/getting-to-the-point\n\n\n  function catmullRom2bezier(crp, z) {\n    var d = [];\n\n    for (var i = 0, iLen = crp.length; iLen - 2 * !z > i; i += 2) {\n      var p = [{\n        x: +crp[i - 2],\n        y: +crp[i - 1]\n      }, {\n        x: +crp[i],\n        y: +crp[i + 1]\n      }, {\n        x: +crp[i + 2],\n        y: +crp[i + 3]\n      }, {\n        x: +crp[i + 4],\n        y: +crp[i + 5]\n      }];\n\n      if (z) {\n        if (!i) {\n          p[0] = {\n            x: +crp[iLen - 2],\n            y: +crp[iLen - 1]\n          };\n        } else if (iLen - 4 == i) {\n          p[3] = {\n            x: +crp[0],\n            y: +crp[1]\n          };\n        } else if (iLen - 2 == i) {\n          p[2] = {\n            x: +crp[0],\n            y: +crp[1]\n          };\n          p[3] = {\n            x: +crp[2],\n            y: +crp[3]\n          };\n        }\n      } else {\n        if (iLen - 4 == i) {\n          p[3] = p[2];\n        } else if (!i) {\n          p[0] = {\n            x: +crp[i],\n            y: +crp[i + 1]\n          };\n        }\n      }\n\n      d.push([\"C\", (-p[0].x + 6 * p[1].x + p[2].x) / 6, (-p[0].y + 6 * p[1].y + p[2].y) / 6, (p[1].x + 6 * p[2].x - p[3].x) / 6, (p[1].y + 6 * p[2].y - p[3].y) / 6, p[2].x, p[2].y]);\n    }\n\n    return d;\n  } // export\n\n\n  Snap.path = paths;\n  /*\\\n   * Snap.path.getTotalLength\n   [ method ]\n   **\n   * Returns the length of the given path in pixels\n   **\n   - path (string) SVG path string\n   **\n   = (number) length\n  \\*/\n\n  Snap.path.getTotalLength = getTotalLength;\n  /*\\\n   * Snap.path.getPointAtLength\n   [ method ]\n   **\n   * Returns the coordinates of the point located at the given length along the given path\n   **\n   - path (string) SVG path string\n   - length (number) length, in pixels, from the start of the path, excluding non-rendering jumps\n   **\n   = (object) representation of the point:\n   o {\n   o     x: (number) x coordinate,\n   o     y: (number) y coordinate,\n   o     alpha: (number) angle of derivative\n   o }\n  \\*/\n\n  Snap.path.getPointAtLength = getPointAtLength;\n  /*\\\n   * Snap.path.getSubpath\n   [ method ]\n   **\n   * Returns the subpath of a given path between given start and end lengths\n   **\n   - path (string) SVG path string\n   - from (number) length, in pixels, from the start of the path to the start of the segment\n   - to (number) length, in pixels, from the start of the path to the end of the segment\n   **\n   = (string) path string definition for the segment\n  \\*/\n\n  Snap.path.getSubpath = function (path, from, to) {\n    if (this.getTotalLength(path) - to < 1e-6) {\n      return getSubpathsAtLength(path, from).end;\n    }\n\n    var a = getSubpathsAtLength(path, to, 1);\n    return from ? getSubpathsAtLength(a, from).end : a;\n  };\n  /*\\\n   * Element.getTotalLength\n   [ method ]\n   **\n   * Returns the length of the path in pixels (only works for `path` elements)\n   = (number) length\n  \\*/\n\n\n  elproto.getTotalLength = function () {\n    if (this.node.getTotalLength) {\n      return this.node.getTotalLength();\n    }\n  }; // SIERRA Element.getPointAtLength()/Element.getTotalLength(): If a <path> is broken into different segments, is the jump distance to the new coordinates set by the _M_ or _m_ commands calculated as part of the path's total length?\n\n  /*\\\n   * Element.getPointAtLength\n   [ method ]\n   **\n   * Returns coordinates of the point located at the given length on the given path (only works for `path` elements)\n   **\n   - length (number) length, in pixels, from the start of the path, excluding non-rendering jumps\n   **\n   = (object) representation of the point:\n   o {\n   o     x: (number) x coordinate,\n   o     y: (number) y coordinate,\n   o     alpha: (number) angle of derivative\n   o }\n  \\*/\n\n\n  elproto.getPointAtLength = function (length) {\n    return getPointAtLength(this.attr(\"d\"), length);\n  }; // SIERRA Element.getSubpath(): Similar to the problem for Element.getPointAtLength(). Unclear how this would work for a segmented path. Overall, the concept of _subpath_ and what I'm calling a _segment_ (series of non-_M_ or _Z_ commands) is unclear.\n\n  /*\\\n   * Element.getSubpath\n   [ method ]\n   **\n   * Returns subpath of a given element from given start and end lengths (only works for `path` elements)\n   **\n   - from (number) length, in pixels, from the start of the path to the start of the segment\n   - to (number) length, in pixels, from the start of the path to the end of the segment\n   **\n   = (string) path string definition for the segment\n  \\*/\n\n\n  elproto.getSubpath = function (from, to) {\n    return Snap.path.getSubpath(this.attr(\"d\"), from, to);\n  };\n\n  Snap._.box = box;\n  /*\\\n   * Snap.path.findDotsAtSegment\n   [ method ]\n   **\n   * Utility method\n   **\n   * Finds dot coordinates on the given cubic beziér curve at the given t\n   - p1x (number) x of the first point of the curve\n   - p1y (number) y of the first point of the curve\n   - c1x (number) x of the first anchor of the curve\n   - c1y (number) y of the first anchor of the curve\n   - c2x (number) x of the second anchor of the curve\n   - c2y (number) y of the second anchor of the curve\n   - p2x (number) x of the second point of the curve\n   - p2y (number) y of the second point of the curve\n   - t (number) position on the curve (0..1)\n   = (object) point information in format:\n   o {\n   o     x: (number) x coordinate of the point,\n   o     y: (number) y coordinate of the point,\n   o     m: {\n   o         x: (number) x coordinate of the left anchor,\n   o         y: (number) y coordinate of the left anchor\n   o     },\n   o     n: {\n   o         x: (number) x coordinate of the right anchor,\n   o         y: (number) y coordinate of the right anchor\n   o     },\n   o     start: {\n   o         x: (number) x coordinate of the start of the curve,\n   o         y: (number) y coordinate of the start of the curve\n   o     },\n   o     end: {\n   o         x: (number) x coordinate of the end of the curve,\n   o         y: (number) y coordinate of the end of the curve\n   o     },\n   o     alpha: (number) angle of the curve derivative at the point\n   o }\n  \\*/\n\n  Snap.path.findDotsAtSegment = findDotsAtSegment;\n  /*\\\n   * Snap.path.bezierBBox\n   [ method ]\n   **\n   * Utility method\n   **\n   * Returns the bounding box of a given cubic beziér curve\n   - p1x (number) x of the first point of the curve\n   - p1y (number) y of the first point of the curve\n   - c1x (number) x of the first anchor of the curve\n   - c1y (number) y of the first anchor of the curve\n   - c2x (number) x of the second anchor of the curve\n   - c2y (number) y of the second anchor of the curve\n   - p2x (number) x of the second point of the curve\n   - p2y (number) y of the second point of the curve\n   * or\n   - bez (array) array of six points for beziér curve\n   = (object) bounding box\n   o {\n   o     x: (number) x coordinate of the left top point of the box,\n   o     y: (number) y coordinate of the left top point of the box,\n   o     x2: (number) x coordinate of the right bottom point of the box,\n   o     y2: (number) y coordinate of the right bottom point of the box,\n   o     width: (number) width of the box,\n   o     height: (number) height of the box\n   o }\n  \\*/\n\n  Snap.path.bezierBBox = bezierBBox;\n  /*\\\n   * Snap.path.isPointInsideBBox\n   [ method ]\n   **\n   * Utility method\n   **\n   * Returns `true` if given point is inside bounding box\n   - bbox (string) bounding box\n   - x (string) x coordinate of the point\n   - y (string) y coordinate of the point\n   = (boolean) `true` if point is inside\n  \\*/\n\n  Snap.path.isPointInsideBBox = isPointInsideBBox;\n\n  Snap.closest = function (x, y, X, Y) {\n    var r = 100,\n        b = box(x - r / 2, y - r / 2, r, r),\n        inside = [],\n        getter = X[0].hasOwnProperty(\"x\") ? function (i) {\n      return {\n        x: X[i].x,\n        y: X[i].y\n      };\n    } : function (i) {\n      return {\n        x: X[i],\n        y: Y[i]\n      };\n    },\n        found = 0;\n\n    while (r <= 1e6 && !found) {\n      for (var i = 0, ii = X.length; i < ii; i++) {\n        var xy = getter(i);\n\n        if (isPointInsideBBox(b, xy.x, xy.y)) {\n          found++;\n          inside.push(xy);\n          break;\n        }\n      }\n\n      if (!found) {\n        r *= 2;\n        b = box(x - r / 2, y - r / 2, r, r);\n      }\n    }\n\n    if (r == 1e6) {\n      return;\n    }\n\n    var len = Infinity,\n        res;\n\n    for (i = 0, ii = inside.length; i < ii; i++) {\n      var l = Snap.len(x, y, inside[i].x, inside[i].y);\n\n      if (len > l) {\n        len = l;\n        inside[i].len = l;\n        res = inside[i];\n      }\n    }\n\n    return res;\n  };\n  /*\\\n   * Snap.path.isBBoxIntersect\n   [ method ]\n   **\n   * Utility method\n   **\n   * Returns `true` if two bounding boxes intersect\n   - bbox1 (string) first bounding box\n   - bbox2 (string) second bounding box\n   = (boolean) `true` if bounding boxes intersect\n  \\*/\n\n\n  Snap.path.isBBoxIntersect = isBBoxIntersect;\n  /*\\\n   * Snap.path.intersection\n   [ method ]\n   **\n   * Utility method\n   **\n   * Finds intersections of two paths\n   - path1 (string) path string\n   - path2 (string) path string\n   = (array) dots of intersection\n   o [\n   o     {\n   o         x: (number) x coordinate of the point,\n   o         y: (number) y coordinate of the point,\n   o         t1: (number) t value for segment of path1,\n   o         t2: (number) t value for segment of path2,\n   o         segment1: (number) order number for segment of path1,\n   o         segment2: (number) order number for segment of path2,\n   o         bez1: (array) eight coordinates representing beziér curve for the segment of path1,\n   o         bez2: (array) eight coordinates representing beziér curve for the segment of path2\n   o     }\n   o ]\n  \\*/\n\n  Snap.path.intersection = pathIntersection;\n  Snap.path.intersectionNumber = pathIntersectionNumber;\n  /*\\\n   * Snap.path.isPointInside\n   [ method ]\n   **\n   * Utility method\n   **\n   * Returns `true` if given point is inside a given closed path.\n   *\n   * Note: fill mode doesn’t affect the result of this method.\n   - path (string) path string\n   - x (number) x of the point\n   - y (number) y of the point\n   = (boolean) `true` if point is inside the path\n  \\*/\n\n  Snap.path.isPointInside = isPointInsidePath;\n  /*\\\n   * Snap.path.getBBox\n   [ method ]\n   **\n   * Utility method\n   **\n   * Returns the bounding box of a given path\n   - path (string) path string\n   = (object) bounding box\n   o {\n   o     x: (number) x coordinate of the left top point of the box,\n   o     y: (number) y coordinate of the left top point of the box,\n   o     x2: (number) x coordinate of the right bottom point of the box,\n   o     y2: (number) y coordinate of the right bottom point of the box,\n   o     width: (number) width of the box,\n   o     height: (number) height of the box\n   o }\n  \\*/\n\n  Snap.path.getBBox = pathBBox;\n  Snap.path.get = getPath;\n  /*\\\n   * Snap.path.toRelative\n   [ method ]\n   **\n   * Utility method\n   **\n   * Converts path coordinates into relative values\n   - path (string) path string\n   = (array) path string\n  \\*/\n\n  Snap.path.toRelative = pathToRelative;\n  /*\\\n   * Snap.path.toAbsolute\n   [ method ]\n   **\n   * Utility method\n   **\n   * Converts path coordinates into absolute values\n   - path (string) path string\n   = (array) path string\n  \\*/\n\n  Snap.path.toAbsolute = pathToAbsolute;\n  /*\\\n   * Snap.path.toCubic\n   [ method ]\n   **\n   * Utility method\n   **\n   * Converts path to a new path where all segments are cubic beziér curves\n   - pathString (string|array) path string or array of segments\n   = (array) array of segments\n  \\*/\n\n  Snap.path.toCubic = path2curve;\n  /*\\\n   * Snap.path.map\n   [ method ]\n   **\n   * Transform the path string with the given matrix\n   - path (string) path string\n   - matrix (object) see @Matrix\n   = (string) transformed path string\n  \\*/\n\n  Snap.path.map = mapPath;\n  Snap.path.toString = toString;\n  Snap.path.clone = pathClone;\n}); // Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nSnap.plugin(function (Snap, Element, Paper, glob) {\n  var mmax = Math.max,\n      mmin = Math.min; // Set\n\n  var Set = function Set(items) {\n    this.items = [];\n    this.bindings = {};\n    this.length = 0;\n    this.type = \"set\";\n\n    if (items) {\n      for (var i = 0, ii = items.length; i < ii; i++) {\n        if (items[i]) {\n          this[this.items.length] = this.items[this.items.length] = items[i];\n          this.length++;\n        }\n      }\n    }\n  },\n      setproto = Set.prototype;\n  /*\\\n   * Set.push\n   [ method ]\n   **\n   * Adds each argument to the current set\n   = (object) original element\n  \\*/\n\n\n  setproto.push = function () {\n    var item, len;\n\n    for (var i = 0, ii = arguments.length; i < ii; i++) {\n      item = arguments[i];\n\n      if (item) {\n        len = this.items.length;\n        this[len] = this.items[len] = item;\n        this.length++;\n      }\n    }\n\n    return this;\n  };\n  /*\\\n   * Set.pop\n   [ method ]\n   **\n   * Removes last element and returns it\n   = (object) element\n  \\*/\n\n\n  setproto.pop = function () {\n    this.length && delete this[this.length--];\n    return this.items.pop();\n  };\n  /*\\\n   * Set.forEach\n   [ method ]\n   **\n   * Executes given function for each element in the set\n   *\n   * If the function returns `false`, the loop stops running.\n   **\n   - callback (function) function to run\n   - thisArg (object) context object for the callback\n   = (object) Set object\n  \\*/\n\n\n  setproto.forEach = function (callback, thisArg) {\n    for (var i = 0, ii = this.items.length; i < ii; i++) {\n      if (callback.call(thisArg, this.items[i], i) === false) {\n        return this;\n      }\n    }\n\n    return this;\n  };\n  /*\\\n   * Set.animate\n   [ method ]\n   **\n   * Animates each element in set in sync.\n   *\n   **\n   - attrs (object) key-value pairs of destination attributes\n   - duration (number) duration of the animation in milliseconds\n   - easing (function) #optional easing function from @mina or custom\n   - callback (function) #optional callback function that executes when the animation ends\n   * or\n   - animation (array) array of animation parameter for each element in set in format `[attrs, duration, easing, callback]`\n   > Usage\n   | // animate all elements in set to radius 10\n   | set.animate({r: 10}, 500, mina.easein);\n   | // or\n   | // animate first element to radius 10, but second to radius 20 and in different time\n   | set.animate([{r: 10}, 500, mina.easein], [{r: 20}, 1500, mina.easein]);\n   = (Element) the current element\n  \\*/\n\n\n  setproto.animate = function (attrs, ms, easing, callback) {\n    if (typeof easing == \"function\" && !easing.length) {\n      callback = easing;\n      easing = mina.linear;\n    }\n\n    if (attrs instanceof Snap._.Animation) {\n      callback = attrs.callback;\n      easing = attrs.easing;\n      ms = easing.dur;\n      attrs = attrs.attr;\n    }\n\n    var args = arguments;\n\n    if (Snap.is(attrs, \"array\") && Snap.is(args[args.length - 1], \"array\")) {\n      var each = true;\n    }\n\n    var begin,\n        handler = function handler() {\n      if (begin) {\n        this.b = begin;\n      } else {\n        begin = this.b;\n      }\n    },\n        cb = 0,\n        set = this,\n        callbacker = callback && function () {\n      if (++cb == set.length) {\n        callback.call(this);\n      }\n    };\n\n    return this.forEach(function (el, i) {\n      eve.once(\"snap.animcreated.\" + el.id, handler);\n\n      if (each) {\n        args[i] && el.animate.apply(el, args[i]);\n      } else {\n        el.animate(attrs, ms, easing, callbacker);\n      }\n    });\n  };\n  /*\\\n   * Set.remove\n   [ method ]\n   **\n   * Removes all children of the set.\n   *\n   = (object) Set object\n  \\*/\n\n\n  setproto.remove = function () {\n    while (this.length) {\n      this.pop().remove();\n    }\n\n    return this;\n  };\n  /*\\\n   * Set.bind\n   [ method ]\n   **\n   * Specifies how to handle a specific attribute when applied\n   * to a set.\n   *\n   **\n   - attr (string) attribute name\n   - callback (function) function to run\n   * or\n   - attr (string) attribute name\n   - element (Element) specific element in the set to apply the attribute to\n   * or\n   - attr (string) attribute name\n   - element (Element) specific element in the set to apply the attribute to\n   - eattr (string) attribute on the element to bind the attribute to\n   = (object) Set object\n  \\*/\n\n\n  setproto.bind = function (attr, a, b) {\n    var data = {};\n\n    if (typeof a == \"function\") {\n      this.bindings[attr] = a;\n    } else {\n      var aname = b || attr;\n\n      this.bindings[attr] = function (v) {\n        data[aname] = v;\n        a.attr(data);\n      };\n    }\n\n    return this;\n  };\n  /*\\\n   * Set.attr\n   [ method ]\n   **\n   * Equivalent of @Element.attr.\n   = (object) Set object\n  \\*/\n\n\n  setproto.attr = function (value) {\n    var unbound = {};\n\n    for (var k in value) {\n      if (this.bindings[k]) {\n        this.bindings[k](value[k]);\n      } else {\n        unbound[k] = value[k];\n      }\n    }\n\n    for (var i = 0, ii = this.items.length; i < ii; i++) {\n      this.items[i].attr(unbound);\n    }\n\n    return this;\n  };\n  /*\\\n   * Set.clear\n   [ method ]\n   **\n   * Removes all elements from the set\n  \\*/\n\n\n  setproto.clear = function () {\n    while (this.length) {\n      this.pop();\n    }\n  };\n  /*\\\n   * Set.splice\n   [ method ]\n   **\n   * Removes range of elements from the set\n   **\n   - index (number) position of the deletion\n   - count (number) number of element to remove\n   - insertion… (object) #optional elements to insert\n   = (object) set elements that were deleted\n  \\*/\n\n\n  setproto.splice = function (index, count, insertion) {\n    index = index < 0 ? mmax(this.length + index, 0) : index;\n    count = mmax(0, mmin(this.length - index, count));\n    var tail = [],\n        todel = [],\n        args = [],\n        i;\n\n    for (i = 2; i < arguments.length; i++) {\n      args.push(arguments[i]);\n    }\n\n    for (i = 0; i < count; i++) {\n      todel.push(this[index + i]);\n    }\n\n    for (; i < this.length - index; i++) {\n      tail.push(this[index + i]);\n    }\n\n    var arglen = args.length;\n\n    for (i = 0; i < arglen + tail.length; i++) {\n      this.items[index + i] = this[index + i] = i < arglen ? args[i] : tail[i - arglen];\n    }\n\n    i = this.items.length = this.length -= count - arglen;\n\n    while (this[i]) {\n      delete this[i++];\n    }\n\n    return new Set(todel);\n  };\n  /*\\\n   * Set.exclude\n   [ method ]\n   **\n   * Removes given element from the set\n   **\n   - element (object) element to remove\n   = (boolean) `true` if object was found and removed from the set\n  \\*/\n\n\n  setproto.exclude = function (el) {\n    for (var i = 0, ii = this.length; i < ii; i++) {\n      if (this[i] == el) {\n        this.splice(i, 1);\n        return true;\n      }\n    }\n\n    return false;\n  };\n  /*\\\n   * Set.insertAfter\n   [ method ]\n   **\n   * Inserts set elements after given element.\n   **\n   - element (object) set will be inserted after this element\n   = (object) Set object\n  \\*/\n\n\n  setproto.insertAfter = function (el) {\n    var i = this.items.length;\n\n    while (i--) {\n      this.items[i].insertAfter(el);\n    }\n\n    return this;\n  };\n  /*\\\n   * Set.getBBox\n   [ method ]\n   **\n   * Union of all bboxes of the set. See @Element.getBBox.\n   = (object) bounding box descriptor. See @Element.getBBox.\n  \\*/\n\n\n  setproto.getBBox = function () {\n    var x = [],\n        y = [],\n        x2 = [],\n        y2 = [];\n\n    for (var i = this.items.length; i--;) {\n      if (!this.items[i].removed) {\n        var box = this.items[i].getBBox();\n        x.push(box.x);\n        y.push(box.y);\n        x2.push(box.x + box.width);\n        y2.push(box.y + box.height);\n      }\n    }\n\n    x = mmin.apply(0, x);\n    y = mmin.apply(0, y);\n    x2 = mmax.apply(0, x2);\n    y2 = mmax.apply(0, y2);\n    return {\n      x: x,\n      y: y,\n      x2: x2,\n      y2: y2,\n      width: x2 - x,\n      height: y2 - y,\n      cx: x + (x2 - x) / 2,\n      cy: y + (y2 - y) / 2\n    };\n  };\n  /*\\\n   * Set.insertAfter\n   [ method ]\n   **\n   * Creates a clone of the set.\n   **\n   = (object) New Set object\n  \\*/\n\n\n  setproto.clone = function (s) {\n    s = new Set();\n\n    for (var i = 0, ii = this.items.length; i < ii; i++) {\n      s.push(this.items[i].clone());\n    }\n\n    return s;\n  };\n\n  setproto.toString = function () {\n    return \"Snap\\u2018s set\";\n  };\n\n  setproto.type = \"set\"; // export\n\n  /*\\\n   * Snap.Set\n   [ property ]\n   **\n   * Set constructor.\n  \\*/\n\n  Snap.Set = Set;\n  /*\\\n   * Snap.set\n   [ method ]\n   **\n   * Creates a set and fills it with list of arguments.\n   **\n   = (object) New Set object\n   | var r = paper.rect(0, 0, 10, 10),\n   |     s1 = Snap.set(), // empty set\n   |     s2 = Snap.set(r, paper.circle(100, 100, 20)); // prefilled set\n  \\*/\n\n  Snap.set = function () {\n    var set = new Set();\n\n    if (arguments.length) {\n      set.push.apply(set, Array.prototype.slice.call(arguments, 0));\n    }\n\n    return set;\n  };\n}); // Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nSnap.plugin(function (Snap, Element, Paper, glob) {\n  var names = {},\n      reUnit = /[%a-z]+$/i,\n      Str = String;\n  names.stroke = names.fill = \"colour\";\n\n  function getEmpty(item) {\n    var l = item[0];\n\n    switch (l.toLowerCase()) {\n      case \"t\":\n        return [l, 0, 0];\n\n      case \"m\":\n        return [l, 1, 0, 0, 1, 0, 0];\n\n      case \"r\":\n        if (item.length == 4) {\n          return [l, 0, item[2], item[3]];\n        } else {\n          return [l, 0];\n        }\n\n      case \"s\":\n        if (item.length == 5) {\n          return [l, 1, 1, item[3], item[4]];\n        } else if (item.length == 3) {\n          return [l, 1, 1];\n        } else {\n          return [l, 1];\n        }\n\n    }\n  }\n\n  function equaliseTransform(t1, t2, getBBox) {\n    t1 = t1 || new Snap.Matrix();\n    t2 = t2 || new Snap.Matrix();\n    t1 = Snap.parseTransformString(t1.toTransformString()) || [];\n    t2 = Snap.parseTransformString(t2.toTransformString()) || [];\n    var maxlength = Math.max(t1.length, t2.length),\n        from = [],\n        to = [],\n        i = 0,\n        j,\n        jj,\n        tt1,\n        tt2;\n\n    for (; i < maxlength; i++) {\n      tt1 = t1[i] || getEmpty(t2[i]);\n      tt2 = t2[i] || getEmpty(tt1);\n\n      if (tt1[0] != tt2[0] || tt1[0].toLowerCase() == \"r\" && (tt1[2] != tt2[2] || tt1[3] != tt2[3]) || tt1[0].toLowerCase() == \"s\" && (tt1[3] != tt2[3] || tt1[4] != tt2[4])) {\n        t1 = Snap._.transform2matrix(t1, getBBox());\n        t2 = Snap._.transform2matrix(t2, getBBox());\n        from = [[\"m\", t1.a, t1.b, t1.c, t1.d, t1.e, t1.f]];\n        to = [[\"m\", t2.a, t2.b, t2.c, t2.d, t2.e, t2.f]];\n        break;\n      }\n\n      from[i] = [];\n      to[i] = [];\n\n      for (j = 0, jj = Math.max(tt1.length, tt2.length); j < jj; j++) {\n        j in tt1 && (from[i][j] = tt1[j]);\n        j in tt2 && (to[i][j] = tt2[j]);\n      }\n    }\n\n    return {\n      from: path2array(from),\n      to: path2array(to),\n      f: getPath(from)\n    };\n  }\n\n  function getNumber(val) {\n    return val;\n  }\n\n  function getUnit(unit) {\n    return function (val) {\n      return +val.toFixed(3) + unit;\n    };\n  }\n\n  function getViewBox(val) {\n    return val.join(\" \");\n  }\n\n  function getColour(clr) {\n    return Snap.rgb(clr[0], clr[1], clr[2], clr[3]);\n  }\n\n  function getPath(path) {\n    var k = 0,\n        i,\n        ii,\n        j,\n        jj,\n        out,\n        a,\n        b = [];\n\n    for (i = 0, ii = path.length; i < ii; i++) {\n      out = \"[\";\n      a = ['\"' + path[i][0] + '\"'];\n\n      for (j = 1, jj = path[i].length; j < jj; j++) {\n        a[j] = \"val[\" + k++ + \"]\";\n      }\n\n      out += a + \"]\";\n      b[i] = out;\n    }\n\n    return Function(\"val\", \"return Snap.path.toString.call([\" + b + \"])\");\n  }\n\n  function path2array(path) {\n    var out = [];\n\n    for (var i = 0, ii = path.length; i < ii; i++) {\n      for (var j = 1, jj = path[i].length; j < jj; j++) {\n        out.push(path[i][j]);\n      }\n    }\n\n    return out;\n  }\n\n  function isNumeric(obj) {\n    return isFinite(obj);\n  }\n\n  function arrayEqual(arr1, arr2) {\n    if (!Snap.is(arr1, \"array\") || !Snap.is(arr2, \"array\")) {\n      return false;\n    }\n\n    return arr1.toString() == arr2.toString();\n  }\n\n  Element.prototype.equal = function (name, b) {\n    return eve(\"snap.util.equal\", this, name, b).firstDefined();\n  };\n\n  eve.on(\"snap.util.equal\", function (name, b) {\n    var A,\n        B,\n        a = Str(this.attr(name) || \"\"),\n        el = this;\n\n    if (names[name] == \"colour\") {\n      A = Snap.color(a);\n      B = Snap.color(b);\n      return {\n        from: [A.r, A.g, A.b, A.opacity],\n        to: [B.r, B.g, B.b, B.opacity],\n        f: getColour\n      };\n    }\n\n    if (name == \"viewBox\") {\n      A = this.attr(name).vb.split(\" \").map(Number);\n      B = b.split(\" \").map(Number);\n      return {\n        from: A,\n        to: B,\n        f: getViewBox\n      };\n    }\n\n    if (name == \"transform\" || name == \"gradientTransform\" || name == \"patternTransform\") {\n      if (typeof b == \"string\") {\n        b = Str(b).replace(/\\.{3}|\\u2026/g, a);\n      }\n\n      a = this.matrix;\n\n      if (!Snap._.rgTransform.test(b)) {\n        b = Snap._.transform2matrix(Snap._.svgTransform2string(b), this.getBBox());\n      } else {\n        b = Snap._.transform2matrix(b, this.getBBox());\n      }\n\n      return equaliseTransform(a, b, function () {\n        return el.getBBox(1);\n      });\n    }\n\n    if (name == \"d\" || name == \"path\") {\n      A = Snap.path.toCubic(a, b);\n      return {\n        from: path2array(A[0]),\n        to: path2array(A[1]),\n        f: getPath(A[0])\n      };\n    }\n\n    if (name == \"points\") {\n      A = Str(a).split(Snap._.separator);\n      B = Str(b).split(Snap._.separator);\n      return {\n        from: A,\n        to: B,\n        f: function f(val) {\n          return val;\n        }\n      };\n    }\n\n    if (isNumeric(a) && isNumeric(b)) {\n      return {\n        from: parseFloat(a),\n        to: parseFloat(b),\n        f: getNumber\n      };\n    }\n\n    var aUnit = a.match(reUnit),\n        bUnit = Str(b).match(reUnit);\n\n    if (aUnit && arrayEqual(aUnit, bUnit)) {\n      return {\n        from: parseFloat(a),\n        to: parseFloat(b),\n        f: getUnit(aUnit)\n      };\n    } else {\n      return {\n        from: this.asPX(name),\n        to: this.asPX(name, b),\n        f: getNumber\n      };\n    }\n  });\n}); // Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n// \n// http://www.apache.org/licenses/LICENSE-2.0\n// \n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nSnap.plugin(function (Snap, Element, Paper, glob) {\n  var elproto = Element.prototype,\n      has = \"hasOwnProperty\",\n      supportsTouch = \"createTouch\" in glob.doc,\n      events = [\"click\", \"dblclick\", \"mousedown\", \"mousemove\", \"mouseout\", \"mouseover\", \"mouseup\", \"touchstart\", \"touchmove\", \"touchend\", \"touchcancel\"],\n      touchMap = {\n    mousedown: \"touchstart\",\n    mousemove: \"touchmove\",\n    mouseup: \"touchend\"\n  },\n      getScroll = function getScroll(xy, el) {\n    var name = xy == \"y\" ? \"scrollTop\" : \"scrollLeft\",\n        doc = el && el.node ? el.node.ownerDocument : glob.doc;\n    return doc[name in doc.documentElement ? \"documentElement\" : \"body\"][name];\n  },\n      preventDefault = function preventDefault() {\n    this.returnValue = false;\n  },\n      preventTouch = function preventTouch() {\n    return this.originalEvent.preventDefault();\n  },\n      stopPropagation = function stopPropagation() {\n    this.cancelBubble = true;\n  },\n      stopTouch = function stopTouch() {\n    return this.originalEvent.stopPropagation();\n  },\n      addEvent = function addEvent(obj, type, fn, element) {\n    var realName = supportsTouch && touchMap[type] ? touchMap[type] : type,\n        f = function f(e) {\n      var scrollY = getScroll(\"y\", element),\n          scrollX = getScroll(\"x\", element);\n\n      if (supportsTouch && touchMap[has](type)) {\n        for (var i = 0, ii = e.targetTouches && e.targetTouches.length; i < ii; i++) {\n          if (e.targetTouches[i].target == obj || obj.contains(e.targetTouches[i].target)) {\n            var olde = e;\n            e = e.targetTouches[i];\n            e.originalEvent = olde;\n            e.preventDefault = preventTouch;\n            e.stopPropagation = stopTouch;\n            break;\n          }\n        }\n      }\n\n      var x = e.clientX + scrollX,\n          y = e.clientY + scrollY;\n      return fn.call(element, e, x, y);\n    };\n\n    if (type !== realName) {\n      obj.addEventListener(type, f, false);\n    }\n\n    obj.addEventListener(realName, f, false);\n    return function () {\n      if (type !== realName) {\n        obj.removeEventListener(type, f, false);\n      }\n\n      obj.removeEventListener(realName, f, false);\n      return true;\n    };\n  },\n      drag = [],\n      dragMove = function dragMove(e) {\n    var x = e.clientX,\n        y = e.clientY,\n        scrollY = getScroll(\"y\"),\n        scrollX = getScroll(\"x\"),\n        dragi,\n        j = drag.length;\n\n    while (j--) {\n      dragi = drag[j];\n\n      if (supportsTouch) {\n        var i = e.touches && e.touches.length,\n            touch;\n\n        while (i--) {\n          touch = e.touches[i];\n\n          if (touch.identifier == dragi.el._drag.id || dragi.el.node.contains(touch.target)) {\n            x = touch.clientX;\n            y = touch.clientY;\n            (e.originalEvent ? e.originalEvent : e).preventDefault();\n            break;\n          }\n        }\n      } else {\n        e.preventDefault();\n      }\n\n      var node = dragi.el.node,\n          o,\n          next = node.nextSibling,\n          parent = node.parentNode,\n          display = node.style.display; // glob.win.opera && parent.removeChild(node);\n      // node.style.display = \"none\";\n      // o = dragi.el.paper.getElementByPoint(x, y);\n      // node.style.display = display;\n      // glob.win.opera && (next ? parent.insertBefore(node, next) : parent.appendChild(node));\n      // o && eve(\"snap.drag.over.\" + dragi.el.id, dragi.el, o);\n\n      x += scrollX;\n      y += scrollY;\n      eve(\"snap.drag.move.\" + dragi.el.id, dragi.move_scope || dragi.el, x - dragi.el._drag.x, y - dragi.el._drag.y, x, y, e);\n    }\n  },\n      dragUp = function dragUp(e) {\n    Snap.unmousemove(dragMove).unmouseup(dragUp);\n    var i = drag.length,\n        dragi;\n\n    while (i--) {\n      dragi = drag[i];\n      dragi.el._drag = {};\n      eve(\"snap.drag.end.\" + dragi.el.id, dragi.end_scope || dragi.start_scope || dragi.move_scope || dragi.el, e);\n      eve.off(\"snap.drag.*.\" + dragi.el.id);\n    }\n\n    drag = [];\n  };\n  /*\\\n   * Element.click\n   [ method ]\n   **\n   * Adds a click event handler to the element\n   - handler (function) handler for the event\n   = (object) @Element\n  \\*/\n\n  /*\\\n   * Element.unclick\n   [ method ]\n   **\n   * Removes a click event handler from the element\n   - handler (function) handler for the event\n   = (object) @Element\n  \\*/\n\n  /*\\\n   * Element.dblclick\n   [ method ]\n   **\n   * Adds a double click event handler to the element\n   - handler (function) handler for the event\n   = (object) @Element\n  \\*/\n\n  /*\\\n   * Element.undblclick\n   [ method ]\n   **\n   * Removes a double click event handler from the element\n   - handler (function) handler for the event\n   = (object) @Element\n  \\*/\n\n  /*\\\n   * Element.mousedown\n   [ method ]\n   **\n   * Adds a mousedown event handler to the element\n   - handler (function) handler for the event\n   = (object) @Element\n  \\*/\n\n  /*\\\n   * Element.unmousedown\n   [ method ]\n   **\n   * Removes a mousedown event handler from the element\n   - handler (function) handler for the event\n   = (object) @Element\n  \\*/\n\n  /*\\\n   * Element.mousemove\n   [ method ]\n   **\n   * Adds a mousemove event handler to the element\n   - handler (function) handler for the event\n   = (object) @Element\n  \\*/\n\n  /*\\\n   * Element.unmousemove\n   [ method ]\n   **\n   * Removes a mousemove event handler from the element\n   - handler (function) handler for the event\n   = (object) @Element\n  \\*/\n\n  /*\\\n   * Element.mouseout\n   [ method ]\n   **\n   * Adds a mouseout event handler to the element\n   - handler (function) handler for the event\n   = (object) @Element\n  \\*/\n\n  /*\\\n   * Element.unmouseout\n   [ method ]\n   **\n   * Removes a mouseout event handler from the element\n   - handler (function) handler for the event\n   = (object) @Element\n  \\*/\n\n  /*\\\n   * Element.mouseover\n   [ method ]\n   **\n   * Adds a mouseover event handler to the element\n   - handler (function) handler for the event\n   = (object) @Element\n  \\*/\n\n  /*\\\n   * Element.unmouseover\n   [ method ]\n   **\n   * Removes a mouseover event handler from the element\n   - handler (function) handler for the event\n   = (object) @Element\n  \\*/\n\n  /*\\\n   * Element.mouseup\n   [ method ]\n   **\n   * Adds a mouseup event handler to the element\n   - handler (function) handler for the event\n   = (object) @Element\n  \\*/\n\n  /*\\\n   * Element.unmouseup\n   [ method ]\n   **\n   * Removes a mouseup event handler from the element\n   - handler (function) handler for the event\n   = (object) @Element\n  \\*/\n\n  /*\\\n   * Element.touchstart\n   [ method ]\n   **\n   * Adds a touchstart event handler to the element\n   - handler (function) handler for the event\n   = (object) @Element\n  \\*/\n\n  /*\\\n   * Element.untouchstart\n   [ method ]\n   **\n   * Removes a touchstart event handler from the element\n   - handler (function) handler for the event\n   = (object) @Element\n  \\*/\n\n  /*\\\n   * Element.touchmove\n   [ method ]\n   **\n   * Adds a touchmove event handler to the element\n   - handler (function) handler for the event\n   = (object) @Element\n  \\*/\n\n  /*\\\n   * Element.untouchmove\n   [ method ]\n   **\n   * Removes a touchmove event handler from the element\n   - handler (function) handler for the event\n   = (object) @Element\n  \\*/\n\n  /*\\\n   * Element.touchend\n   [ method ]\n   **\n   * Adds a touchend event handler to the element\n   - handler (function) handler for the event\n   = (object) @Element\n  \\*/\n\n  /*\\\n   * Element.untouchend\n   [ method ]\n   **\n   * Removes a touchend event handler from the element\n   - handler (function) handler for the event\n   = (object) @Element\n  \\*/\n\n  /*\\\n   * Element.touchcancel\n   [ method ]\n   **\n   * Adds a touchcancel event handler to the element\n   - handler (function) handler for the event\n   = (object) @Element\n  \\*/\n\n  /*\\\n   * Element.untouchcancel\n   [ method ]\n   **\n   * Removes a touchcancel event handler from the element\n   - handler (function) handler for the event\n   = (object) @Element\n  \\*/\n\n\n  for (var i = events.length; i--;) {\n    (function (eventName) {\n      Snap[eventName] = elproto[eventName] = function (fn, scope) {\n        if (Snap.is(fn, \"function\")) {\n          this.events = this.events || [];\n          this.events.push({\n            name: eventName,\n            f: fn,\n            unbind: addEvent(this.node || document, eventName, fn, scope || this)\n          });\n        } else {\n          for (var i = 0, ii = this.events.length; i < ii; i++) {\n            if (this.events[i].name == eventName) {\n              try {\n                this.events[i].f.call(this);\n              } catch (e) {}\n            }\n          }\n        }\n\n        return this;\n      };\n\n      Snap[\"un\" + eventName] = elproto[\"un\" + eventName] = function (fn) {\n        var events = this.events || [],\n            l = events.length;\n\n        while (l--) {\n          if (events[l].name == eventName && (events[l].f == fn || !fn)) {\n            events[l].unbind();\n            events.splice(l, 1);\n            !events.length && delete this.events;\n            return this;\n          }\n        }\n\n        return this;\n      };\n    })(events[i]);\n  }\n  /*\\\n   * Element.hover\n   [ method ]\n   **\n   * Adds hover event handlers to the element\n   - f_in (function) handler for hover in\n   - f_out (function) handler for hover out\n   - icontext (object) #optional context for hover in handler\n   - ocontext (object) #optional context for hover out handler\n   = (object) @Element\n  \\*/\n\n\n  elproto.hover = function (f_in, f_out, scope_in, scope_out) {\n    return this.mouseover(f_in, scope_in).mouseout(f_out, scope_out || scope_in);\n  };\n  /*\\\n   * Element.unhover\n   [ method ]\n   **\n   * Removes hover event handlers from the element\n   - f_in (function) handler for hover in\n   - f_out (function) handler for hover out\n   = (object) @Element\n  \\*/\n\n\n  elproto.unhover = function (f_in, f_out) {\n    return this.unmouseover(f_in).unmouseout(f_out);\n  };\n\n  var draggable = []; // SIERRA unclear what _context_ refers to for starting, ending, moving the drag gesture.\n  // SIERRA Element.drag(): _x position of the mouse_: Where are the x/y values offset from?\n  // SIERRA Element.drag(): much of this member's doc appears to be duplicated for some reason.\n  // SIERRA Unclear about this sentence: _Additionally following drag events will be triggered: drag.start.<id> on start, drag.end.<id> on end and drag.move.<id> on every move._ Is there a global _drag_ object to which you can assign handlers keyed by an element's ID?\n\n  /*\\\n   * Element.drag\n   [ method ]\n   **\n   * Adds event handlers for an element's drag gesture\n   **\n   - onmove (function) handler for moving\n   - onstart (function) handler for drag start\n   - onend (function) handler for drag end\n   - mcontext (object) #optional context for moving handler\n   - scontext (object) #optional context for drag start handler\n   - econtext (object) #optional context for drag end handler\n   * Additionaly following `drag` events are triggered: `drag.start.<id>` on start, \n   * `drag.end.<id>` on end and `drag.move.<id>` on every move. When element is dragged over another element \n   * `drag.over.<id>` fires as well.\n   *\n   * Start event and start handler are called in specified context or in context of the element with following parameters:\n   o x (number) x position of the mouse\n   o y (number) y position of the mouse\n   o event (object) DOM event object\n   * Move event and move handler are called in specified context or in context of the element with following parameters:\n   o dx (number) shift by x from the start point\n   o dy (number) shift by y from the start point\n   o x (number) x position of the mouse\n   o y (number) y position of the mouse\n   o event (object) DOM event object\n   * End event and end handler are called in specified context or in context of the element with following parameters:\n   o event (object) DOM event object\n   = (object) @Element\n  \\*/\n\n  elproto.drag = function (onmove, onstart, onend, move_scope, start_scope, end_scope) {\n    var el = this;\n\n    if (!arguments.length) {\n      var origTransform;\n      return el.drag(function (dx, dy) {\n        this.attr({\n          transform: origTransform + (origTransform ? \"T\" : \"t\") + [dx, dy]\n        });\n      }, function () {\n        origTransform = this.transform().local;\n      });\n    }\n\n    function start(e, x, y) {\n      (e.originalEvent || e).preventDefault();\n      el._drag.x = x;\n      el._drag.y = y;\n      el._drag.id = e.identifier;\n      !drag.length && Snap.mousemove(dragMove).mouseup(dragUp);\n      drag.push({\n        el: el,\n        move_scope: move_scope,\n        start_scope: start_scope,\n        end_scope: end_scope\n      });\n      onstart && eve.on(\"snap.drag.start.\" + el.id, onstart);\n      onmove && eve.on(\"snap.drag.move.\" + el.id, onmove);\n      onend && eve.on(\"snap.drag.end.\" + el.id, onend);\n      eve(\"snap.drag.start.\" + el.id, start_scope || move_scope || el, x, y, e);\n    }\n\n    function init(e, x, y) {\n      eve(\"snap.draginit.\" + el.id, el, e, x, y);\n    }\n\n    eve.on(\"snap.draginit.\" + el.id, start);\n    el._drag = {};\n    draggable.push({\n      el: el,\n      start: start,\n      init: init\n    });\n    el.mousedown(init);\n    return el;\n  };\n  /*\n   * Element.onDragOver\n   [ method ]\n   **\n   * Shortcut to assign event handler for `drag.over.<id>` event, where `id` is the element's `id` (see @Element.id)\n   - f (function) handler for event, first argument would be the element you are dragging over\n  \\*/\n  // elproto.onDragOver = function (f) {\n  //     f ? eve.on(\"snap.drag.over.\" + this.id, f) : eve.unbind(\"snap.drag.over.\" + this.id);\n  // };\n\n  /*\\\n   * Element.undrag\n   [ method ]\n   **\n   * Removes all drag event handlers from the given element\n  \\*/\n\n\n  elproto.undrag = function () {\n    var i = draggable.length;\n\n    while (i--) {\n      if (draggable[i].el == this) {\n        this.unmousedown(draggable[i].init);\n        draggable.splice(i, 1);\n        eve.unbind(\"snap.drag.*.\" + this.id);\n        eve.unbind(\"snap.draginit.\" + this.id);\n      }\n    }\n\n    !draggable.length && Snap.unmousemove(dragMove).unmouseup(dragUp);\n    return this;\n  };\n}); // Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nSnap.plugin(function (Snap, Element, Paper, glob) {\n  var elproto = Element.prototype,\n      pproto = Paper.prototype,\n      rgurl = /^\\s*url\\((.+)\\)/,\n      Str = String,\n      $ = Snap._.$;\n  Snap.filter = {};\n  /*\\\n   * Paper.filter\n   [ method ]\n   **\n   * Creates a `<filter>` element\n   **\n   - filstr (string) SVG fragment of filter provided as a string\n   = (object) @Element\n   * Note: It is recommended to use filters embedded into the page inside an empty SVG element.\n   > Usage\n   | var f = paper.filter('<feGaussianBlur stdDeviation=\"2\"/>'),\n   |     c = paper.circle(10, 10, 10).attr({\n   |         filter: f\n   |     });\n  \\*/\n\n  pproto.filter = function (filstr) {\n    var paper = this;\n\n    if (paper.type != \"svg\") {\n      paper = paper.paper;\n    }\n\n    var f = Snap.parse(Str(filstr)),\n        id = Snap._.id(),\n        width = paper.node.offsetWidth,\n        height = paper.node.offsetHeight,\n        filter = $(\"filter\");\n\n    $(filter, {\n      id: id,\n      filterUnits: \"userSpaceOnUse\"\n    });\n    filter.appendChild(f.node);\n    paper.defs.appendChild(filter);\n    return new Element(filter);\n  };\n\n  eve.on(\"snap.util.getattr.filter\", function () {\n    eve.stop();\n    var p = $(this.node, \"filter\");\n\n    if (p) {\n      var match = Str(p).match(rgurl);\n      return match && Snap.select(match[1]);\n    }\n  });\n  eve.on(\"snap.util.attr.filter\", function (value) {\n    if (value instanceof Element && value.type == \"filter\") {\n      eve.stop();\n      var id = value.node.id;\n\n      if (!id) {\n        $(value.node, {\n          id: value.id\n        });\n        id = value.id;\n      }\n\n      $(this.node, {\n        filter: Snap.url(id)\n      });\n    }\n\n    if (!value || value == \"none\") {\n      eve.stop();\n      this.node.removeAttribute(\"filter\");\n    }\n  });\n  /*\\\n   * Snap.filter.blur\n   [ method ]\n   **\n   * Returns an SVG markup string for the blur filter\n   **\n   - x (number) amount of horizontal blur, in pixels\n   - y (number) #optional amount of vertical blur, in pixels\n   = (string) filter representation\n   > Usage\n   | var f = paper.filter(Snap.filter.blur(5, 10)),\n   |     c = paper.circle(10, 10, 10).attr({\n   |         filter: f\n   |     });\n  \\*/\n\n  Snap.filter.blur = function (x, y) {\n    if (x == null) {\n      x = 2;\n    }\n\n    var def = y == null ? x : [x, y];\n    return Snap.format('\\<feGaussianBlur stdDeviation=\"{def}\"/>', {\n      def: def\n    });\n  };\n\n  Snap.filter.blur.toString = function () {\n    return this();\n  };\n  /*\\\n   * Snap.filter.shadow\n   [ method ]\n   **\n   * Returns an SVG markup string for the shadow filter\n   **\n   - dx (number) #optional horizontal shift of the shadow, in pixels\n   - dy (number) #optional vertical shift of the shadow, in pixels\n   - blur (number) #optional amount of blur\n   - color (string) #optional color of the shadow\n   - opacity (number) #optional `0..1` opacity of the shadow\n   * or\n   - dx (number) #optional horizontal shift of the shadow, in pixels\n   - dy (number) #optional vertical shift of the shadow, in pixels\n   - color (string) #optional color of the shadow\n   - opacity (number) #optional `0..1` opacity of the shadow\n   * which makes blur default to `4`. Or\n   - dx (number) #optional horizontal shift of the shadow, in pixels\n   - dy (number) #optional vertical shift of the shadow, in pixels\n   - opacity (number) #optional `0..1` opacity of the shadow\n   = (string) filter representation\n   > Usage\n   | var f = paper.filter(Snap.filter.shadow(0, 2, .3)),\n   |     c = paper.circle(10, 10, 10).attr({\n   |         filter: f\n   |     });\n  \\*/\n\n\n  Snap.filter.shadow = function (dx, dy, blur, color, opacity) {\n    if (opacity == null) {\n      if (color == null) {\n        opacity = blur;\n        blur = 4;\n        color = \"#000\";\n      } else {\n        opacity = color;\n        color = blur;\n        blur = 4;\n      }\n    }\n\n    if (blur == null) {\n      blur = 4;\n    }\n\n    if (opacity == null) {\n      opacity = 1;\n    }\n\n    if (dx == null) {\n      dx = 0;\n      dy = 2;\n    }\n\n    if (dy == null) {\n      dy = dx;\n    }\n\n    color = Snap.color(color);\n    return Snap.format('<feGaussianBlur in=\"SourceAlpha\" stdDeviation=\"{blur}\"/><feOffset dx=\"{dx}\" dy=\"{dy}\" result=\"offsetblur\"/><feFlood flood-color=\"{color}\"/><feComposite in2=\"offsetblur\" operator=\"in\"/><feComponentTransfer><feFuncA type=\"linear\" slope=\"{opacity}\"/></feComponentTransfer><feMerge><feMergeNode/><feMergeNode in=\"SourceGraphic\"/></feMerge>', {\n      color: color,\n      dx: dx,\n      dy: dy,\n      blur: blur,\n      opacity: opacity\n    });\n  };\n\n  Snap.filter.shadow.toString = function () {\n    return this();\n  };\n  /*\\\n   * Snap.filter.grayscale\n   [ method ]\n   **\n   * Returns an SVG markup string for the grayscale filter\n   **\n   - amount (number) amount of filter (`0..1`)\n   = (string) filter representation\n  \\*/\n\n\n  Snap.filter.grayscale = function (amount) {\n    if (amount == null) {\n      amount = 1;\n    }\n\n    return Snap.format('<feColorMatrix type=\"matrix\" values=\"{a} {b} {c} 0 0 {d} {e} {f} 0 0 {g} {b} {h} 0 0 0 0 0 1 0\"/>', {\n      a: 0.2126 + 0.7874 * (1 - amount),\n      b: 0.7152 - 0.7152 * (1 - amount),\n      c: 0.0722 - 0.0722 * (1 - amount),\n      d: 0.2126 - 0.2126 * (1 - amount),\n      e: 0.7152 + 0.2848 * (1 - amount),\n      f: 0.0722 - 0.0722 * (1 - amount),\n      g: 0.2126 - 0.2126 * (1 - amount),\n      h: 0.0722 + 0.9278 * (1 - amount)\n    });\n  };\n\n  Snap.filter.grayscale.toString = function () {\n    return this();\n  };\n  /*\\\n   * Snap.filter.sepia\n   [ method ]\n   **\n   * Returns an SVG markup string for the sepia filter\n   **\n   - amount (number) amount of filter (`0..1`)\n   = (string) filter representation\n  \\*/\n\n\n  Snap.filter.sepia = function (amount) {\n    if (amount == null) {\n      amount = 1;\n    }\n\n    return Snap.format('<feColorMatrix type=\"matrix\" values=\"{a} {b} {c} 0 0 {d} {e} {f} 0 0 {g} {h} {i} 0 0 0 0 0 1 0\"/>', {\n      a: 0.393 + 0.607 * (1 - amount),\n      b: 0.769 - 0.769 * (1 - amount),\n      c: 0.189 - 0.189 * (1 - amount),\n      d: 0.349 - 0.349 * (1 - amount),\n      e: 0.686 + 0.314 * (1 - amount),\n      f: 0.168 - 0.168 * (1 - amount),\n      g: 0.272 - 0.272 * (1 - amount),\n      h: 0.534 - 0.534 * (1 - amount),\n      i: 0.131 + 0.869 * (1 - amount)\n    });\n  };\n\n  Snap.filter.sepia.toString = function () {\n    return this();\n  };\n  /*\\\n   * Snap.filter.saturate\n   [ method ]\n   **\n   * Returns an SVG markup string for the saturate filter\n   **\n   - amount (number) amount of filter (`0..1`)\n   = (string) filter representation\n  \\*/\n\n\n  Snap.filter.saturate = function (amount) {\n    if (amount == null) {\n      amount = 1;\n    }\n\n    return Snap.format('<feColorMatrix type=\"saturate\" values=\"{amount}\"/>', {\n      amount: 1 - amount\n    });\n  };\n\n  Snap.filter.saturate.toString = function () {\n    return this();\n  };\n  /*\\\n   * Snap.filter.hueRotate\n   [ method ]\n   **\n   * Returns an SVG markup string for the hue-rotate filter\n   **\n   - angle (number) angle of rotation\n   = (string) filter representation\n  \\*/\n\n\n  Snap.filter.hueRotate = function (angle) {\n    angle = angle || 0;\n    return Snap.format('<feColorMatrix type=\"hueRotate\" values=\"{angle}\"/>', {\n      angle: angle\n    });\n  };\n\n  Snap.filter.hueRotate.toString = function () {\n    return this();\n  };\n  /*\\\n   * Snap.filter.invert\n   [ method ]\n   **\n   * Returns an SVG markup string for the invert filter\n   **\n   - amount (number) amount of filter (`0..1`)\n   = (string) filter representation\n  \\*/\n\n\n  Snap.filter.invert = function (amount) {\n    if (amount == null) {\n      amount = 1;\n    } //        <feColorMatrix type=\"matrix\" values=\"-1 0 0 0 1  0 -1 0 0 1  0 0 -1 0 1  0 0 0 1 0\" color-interpolation-filters=\"sRGB\"/>\n\n\n    return Snap.format('<feComponentTransfer><feFuncR type=\"table\" tableValues=\"{amount} {amount2}\"/><feFuncG type=\"table\" tableValues=\"{amount} {amount2}\"/><feFuncB type=\"table\" tableValues=\"{amount} {amount2}\"/></feComponentTransfer>', {\n      amount: amount,\n      amount2: 1 - amount\n    });\n  };\n\n  Snap.filter.invert.toString = function () {\n    return this();\n  };\n  /*\\\n   * Snap.filter.brightness\n   [ method ]\n   **\n   * Returns an SVG markup string for the brightness filter\n   **\n   - amount (number) amount of filter (`0..1`)\n   = (string) filter representation\n  \\*/\n\n\n  Snap.filter.brightness = function (amount) {\n    if (amount == null) {\n      amount = 1;\n    }\n\n    return Snap.format('<feComponentTransfer><feFuncR type=\"linear\" slope=\"{amount}\"/><feFuncG type=\"linear\" slope=\"{amount}\"/><feFuncB type=\"linear\" slope=\"{amount}\"/></feComponentTransfer>', {\n      amount: amount\n    });\n  };\n\n  Snap.filter.brightness.toString = function () {\n    return this();\n  };\n  /*\\\n   * Snap.filter.contrast\n   [ method ]\n   **\n   * Returns an SVG markup string for the contrast filter\n   **\n   - amount (number) amount of filter (`0..1`)\n   = (string) filter representation\n  \\*/\n\n\n  Snap.filter.contrast = function (amount) {\n    if (amount == null) {\n      amount = 1;\n    }\n\n    return Snap.format('<feComponentTransfer><feFuncR type=\"linear\" slope=\"{amount}\" intercept=\"{amount2}\"/><feFuncG type=\"linear\" slope=\"{amount}\" intercept=\"{amount2}\"/><feFuncB type=\"linear\" slope=\"{amount}\" intercept=\"{amount2}\"/></feComponentTransfer>', {\n      amount: amount,\n      amount2: .5 - amount / 2\n    });\n  };\n\n  Snap.filter.contrast.toString = function () {\n    return this();\n  };\n}); // Copyright (c) 2014 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n  var box = Snap._.box,\n      is = Snap.is,\n      firstLetter = /^[^a-z]*([tbmlrc])/i,\n      toString = function toString() {\n    return \"T\" + this.dx + \",\" + this.dy;\n  };\n  /*\\\n   * Element.getAlign\n   [ method ]\n   **\n   * Returns shift needed to align the element relatively to given element.\n   * If no elements specified, parent `<svg>` container will be used.\n   - el (object) @optional alignment element\n   - way (string) one of six values: `\"top\"`, `\"middle\"`, `\"bottom\"`, `\"left\"`, `\"center\"`, `\"right\"`\n   = (object|string) Object in format `{dx: , dy: }` also has a string representation as a transformation string\n   > Usage\n   | el.transform(el.getAlign(el2, \"top\"));\n   * or\n   | var dy = el.getAlign(el2, \"top\").dy;\n  \\*/\n\n\n  Element.prototype.getAlign = function (el, way) {\n    if (way == null && is(el, \"string\")) {\n      way = el;\n      el = null;\n    }\n\n    el = el || this.paper;\n    var bx = el.getBBox ? el.getBBox() : box(el),\n        bb = this.getBBox(),\n        out = {};\n    way = way && way.match(firstLetter);\n    way = way ? way[1].toLowerCase() : \"c\";\n\n    switch (way) {\n      case \"t\":\n        out.dx = 0;\n        out.dy = bx.y - bb.y;\n        break;\n\n      case \"b\":\n        out.dx = 0;\n        out.dy = bx.y2 - bb.y2;\n        break;\n\n      case \"m\":\n        out.dx = 0;\n        out.dy = bx.cy - bb.cy;\n        break;\n\n      case \"l\":\n        out.dx = bx.x - bb.x;\n        out.dy = 0;\n        break;\n\n      case \"r\":\n        out.dx = bx.x2 - bb.x2;\n        out.dy = 0;\n        break;\n\n      default:\n        out.dx = bx.cx - bb.cx;\n        out.dy = 0;\n        break;\n    }\n\n    out.toString = toString;\n    return out;\n  };\n  /*\\\n   * Element.align\n   [ method ]\n   **\n   * Aligns the element relatively to given one via transformation.\n   * If no elements specified, parent `<svg>` container will be used.\n   - el (object) @optional alignment element\n   - way (string) one of six values: `\"top\"`, `\"middle\"`, `\"bottom\"`, `\"left\"`, `\"center\"`, `\"right\"`\n   = (object) this element\n   > Usage\n   | el.align(el2, \"top\");\n   * or\n   | el.align(\"middle\");\n  \\*/\n\n\n  Element.prototype.align = function (el, way) {\n    return this.transform(\"...\" + this.getAlign(el, way));\n  };\n}); // Copyright (c) 2016 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n  var elproto = Element.prototype,\n      is = Snap.is,\n      Str = String,\n      has = \"hasOwnProperty\";\n\n  function slice(from, to, f) {\n    return function (arr) {\n      var res = arr.slice(from, to);\n\n      if (res.length == 1) {\n        res = res[0];\n      }\n\n      return f ? f(res) : res;\n    };\n  }\n\n  var Animation = function Animation(attr, ms, easing, callback) {\n    if (typeof easing == \"function\" && !easing.length) {\n      callback = easing;\n      easing = mina.linear;\n    }\n\n    this.attr = attr;\n    this.dur = ms;\n    easing && (this.easing = easing);\n    callback && (this.callback = callback);\n  };\n\n  Snap._.Animation = Animation;\n  /*\\\n   * Snap.animation\n   [ method ]\n   **\n   * Creates an animation object\n   **\n   - attr (object) attributes of final destination\n   - duration (number) duration of the animation, in milliseconds\n   - easing (function) #optional one of easing functions of @mina or custom one\n   - callback (function) #optional callback function that fires when animation ends\n   = (object) animation object\n  \\*/\n\n  Snap.animation = function (attr, ms, easing, callback) {\n    return new Animation(attr, ms, easing, callback);\n  };\n  /*\\\n   * Element.inAnim\n   [ method ]\n   **\n   * Returns a set of animations that may be able to manipulate the current element\n   **\n   = (object) in format:\n   o {\n   o     anim (object) animation object,\n   o     mina (object) @mina object,\n   o     curStatus (number) 0..1 — status of the animation: 0 — just started, 1 — just finished,\n   o     status (function) gets or sets the status of the animation,\n   o     stop (function) stops the animation\n   o }\n  \\*/\n\n\n  elproto.inAnim = function () {\n    var el = this,\n        res = [];\n\n    for (var id in el.anims) {\n      if (el.anims[has](id)) {\n        (function (a) {\n          res.push({\n            anim: new Animation(a._attrs, a.dur, a.easing, a._callback),\n            mina: a,\n            curStatus: a.status(),\n            status: function status(val) {\n              return a.status(val);\n            },\n            stop: function stop() {\n              a.stop();\n            }\n          });\n        })(el.anims[id]);\n      }\n    }\n\n    return res;\n  };\n  /*\\\n   * Snap.animate\n   [ method ]\n   **\n   * Runs generic animation of one number into another with a caring function\n   **\n   - from (number|array) number or array of numbers\n   - to (number|array) number or array of numbers\n   - setter (function) caring function that accepts one number argument\n   - duration (number) duration, in milliseconds\n   - easing (function) #optional easing function from @mina or custom\n   - callback (function) #optional callback function to execute when animation ends\n   = (object) animation object in @mina format\n   o {\n   o     id (string) animation id, consider it read-only,\n   o     duration (function) gets or sets the duration of the animation,\n   o     easing (function) easing,\n   o     speed (function) gets or sets the speed of the animation,\n   o     status (function) gets or sets the status of the animation,\n   o     stop (function) stops the animation\n   o }\n   | var rect = Snap().rect(0, 0, 10, 10);\n   | Snap.animate(0, 10, function (val) {\n   |     rect.attr({\n   |         x: val\n   |     });\n   | }, 1000);\n   | // in given context is equivalent to\n   | rect.animate({x: 10}, 1000);\n  \\*/\n\n\n  Snap.animate = function (from, to, setter, ms, easing, callback) {\n    if (typeof easing == \"function\" && !easing.length) {\n      callback = easing;\n      easing = mina.linear;\n    }\n\n    var now = mina.time(),\n        anim = mina(from, to, now, now + ms, mina.time, setter, easing);\n    callback && eve.once(\"mina.finish.\" + anim.id, callback);\n    return anim;\n  };\n  /*\\\n   * Element.stop\n   [ method ]\n   **\n   * Stops all the animations for the current element\n   **\n   = (Element) the current element\n  \\*/\n\n\n  elproto.stop = function () {\n    var anims = this.inAnim();\n\n    for (var i = 0, ii = anims.length; i < ii; i++) {\n      anims[i].stop();\n    }\n\n    return this;\n  };\n  /*\\\n   * Element.animate\n   [ method ]\n   **\n   * Animates the given attributes of the element\n   **\n   - attrs (object) key-value pairs of destination attributes\n   - duration (number) duration of the animation in milliseconds\n   - easing (function) #optional easing function from @mina or custom\n   - callback (function) #optional callback function that executes when the animation ends\n   = (Element) the current element\n  \\*/\n\n\n  elproto.animate = function (attrs, ms, easing, callback) {\n    if (typeof easing == \"function\" && !easing.length) {\n      callback = easing;\n      easing = mina.linear;\n    }\n\n    if (attrs instanceof Animation) {\n      callback = attrs.callback;\n      easing = attrs.easing;\n      ms = attrs.dur;\n      attrs = attrs.attr;\n    }\n\n    var fkeys = [],\n        tkeys = [],\n        keys = {},\n        from,\n        to,\n        f,\n        eq,\n        el = this;\n\n    for (var key in attrs) {\n      if (attrs[has](key)) {\n        if (el.equal) {\n          eq = el.equal(key, Str(attrs[key]));\n          from = eq.from;\n          to = eq.to;\n          f = eq.f;\n        } else {\n          from = +el.attr(key);\n          to = +attrs[key];\n        }\n\n        var len = is(from, \"array\") ? from.length : 1;\n        keys[key] = slice(fkeys.length, fkeys.length + len, f);\n        fkeys = fkeys.concat(from);\n        tkeys = tkeys.concat(to);\n      }\n    }\n\n    var now = mina.time(),\n        anim = mina(fkeys, tkeys, now, now + ms, mina.time, function (val) {\n      var attr = {};\n\n      for (var key in keys) {\n        if (keys[has](key)) {\n          attr[key] = keys[key](val);\n        }\n      }\n\n      el.attr(attr);\n    }, easing);\n    el.anims[anim.id] = anim;\n    anim._attrs = attrs;\n    anim._callback = callback;\n    eve(\"snap.animcreated.\" + el.id, anim);\n    eve.once(\"mina.finish.\" + anim.id, function () {\n      eve.off(\"mina.*.\" + anim.id);\n      delete el.anims[anim.id];\n      callback && callback.call(el);\n    });\n    eve.once(\"mina.stop.\" + anim.id, function () {\n      eve.off(\"mina.*.\" + anim.id);\n      delete el.anims[anim.id];\n    });\n    return el;\n  };\n}); // Copyright (c) 2017 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nSnap.plugin(function (Snap, Element, Paper, glob) {\n  // Colours are from https://www.materialui.co\n  var red = \"#ffebee#ffcdd2#ef9a9a#e57373#ef5350#f44336#e53935#d32f2f#c62828#b71c1c#ff8a80#ff5252#ff1744#d50000\",\n      pink = \"#FCE4EC#F8BBD0#F48FB1#F06292#EC407A#E91E63#D81B60#C2185B#AD1457#880E4F#FF80AB#FF4081#F50057#C51162\",\n      purple = \"#F3E5F5#E1BEE7#CE93D8#BA68C8#AB47BC#9C27B0#8E24AA#7B1FA2#6A1B9A#4A148C#EA80FC#E040FB#D500F9#AA00FF\",\n      deeppurple = \"#EDE7F6#D1C4E9#B39DDB#9575CD#7E57C2#673AB7#5E35B1#512DA8#4527A0#311B92#B388FF#7C4DFF#651FFF#6200EA\",\n      indigo = \"#E8EAF6#C5CAE9#9FA8DA#7986CB#5C6BC0#3F51B5#3949AB#303F9F#283593#1A237E#8C9EFF#536DFE#3D5AFE#304FFE\",\n      blue = \"#E3F2FD#BBDEFB#90CAF9#64B5F6#64B5F6#2196F3#1E88E5#1976D2#1565C0#0D47A1#82B1FF#448AFF#2979FF#2962FF\",\n      lightblue = \"#E1F5FE#B3E5FC#81D4FA#4FC3F7#29B6F6#03A9F4#039BE5#0288D1#0277BD#01579B#80D8FF#40C4FF#00B0FF#0091EA\",\n      cyan = \"#E0F7FA#B2EBF2#80DEEA#4DD0E1#26C6DA#00BCD4#00ACC1#0097A7#00838F#006064#84FFFF#18FFFF#00E5FF#00B8D4\",\n      teal = \"#E0F2F1#B2DFDB#80CBC4#4DB6AC#26A69A#009688#00897B#00796B#00695C#004D40#A7FFEB#64FFDA#1DE9B6#00BFA5\",\n      green = \"#E8F5E9#C8E6C9#A5D6A7#81C784#66BB6A#4CAF50#43A047#388E3C#2E7D32#1B5E20#B9F6CA#69F0AE#00E676#00C853\",\n      lightgreen = \"#F1F8E9#DCEDC8#C5E1A5#AED581#9CCC65#8BC34A#7CB342#689F38#558B2F#33691E#CCFF90#B2FF59#76FF03#64DD17\",\n      lime = \"#F9FBE7#F0F4C3#E6EE9C#DCE775#D4E157#CDDC39#C0CA33#AFB42B#9E9D24#827717#F4FF81#EEFF41#C6FF00#AEEA00\",\n      yellow = \"#FFFDE7#FFF9C4#FFF59D#FFF176#FFEE58#FFEB3B#FDD835#FBC02D#F9A825#F57F17#FFFF8D#FFFF00#FFEA00#FFD600\",\n      amber = \"#FFF8E1#FFECB3#FFE082#FFD54F#FFCA28#FFC107#FFB300#FFA000#FF8F00#FF6F00#FFE57F#FFD740#FFC400#FFAB00\",\n      orange = \"#FFF3E0#FFE0B2#FFCC80#FFB74D#FFA726#FF9800#FB8C00#F57C00#EF6C00#E65100#FFD180#FFAB40#FF9100#FF6D00\",\n      deeporange = \"#FBE9E7#FFCCBC#FFAB91#FF8A65#FF7043#FF5722#F4511E#E64A19#D84315#BF360C#FF9E80#FF6E40#FF3D00#DD2C00\",\n      brown = \"#EFEBE9#D7CCC8#BCAAA4#A1887F#8D6E63#795548#6D4C41#5D4037#4E342E#3E2723\",\n      grey = \"#FAFAFA#F5F5F5#EEEEEE#E0E0E0#BDBDBD#9E9E9E#757575#616161#424242#212121\",\n      bluegrey = \"#ECEFF1#CFD8DC#B0BEC5#90A4AE#78909C#607D8B#546E7A#455A64#37474F#263238\";\n  /*\\\n   * Snap.mui\n   [ property ]\n   **\n   * Contain Material UI colours.\n   | Snap().rect(0, 0, 10, 10).attr({fill: Snap.mui.deeppurple, stroke: Snap.mui.amber[600]});\n   # For colour reference: <a href=\"https://www.materialui.co\">https://www.materialui.co</a>.\n  \\*/\n\n  Snap.mui = {};\n  /*\\\n   * Snap.flat\n   [ property ]\n   **\n   * Contain Flat UI colours.\n   | Snap().rect(0, 0, 10, 10).attr({fill: Snap.flat.carrot, stroke: Snap.flat.wetasphalt});\n   # For colour reference: <a href=\"https://www.materialui.co\">https://www.materialui.co</a>.\n  \\*/\n\n  Snap.flat = {};\n\n  function saveColor(colors) {\n    colors = colors.split(/(?=#)/);\n    var color = new String(colors[5]);\n    color[50] = colors[0];\n    color[100] = colors[1];\n    color[200] = colors[2];\n    color[300] = colors[3];\n    color[400] = colors[4];\n    color[500] = colors[5];\n    color[600] = colors[6];\n    color[700] = colors[7];\n    color[800] = colors[8];\n    color[900] = colors[9];\n\n    if (colors[10]) {\n      color.A100 = colors[10];\n      color.A200 = colors[11];\n      color.A400 = colors[12];\n      color.A700 = colors[13];\n    }\n\n    return color;\n  }\n\n  Snap.mui.red = saveColor(red);\n  Snap.mui.pink = saveColor(pink);\n  Snap.mui.purple = saveColor(purple);\n  Snap.mui.deeppurple = saveColor(deeppurple);\n  Snap.mui.indigo = saveColor(indigo);\n  Snap.mui.blue = saveColor(blue);\n  Snap.mui.lightblue = saveColor(lightblue);\n  Snap.mui.cyan = saveColor(cyan);\n  Snap.mui.teal = saveColor(teal);\n  Snap.mui.green = saveColor(green);\n  Snap.mui.lightgreen = saveColor(lightgreen);\n  Snap.mui.lime = saveColor(lime);\n  Snap.mui.yellow = saveColor(yellow);\n  Snap.mui.amber = saveColor(amber);\n  Snap.mui.orange = saveColor(orange);\n  Snap.mui.deeporange = saveColor(deeporange);\n  Snap.mui.brown = saveColor(brown);\n  Snap.mui.grey = saveColor(grey);\n  Snap.mui.bluegrey = saveColor(bluegrey);\n  Snap.flat.turquoise = \"#1abc9c\";\n  Snap.flat.greensea = \"#16a085\";\n  Snap.flat.sunflower = \"#f1c40f\";\n  Snap.flat.orange = \"#f39c12\";\n  Snap.flat.emerland = \"#2ecc71\";\n  Snap.flat.nephritis = \"#27ae60\";\n  Snap.flat.carrot = \"#e67e22\";\n  Snap.flat.pumpkin = \"#d35400\";\n  Snap.flat.peterriver = \"#3498db\";\n  Snap.flat.belizehole = \"#2980b9\";\n  Snap.flat.alizarin = \"#e74c3c\";\n  Snap.flat.pomegranate = \"#c0392b\";\n  Snap.flat.amethyst = \"#9b59b6\";\n  Snap.flat.wisteria = \"#8e44ad\";\n  Snap.flat.clouds = \"#ecf0f1\";\n  Snap.flat.silver = \"#bdc3c7\";\n  Snap.flat.wetasphalt = \"#34495e\";\n  Snap.flat.midnightblue = \"#2c3e50\";\n  Snap.flat.concrete = \"#95a5a6\";\n  Snap.flat.asbestos = \"#7f8c8d\";\n  /*\\\n   * Snap.importMUIColors\n   [ method ]\n   **\n   * Imports Material UI colours into global object.\n   | Snap.importMUIColors();\n   | Snap().rect(0, 0, 10, 10).attr({fill: deeppurple, stroke: amber[600]});\n   # For colour reference: <a href=\"https://www.materialui.co\">https://www.materialui.co</a>.\n  \\*/\n\n  Snap.importMUIColors = function () {\n    for (var color in Snap.mui) {\n      if (Snap.mui.hasOwnProperty(color)) {\n        window[color] = Snap.mui[color];\n      }\n    }\n  };\n});\nmodule.exports = Snap;","// Copyright (c) 2017 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n// ┌────────────────────────────────────────────────────────────┐ \\\\\n// │ Eve 0.5.4 - JavaScript Events Library                      │ \\\\\n// ├────────────────────────────────────────────────────────────┤ \\\\\n// │ Author Dmitry Baranovskiy (http://dmitry.baranovskiy.com/) │ \\\\\n// └────────────────────────────────────────────────────────────┘ \\\\\n(function (glob) {\n  var version = \"0.5.4\",\n      has = \"hasOwnProperty\",\n      separator = /[\\.\\/]/,\n      comaseparator = /\\s*,\\s*/,\n      wildcard = \"*\",\n      numsort = function numsort(a, b) {\n    return a - b;\n  },\n      current_event,\n      stop,\n      events = {\n    n: {}\n  },\n      firstDefined = function firstDefined() {\n    for (var i = 0, ii = this.length; i < ii; i++) {\n      if (typeof this[i] != \"undefined\") {\n        return this[i];\n      }\n    }\n  },\n      lastDefined = function lastDefined() {\n    var i = this.length;\n\n    while (--i) {\n      if (typeof this[i] != \"undefined\") {\n        return this[i];\n      }\n    }\n  },\n      objtos = Object.prototype.toString,\n      Str = String,\n      isArray = Array.isArray || function (ar) {\n    return ar instanceof Array || objtos.call(ar) == \"[object Array]\";\n  },\n\n  /*\\\n   * eve\n   [ method ]\n    * Fires event with given `name`, given scope and other parameters.\n    - name (string) name of the *event*, dot (`.`) or slash (`/`) separated\n   - scope (object) context for the event handlers\n   - varargs (...) the rest of arguments will be sent to event handlers\n    = (object) array of returned values from the listeners. Array has two methods `.firstDefined()` and `.lastDefined()` to get first or last not `undefined` value.\n  \\*/\n  eve = function eve(name, scope) {\n    var oldstop = stop,\n        args = Array.prototype.slice.call(arguments, 2),\n        listeners = eve.listeners(name),\n        z = 0,\n        l,\n        indexed = [],\n        queue = {},\n        out = [],\n        ce = current_event;\n    out.firstDefined = firstDefined;\n    out.lastDefined = lastDefined;\n    current_event = name;\n    stop = 0;\n\n    for (var i = 0, ii = listeners.length; i < ii; i++) {\n      if (\"zIndex\" in listeners[i]) {\n        indexed.push(listeners[i].zIndex);\n\n        if (listeners[i].zIndex < 0) {\n          queue[listeners[i].zIndex] = listeners[i];\n        }\n      }\n    }\n\n    indexed.sort(numsort);\n\n    while (indexed[z] < 0) {\n      l = queue[indexed[z++]];\n      out.push(l.apply(scope, args));\n\n      if (stop) {\n        stop = oldstop;\n        return out;\n      }\n    }\n\n    for (i = 0; i < ii; i++) {\n      l = listeners[i];\n\n      if (\"zIndex\" in l) {\n        if (l.zIndex == indexed[z]) {\n          out.push(l.apply(scope, args));\n\n          if (stop) {\n            break;\n          }\n\n          do {\n            z++;\n            l = queue[indexed[z]];\n            l && out.push(l.apply(scope, args));\n\n            if (stop) {\n              break;\n            }\n          } while (l);\n        } else {\n          queue[l.zIndex] = l;\n        }\n      } else {\n        out.push(l.apply(scope, args));\n\n        if (stop) {\n          break;\n        }\n      }\n    }\n\n    stop = oldstop;\n    current_event = ce;\n    return out;\n  }; // Undocumented. Debug only.\n\n\n  eve._events = events;\n  /*\\\n   * eve.listeners\n   [ method ]\n    * Internal method which gives you array of all event handlers that will be triggered by the given `name`.\n    - name (string) name of the event, dot (`.`) or slash (`/`) separated\n    = (array) array of event handlers\n  \\*/\n\n  eve.listeners = function (name) {\n    var names = isArray(name) ? name : name.split(separator),\n        e = events,\n        item,\n        items,\n        k,\n        i,\n        ii,\n        j,\n        jj,\n        nes,\n        es = [e],\n        out = [];\n\n    for (i = 0, ii = names.length; i < ii; i++) {\n      nes = [];\n\n      for (j = 0, jj = es.length; j < jj; j++) {\n        e = es[j].n;\n        items = [e[names[i]], e[wildcard]];\n        k = 2;\n\n        while (k--) {\n          item = items[k];\n\n          if (item) {\n            nes.push(item);\n            out = out.concat(item.f || []);\n          }\n        }\n      }\n\n      es = nes;\n    }\n\n    return out;\n  };\n  /*\\\n   * eve.separator\n   [ method ]\n    * If for some reasons you don’t like default separators (`.` or `/`) you can specify yours\n   * here. Be aware that if you pass a string longer than one character it will be treated as\n   * a list of characters.\n    - separator (string) new separator. Empty string resets to default: `.` or `/`.\n  \\*/\n\n\n  eve.separator = function (sep) {\n    if (sep) {\n      sep = Str(sep).replace(/(?=[\\.\\^\\]\\[\\-])/g, \"\\\\\");\n      sep = \"[\" + sep + \"]\";\n      separator = new RegExp(sep);\n    } else {\n      separator = /[\\.\\/]/;\n    }\n  };\n  /*\\\n   * eve.on\n   [ method ]\n   **\n   * Binds given event handler with a given name. You can use wildcards “`*`” for the names:\n   | eve.on(\"*.under.*\", f);\n   | eve(\"mouse.under.floor\"); // triggers f\n   * Use @eve to trigger the listener.\n   **\n   - name (string) name of the event, dot (`.`) or slash (`/`) separated, with optional wildcards\n   - f (function) event handler function\n   **\n   - name (array) if you don’t want to use separators, you can use array of strings\n   - f (function) event handler function\n   **\n   = (function) returned function accepts a single numeric parameter that represents z-index of the handler. It is an optional feature and only used when you need to ensure that some subset of handlers will be invoked in a given order, despite of the order of assignment.\n   > Example:\n   | eve.on(\"mouse\", eatIt)(2);\n   | eve.on(\"mouse\", scream);\n   | eve.on(\"mouse\", catchIt)(1);\n   * This will ensure that `catchIt` function will be called before `eatIt`.\n   *\n   * If you want to put your handler before non-indexed handlers, specify a negative value.\n   * Note: I assume most of the time you don’t need to worry about z-index, but it’s nice to have this feature “just in case”.\n  \\*/\n\n\n  eve.on = function (name, f) {\n    if (typeof f != \"function\") {\n      return function () {};\n    }\n\n    var names = isArray(name) ? isArray(name[0]) ? name : [name] : Str(name).split(comaseparator);\n\n    for (var i = 0, ii = names.length; i < ii; i++) {\n      (function (name) {\n        var names = isArray(name) ? name : Str(name).split(separator),\n            e = events,\n            exist;\n\n        for (var i = 0, ii = names.length; i < ii; i++) {\n          e = e.n;\n          e = e.hasOwnProperty(names[i]) && e[names[i]] || (e[names[i]] = {\n            n: {}\n          });\n        }\n\n        e.f = e.f || [];\n\n        for (i = 0, ii = e.f.length; i < ii; i++) {\n          if (e.f[i] == f) {\n            exist = true;\n            break;\n          }\n        }\n\n        !exist && e.f.push(f);\n      })(names[i]);\n    }\n\n    return function (zIndex) {\n      if (+zIndex == +zIndex) {\n        f.zIndex = +zIndex;\n      }\n    };\n  };\n  /*\\\n   * eve.f\n   [ method ]\n   **\n   * Returns function that will fire given event with optional arguments.\n   * Arguments that will be passed to the result function will be also\n   * concated to the list of final arguments.\n   | el.onclick = eve.f(\"click\", 1, 2);\n   | eve.on(\"click\", function (a, b, c) {\n   |     console.log(a, b, c); // 1, 2, [event object]\n   | });\n   - event (string) event name\n   - varargs (…) and any other arguments\n   = (function) possible event handler function\n  \\*/\n\n\n  eve.f = function (event) {\n    var attrs = [].slice.call(arguments, 1);\n    return function () {\n      eve.apply(null, [event, null].concat(attrs).concat([].slice.call(arguments, 0)));\n    };\n  };\n  /*\\\n   * eve.stop\n   [ method ]\n   **\n   * Is used inside an event handler to stop the event, preventing any subsequent listeners from firing.\n  \\*/\n\n\n  eve.stop = function () {\n    stop = 1;\n  };\n  /*\\\n   * eve.nt\n   [ method ]\n   **\n   * Could be used inside event handler to figure out actual name of the event.\n   **\n   - subname (string) #optional subname of the event\n   **\n   = (string) name of the event, if `subname` is not specified\n   * or\n   = (boolean) `true`, if current event’s name contains `subname`\n  \\*/\n\n\n  eve.nt = function (subname) {\n    var cur = isArray(current_event) ? current_event.join(\".\") : current_event;\n\n    if (subname) {\n      return new RegExp(\"(?:\\\\.|\\\\/|^)\" + subname + \"(?:\\\\.|\\\\/|$)\").test(cur);\n    }\n\n    return cur;\n  };\n  /*\\\n   * eve.nts\n   [ method ]\n   **\n   * Could be used inside event handler to figure out actual name of the event.\n   **\n   **\n   = (array) names of the event\n  \\*/\n\n\n  eve.nts = function () {\n    return isArray(current_event) ? current_event : current_event.split(separator);\n  };\n  /*\\\n   * eve.off\n   [ method ]\n   **\n   * Removes given function from the list of event listeners assigned to given name.\n   * If no arguments specified all the events will be cleared.\n   **\n   - name (string) name of the event, dot (`.`) or slash (`/`) separated, with optional wildcards\n   - f (function) event handler function\n  \\*/\n\n  /*\\\n   * eve.unbind\n   [ method ]\n   **\n   * See @eve.off\n  \\*/\n\n\n  eve.off = eve.unbind = function (name, f) {\n    if (!name) {\n      eve._events = events = {\n        n: {}\n      };\n      return;\n    }\n\n    var names = isArray(name) ? isArray(name[0]) ? name : [name] : Str(name).split(comaseparator);\n\n    if (names.length > 1) {\n      for (var i = 0, ii = names.length; i < ii; i++) {\n        eve.off(names[i], f);\n      }\n\n      return;\n    }\n\n    names = isArray(name) ? name : Str(name).split(separator);\n    var e,\n        key,\n        splice,\n        i,\n        ii,\n        j,\n        jj,\n        cur = [events],\n        inodes = [];\n\n    for (i = 0, ii = names.length; i < ii; i++) {\n      for (j = 0; j < cur.length; j += splice.length - 2) {\n        splice = [j, 1];\n        e = cur[j].n;\n\n        if (names[i] != wildcard) {\n          if (e[names[i]]) {\n            splice.push(e[names[i]]);\n            inodes.unshift({\n              n: e,\n              name: names[i]\n            });\n          }\n        } else {\n          for (key in e) {\n            if (e[has](key)) {\n              splice.push(e[key]);\n              inodes.unshift({\n                n: e,\n                name: key\n              });\n            }\n          }\n        }\n\n        cur.splice.apply(cur, splice);\n      }\n    }\n\n    for (i = 0, ii = cur.length; i < ii; i++) {\n      e = cur[i];\n\n      while (e.n) {\n        if (f) {\n          if (e.f) {\n            for (j = 0, jj = e.f.length; j < jj; j++) {\n              if (e.f[j] == f) {\n                e.f.splice(j, 1);\n                break;\n              }\n            }\n\n            !e.f.length && delete e.f;\n          }\n\n          for (key in e.n) {\n            if (e.n[has](key) && e.n[key].f) {\n              var funcs = e.n[key].f;\n\n              for (j = 0, jj = funcs.length; j < jj; j++) {\n                if (funcs[j] == f) {\n                  funcs.splice(j, 1);\n                  break;\n                }\n              }\n\n              !funcs.length && delete e.n[key].f;\n            }\n          }\n        } else {\n          delete e.f;\n\n          for (key in e.n) {\n            if (e.n[has](key) && e.n[key].f) {\n              delete e.n[key].f;\n            }\n          }\n        }\n\n        e = e.n;\n      }\n    } // prune inner nodes in path\n\n\n    prune: for (i = 0, ii = inodes.length; i < ii; i++) {\n      e = inodes[i];\n\n      for (key in e.n[e.name].f) {\n        // not empty (has listeners)\n        continue prune;\n      }\n\n      for (key in e.n[e.name].n) {\n        // not empty (has children)\n        continue prune;\n      } // is empty\n\n\n      delete e.n[e.name];\n    }\n  };\n  /*\\\n   * eve.once\n   [ method ]\n   **\n   * Binds given event handler with a given name to only run once then unbind itself.\n   | eve.once(\"login\", f);\n   | eve(\"login\"); // triggers f\n   | eve(\"login\"); // no listeners\n   * Use @eve to trigger the listener.\n   **\n   - name (string) name of the event, dot (`.`) or slash (`/`) separated, with optional wildcards\n   - f (function) event handler function\n   **\n   = (function) same return function as @eve.on\n  \\*/\n\n\n  eve.once = function (name, f) {\n    var f2 = function f2() {\n      eve.off(name, f2);\n      return f.apply(this, arguments);\n    };\n\n    return eve.on(name, f2);\n  };\n  /*\\\n   * eve.version\n   [ property (string) ]\n   **\n   * Current version of the library.\n  \\*/\n\n\n  eve.version = version;\n\n  eve.toString = function () {\n    return \"You are running Eve \" + version;\n  };\n\n  glob.eve = eve;\n  typeof module != \"undefined\" && module.exports ? module.exports = eve : typeof define === \"function\" && define.amd ? define(\"eve\", [], function () {\n    return eve;\n  }) : glob.eve = eve;\n})(typeof window != \"undefined\" ? window : this);"],"sourceRoot":""}