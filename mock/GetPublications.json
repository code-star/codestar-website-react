[
  {
    "id": "https://medium.com/p/befc396d6dc5",
    "title": "Tika NERding: Getting started using Named-Entity Recognition with OpenNLP on the JVM (Scala, Java…",
    "author": "Nathan Perdijk",
    "latestPublishedAt": "Fri, 06 Nov 2020 15:14:42 GMT",
    "uniqueSlug": "https://medium.com/codestar-blog/tika-nerding-getting-started-using-named-entity-recognition-with-opennlp-on-the-jvm-scala-java-befc396d6dc5?source=rss----ea5cff13e3c9---4",
    "paragraphs": "<h3>Tika NERding: Getting started using Named-Entity Recognition with OpenNLP on the JVM (Scala, Java, Kotlin…)</h3><p><em>For DataScience!</em></p><p>Some things are hard, some things are not… Turns out that doing NER (Named-Entity Recognition) on the JVM is… not! (Wait, <a href=\"https://medium.com/codestar-blog/tika-tika-getting-started-doing-ocr-with-apache-tika-andtesseract-from-the-jvm-f5d2bfe9b397\"><em>that sounds familiar</em></a>…)</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/292/1*QvLkMzKtFw0DxqZ-pWiL8g.jpeg\" /></figure><p><a href=\"https://en.wikipedia.org/wiki/Named-entity_recognition\">NER</a> is the automated process of annotating words and phrases in sentences with relevant entity information, such as marking a word as a Person, or a Location. This can come in quite handy when doing automated text analysis and is a staple in the DataScience community. As the trouble with DataScience is often getting it into production, it is extremely handy that this technique can be directly used from JVM-languages. Now we can embed this technology in production ready applications built in Java, Scala, Kotlin...</p><p>First things first, the dependencies. These are all the dependencies from the .pom.xml file used for this example project:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/263fe830248a9ab31ed27dc9f4c55d4f/href\">https://medium.com/media/263fe830248a9ab31ed27dc9f4c55d4f/href</a></iframe><p>Yes, that’s it.</p><p>For doing NER on String this is really all we need, but Apache Tika can also extract text from PDFs or even <a href=\"https://medium.com/codestar-blog/tika-tika-getting-started-doing-ocr-with-apache-tika-andtesseract-from-the-jvm-f5d2bfe9b397\">perform OCR</a>, but you’ll need additional dependencies.</p><p>Then we need to download the models that we want to use and place them in our resources folder. You can download suitable OpenNLP models from <a href=\"http://opennlp.sourceforge.net/models-1.5/\">http://opennlp.sourceforge.net/models-1.5/</a>. These are conveniently wrapped in .bin format and should NOT be unpacked.</p><p>For this example, we will be using English language Models that can recognise Date, Location, Organization and Person, but there are also models available in other languages. Every model you want to use, you’ll need to add to a Java Map (or you can use SystemProperties for Tika to “discover”, but that’s a method I don’t like very much):</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/900c319c1e33e98775dfd07672bb5099/href\">https://medium.com/media/900c319c1e33e98775dfd07672bb5099/href</a></iframe><p>Now models contains four models, so let’s feed them to Tika:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/addf4d01e6a3f6ef13603e4498d38934/href\">https://medium.com/media/addf4d01e6a3f6ef13603e4498d38934/href</a></iframe><p>Alright, now all we need is to feed a String of text to the nerRecogniser:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/107c4b2797d7b06aee4d6160c7fd37e9/href\">https://medium.com/media/107c4b2797d7b06aee4d6160c7fd37e9/href</a></iframe><p>And now you can just go about using the results. Tika will return a Map, containing a key for each model that has managed to find matching results, and with each key there’s a value containing those results. In order to improve the prints, I’ve done a bit of tinkering as it is now DEMO time.</p><p>I’m using the contents of the <a href=\"https://en.wikipedia.org/\">Wikipedia</a> article on the <a href=\"https://en.wikipedia.org/wiki/Peace_of_Utrecht\">Peace of Utrecht</a>.</p><p>For the first paragraph, this is my input text:</p><pre>&quot;The Peace of Utrecht is a series of peace treaties signed by the belligerents in the War of the Spanish Succession, in the Dutch city of Utrecht between April 1713 and February 1715. The war involved three contenders for the vacant throne of Spain, and involved much of Europe for over a decade. The main action saw France as the defender of Spain against a multinational coalition. The war was very expensive and bloody and finally stalemated. Essentially, the treaties allowed Philip V (grandson of King Louis XIV of France) to keep the Spanish throne in return for permanently renouncing his claim to the French throne, along with other necessary guarantees that would ensure that France and Spain should not merge, thus preserving the balance of power in Europe.\\n\\nThe treaties between several European states, including Spain, Great Britain, France, Portugal, Savoy and the Dutch Republic, helped end the war. The treaties were concluded between the representatives of Louis XIV of France and of his grandson Philip on one hand, and representatives of Anne of Great Britain, Victor Amadeus II of Sardinia, John V of Portugal and the United Provinces of the Netherlands on the other. Though the king of France ensured the Spanish crown for his dynasty, the treaties marked the end of French ambitions of hegemony in Europe expressed in the continuous wars of Louis XIV, and paved the way to the European system based on the balance of power.[1] British historian G. M. Trevelyan argues:\\n\\nThat Treaty, which ushered in the stable and characteristic period of Eighteenth-Century civilization, marked the end of danger to Europe from the old French monarchy, and it marked a change of no less significance to the world at large, — the maritime, commercial and financial supremacy of Great Britain.[2]\\n\\nAnother enduring result was the creation of the Spanish Bourbon Dynasty, still reigning over Spain up to the present while the original House of Bourbon has long since been dethroned in France.&quot;</pre><p>And these are the results from Tika NER:</p><pre>Locations: Britain, Milan, Nova Scotia, Cape Breton, Italy, France, Africa, Sicily, North Sea, North America, Amazon, Spain, Rastatt, Portugal, Sacramento, North</pre><pre>Organisations: Article XIII, Spain</pre><pre>Persons: Philip V, Philippe, Philip, Louis XIV&#39;s, Louis XV, Charles VI., Oyapock, Saint Kitts</pre><pre>Date: 1713, 1720, 1713., 1712, 1714</pre><p>And a second example, the second part of the article:</p><pre>&quot;The War of the Spanish Succession was occasioned by the failure of the Habsburg king, Charles II of Spain, to produce an heir. Dispute followed the death of Charles II in 1700, and fourteen years of war were the result.\\n\\nFrance and Great Britain had come to terms in October 1711, when the preliminaries of peace had been signed in London. The preliminaries were based on a tacit acceptance of the partition of Spain&#39;s European possessions. Following this, the Congress of Utrecht opened on 29 January 1712, with the British representatives being John Robinson, Bishop of Bristol, and Thomas Wentworth, Lord Strafford.[3] Reluctantly the United Provinces accepted the preliminaries and sent representatives, but Emperor Charles VI refused to do so until he was assured that the preliminaries were not binding. This assurance was given, and so in February the Imperial representatives made their appearance. As Philip was not yet recognized as its king, Spain did not at first send plenipotentiaries, but the Duke of Savoy sent one, and the Kingdom of Portugal was represented by Luís da Cunha. One of the first questions discussed was the nature of the guarantees to be given by France and Spain that their crowns would be kept separate, and little progress was made until 10 July 1712, when Philip signed a renunciation.[4]\\n\\nWith Great Britain, France and Spain having agreed to a \\&quot;suspension of arms\\&quot; (armistice) covering Spain on 19 August in Paris, the pace of negotiation quickened. The first treaty signed at Utrecht was the truce between France and Portugal on 7 November, followed by the truce between France and Savoy on 14 March 1714. That same day, Spain, Great Britain, France and the Empire agreed to the evacuation of Catalonia and an armistice in Italy. The main treaties of peace followed on 11 April 1713. These were five separate treaties between France and Great Britain, the Netherlands, Savoy, Prussia and Portugal. Spain under Philip V signed separate peace treaties with Savoy and Great Britain at Utrecht on 13 July. Negotiations at Utrecht dragged on into the next year, for the peace treaty between Spain and the Netherlands was only signed on 26 June 1714 and that between Spain and Portugal on 6 February 1715.[5]\\n\\nSeveral other treaties came out of the congress of Utrecht. France signed treaties of commerce and navigation with Great Britain and the Netherlands (11 April 1713). Great Britain signed a like treaty with Spain (9 December 1713).[5]&quot;</pre><p>And the results:</p><pre>Locations: 1715.[16], Britain, Spanish Netherlands, Austrian Netherlands, France</pre><pre>Organisations: Oxford, House of, United Provinces, Dutch, Austro-Dutch Barrier Treaty, Harley, Duke, Earl, Allied</pre><pre>Persons: Robert Harley, William III, Earl</pre><pre>Date: 1710, 1709., May 1711), 1706</pre><p>As you can see, not everything is found, or classified correctly, but it provides a good starting point for further text analysis and it took very little effort to get this working at all! Named-Entity Recognition is a tricky technique, so you may need to preprocess your texts a bit before you get good analysis results for your particular data set, but it’s definitely not difficult to get started.</p><p>You can download suitable OpenNLP models from <a href=\"http://opennlp.sourceforge.net/models-1.5/\">http://opennlp.sourceforge.net/models-1.5/</a>.</p><p>Check out the <a href=\"https://tika.apache.org/\">Apache Tika documentation</a> to see what other great functionality is available.</p><p>If you want to take a closer look at this example, you can check it out from Github: <a href=\"https://github.com/NRBPerdijk/examplenertikascala/\">https://github.com/NRBPerdijk/examplenertikascala/</a></p><p>Last but not least, kudos to the Apache Software Foundation for their continuing work towards great Open Source solutions.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/700/1*cQGXudGNVjRGDM2uB-BuGA.jpeg\" /></figure><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=befc396d6dc5\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/codestar-blog/tika-nerding-getting-started-using-named-entity-recognition-with-opennlp-on-the-jvm-scala-java-befc396d6dc5\">Tika NERding: Getting started using Named-Entity Recognition with OpenNLP on the JVM (Scala, Java…</a> was originally published in <a href=\"https://medium.com/codestar-blog\">Codestar blog</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"
  },
  {
    "id": "https://medium.com/p/f5d2bfe9b397",
    "title": "Tika Tika! Getting started doing OCR with Apache Tika andTesseract from the JVM",
    "author": "Nathan Perdijk",
    "latestPublishedAt": "Fri, 10 Apr 2020 15:29:03 GMT",
    "uniqueSlug": "https://medium.com/codestar-blog/tika-tika-getting-started-doing-ocr-with-apache-tika-andtesseract-from-the-jvm-f5d2bfe9b397?source=rss----ea5cff13e3c9---4",
    "paragraphs": "<h3>Tika Tika! Getting started doing OCR with Apache Tika andTesseract from the JVM (Scala, Java, Kotlin…).</h3><p><em>I can do DataScience, mate!</em></p><p>Some things are hard. Some things are not… Turns out that using OCR (Object Character Recognition) using Tesseract from the JVM is… not hard!</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/292/1*Aj8UgvxNf7r4zTjs-JqL7A.jpeg\" /></figure><p>The trickiest part, really, is <a href=\"https://github.com/tesseract-ocr/tesseract/wiki\">setting up Tesseract</a> on the machine you want to do your OCR on. Once you have managed to do that, you can just use the following Scala examples to use <strong>Apache Tika</strong> to do OCR in your own JVM project.</p><h4><strong>First things first. Taking care of your dependencies…</strong></h4><p>Add these to your pom.xml or other build tool equivalent:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/ef00268a7d4395d5285646425ef161fa/href\">https://medium.com/media/ef00268a7d4395d5285646425ef161fa/href</a></iframe><h4>Then, we need to properly configure a Tika Parser</h4><p>We need one in order to do actually do any <a href=\"https://tika.apache.org/1.24/parser.html\">parsing</a>. Because this kind of configuration tends to be ugly, I have put it all inside its own object/class to keep it separate from the rest of the code:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/d06b778f674cc7ebfa6c0d5ac31584fb/href\">https://medium.com/media/d06b778f674cc7ebfa6c0d5ac31584fb/href</a></iframe><p>Finally, we have to create…</p><h4>The code that provides the file to be OCRed.</h4><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/97fa286ad55672dc413e9eb32a7c5e78/href\">https://medium.com/media/97fa286ad55672dc413e9eb32a7c5e78/href</a></iframe><p>We just turn the file we want to OCR into an InputStream and hand that off to the TikaOCRParser we specified above for parsing. Because using InputStreams and doing parsing are two IO processes that can (definitely) throw Exceptions, I have delegated the handling of the InputStream using Scala’s Using functionality, which will automatically wrap the whole operation into a Try while also making sure that the InputStream is closed when everything is done, <em>even when exceptions are thrown</em>. If the result is a Success, I convert it into a regular String, which can then be printed, or otherwise used at your convenience.</p><p><em>(The example file is a </em><em>jpeg, but lots of different image formats, as well as </em><em>PDF, are supported. Some, like </em><em>JPEG2000, might require extra supporting software to be installed on the machine.)</em></p><p>So, that’s it. Pretty easy, right? Check out the <a href=\"https://tika.apache.org/\">Apache Tika documentation</a> to see what other great functionality is available. Tesseract OCR is a pretty tricky field in and off itself, so be sure to check out all the <a href=\"https://tesseract-ocr.github.io/tessdoc/ImproveQuality\">tweaks</a> you may have to make for your particular dataset. If you want to see the full code for this example, you can <a href=\"https://github.com/NRBPerdijk/tikascalaexample\">check it out on GitHub</a>. Last but not least, kudos to the Apache Software Foundation for their continuing work towards great Open Source solutions.</p><p>Edit: I also wrote a short intro using Apache Tika to do Named-Entity Recognition (NER): <a href=\"https://medium.com/codestar-blog/tika-nerding-getting-started-using-named-entity-recognition-with-opennlp-on-the-jvm-scala-java-befc396d6dc5\">Tika NERding: Getting started using Named-Entity Recognition with OpenNLP on the JVM</a></p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*P93TyWUqN0foFjmMaB0ehQ.jpeg\" /></figure><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=f5d2bfe9b397\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/codestar-blog/tika-tika-getting-started-doing-ocr-with-apache-tika-andtesseract-from-the-jvm-f5d2bfe9b397\">Tika Tika! Getting started doing OCR with Apache Tika andTesseract from the JVM</a> was originally published in <a href=\"https://medium.com/codestar-blog\">Codestar blog</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"
  },
  {
    "id": "https://medium.com/p/65158c284034",
    "title": "Upgrading to Angular 9: My experience",
    "author": "Bjorn ‘Bjeaurn’",
    "latestPublishedAt": "Fri, 14 Feb 2020 12:32:47 GMT",
    "uniqueSlug": "https://medium.com/codestar-blog/upgrading-to-angular-9-my-experience-65158c284034?source=rss----ea5cff13e3c9---4"
  },
  {
    "id": "https://medium.com/p/2aeff1303749",
    "title": "Leibniz equality in TypeScript",
    "author": "Werner de Groot",
    "latestPublishedAt": "Tue, 25 Jun 2019 16:21:37 GMT",
    "uniqueSlug": "https://medium.com/codestar-blog/leibniz-equality-in-typescript-2aeff1303749?source=rss----ea5cff13e3c9---4",
    "paragraphs": "<p>In this post I’ll explain how you can use Leibniz equality to safely type your higher-order components in React, although it can be used in many other places (outside the React ecosystem) too.</p><h3>Introduction</h3><p>At the client I’m currently working for we use a lot of different charts to visualize processes over time. We have line charts, Gantt charts, you name it. Each of those charts features buttons which allows users to zoom in or out.</p><p>I’d like to use a simplified version of one of those graphs to explain what Leibniz, a German mathematician who lived well over 300 years ago, has to do with TypeScript.</p><h3>Motivating example</h3><p>Let’s suppose our graph looks a bit like this:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/494/1*iBVlr8lOKvIzbqA8-qvHoQ.gif\" /></figure><p>I use a component Graph which takes the following props:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/8fd6625d7338ffb2d8f27ee8923b427f/href\">https://medium.com/media/8fd6625d7338ffb2d8f27ee8923b427f/href</a></iframe><p>What do we need to show a graph? We need:</p><ul><li>activities to show;</li><li>dayStart and dayEnd, which specify the range of the time axis;</li><li>onZoomIn and onZoomOut to control the range of the time axis from inside the component.</li></ul><h3>Zooming in and out</h3><p>In this aside, I’d like to show you the function that handles zooming in or out. It’s not really relevant to the rest of the story (and you can skip this if you like) but it might come in handy if you wish to code along with this blog post.</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/5d62a026746da4ee205c6b5d1cfd0f52/href\">https://medium.com/media/5d62a026746da4ee205c6b5d1cfd0f52/href</a></iframe><h3>Higher-order component</h3><p>Although it is tempting to let this component manage its own dayStart and dayEnd (especially now that we can use hooks), it has two benefits to manage that state externally:</p><ul><li>I can easily expose the component to different states, which makes it easy to test;</li><li>I can change that state from the outside if I need to (for instance to ensure that all visible charts share the same time axis).</li></ul><p>If I would create a higher-order component (HOC) to manage that state for me, I would get the best of both worlds. I get an easy to use component which manages its own state if I wrap Graph in this HOC, but I get a lot of power if I choose not to.</p><p>Furthermore, I can apply this HOC to many other components which have a time axis and support some form of zooming in and out.</p><p>What should this HOC look like? What is the input? And what is the output?</p><ul><li>The component that we pass to the HOC (the “inner component”) should have some props provided automatically by the component that the HOC produces (the “outer component”).</li><li>The outer component should forward any other props to the inner component. Those are the only props that we need to provide to the outer component.</li><li>TypeScript should be able to infer all of this automatically.</li></ul><p>The HOC we will write will provide the following props to the inner component (which we’ll call Inner in what follows):</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/8b76ef6710a77582a8ae8b0555d101f8/href\">https://medium.com/media/8b76ef6710a77582a8ae8b0555d101f8/href</a></iframe><p>It will produce a component (which we’ll call Outer from now on) that takes the following props¹:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/15ab60303123509b5c6b4e048ea753d3/href\">https://medium.com/media/15ab60303123509b5c6b4e048ea753d3/href</a></iframe><p>This might be a bit intimidating. What this says is that we can determine the props to the outer component (OuterProps) from the props to the inner component (InnerProps) by removing all values that are shared with TimeAxisProps (dayStart, dayEnd, onZoomIn and onZoomOut to be precise)².</p><p>Now that we know what the HOC should do, we can focus on <em>how</em> it should do it:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/dc85cb534801d0ca89ae3c215069e433/href\">https://medium.com/media/dc85cb534801d0ca89ae3c215069e433/href</a></iframe><p>That’s a big piece of code! We can see how to handle zooming in and zooming out. We can also see how we can combine both the OuterProps and the TimeAxisProps to render the Inner-component. You might also have noticed that InnerProps extends TimeAxisProps. Constraining our generic type parameter it this way ensures that we can only apply this HOC on components that have at least the props dayStart, dayEnd, onZoomIn and onZoomOut that we’d like to provide to it. If that component doesn’t have these four props, why even apply WithTimeAxis, right?</p><h3>Trouble</h3><p>There is, however, a tiny problem… It doesn’t compile!</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/833/1*6mEccGy9WNOJ5zU_8a35DA.png\" /></figure><p>But why doesn’t it? TypeScript has trouble figuring out that the combination of OuterProps&lt;InnerProps&gt; and TimeAxisProps is equal to InnerProps. Although this is true for the case with GraphProps, it isn’t true in general.</p><p>To give you an example in which this isn’t true, let’s suppose that we try to apply the HOC to a component CounterExample with the following props:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/c5c113258aeee9aebb16e320957a1bf2/href\">https://medium.com/media/c5c113258aeee9aebb16e320957a1bf2/href</a></iframe><p>where I’d like to point your attention to the dayStart: 0.</p><p>I admit, this is a bit farfetched, but it does illustrate the point. We shouldn’t apply WithTimeAxis to CounterExample as the HOC might provide a dayStart that is not equal to zero. In fact, changing the zoom level multiple times ensures that dayStart will eventually be non-zero, even if it was equal to zero initially.</p><p>The TypeScript isn’t complaining about this when we do try to apply WithTimeAxis to CounterExample, as CounterExampleProps nicely extends TimeAxisProps as I required. CounterExampleProps is more specific than TimeAxisProps (because the type 0 is more specific than number) but that is allowed for subtypes. Instead, the compiler has noticed this possibility even before we did, and that is why our HOC doesn’t compile!</p><p>The root of our issues is with the InnerProps extends TimeAxisProps constraint. What we try to express is that all properties of TimeAxisProps are shared with InnerProps without allowing for subtypes. Unfortunately extends is currently the best we can do. In fact, it’s the only type of constraint we can express on our generic type parameters in TypeScript.</p><h3>Hope on the horizon</h3><p>We can solve this problem by pushing the burden of proof up a level. We ask the user for a function convert that is able to convert the combination of OuterProps&lt;InnerProps&gt; and TimeAxisProps (which can be expressed in TypeScript as OuterProps&lt;InnerProps&gt; &amp; TimeAxisProps) to InnerProps. If the user can do that, we can call Inner with the right props:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/d33910d05ac4789a904c27f227daebd3/href\">https://medium.com/media/d33910d05ac4789a904c27f227daebd3/href</a></iframe><p>What does this conversion function look like in the example of GraphProps? It’s not very difficult at all! In the example of GraphProps we can see that:</p><ul><li>The parameter type is Omit&lt;GraphProps, keyof TimeAxisProps&gt; &amp; TimeAxisProps, which the compiler knows is just a fancy way to write GraphProps;</li><li>The return type is GraphProps.</li></ul><p>What it boils down to is that we are asked to provide a function that makes this very trivial conversion:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/73915cfc6b5c30035941b28cb50122df/href\">https://medium.com/media/73915cfc6b5c30035941b28cb50122df/href</a></iframe><p>We can even use the identity function if we’d like:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/93c93d1d239d09c7b05059fc51ec102f/href\">https://medium.com/media/93c93d1d239d09c7b05059fc51ec102f/href</a></iframe><p>For CounterExample we are asked to provide a conversion function that takes an object with dayStart: number to dayStart: 0. We could simply provide a conversion function that maps every dayStart (whether it is 1, 2, 99 or something else) to 0 but that would clearly not be in the spirit of WithTimeAxis. If I would instead try to use something identity in this case, TypeScript would complain.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/927/1*g_5XkBVLaWIkvs7W_XHv8g.png\" /></figure><p>which is a rather nice way of hearing about this compilation error I think. (Especially the note at the bottom that says “Type ‘number’ is not assignable to type ‘0’” points you in the right direction immediately.)</p><p>As we’ve concluded earlier, OuterProps&lt;CounterExampleProps&gt; &amp; TimeAxisProps is not equal to CounterExampleProps, and the compiler can tell you that. If you cannot use something like identity or trivial, that means you probably shouldn’t use this HOC.</p><p>This is really the crucial step of this blog, so take some time to digest this. We’ve pushed the burden of proving that OuterProps&lt;InnerProps&gt; &amp; TimeAxisProps to InnerProps from Outer (where that’s hard or even impossible to do) to the consumers of this component (where that is easy or even trivial to do). We can’t prove this in general, but we can do it case-by-case every time we apply WithTimeAxis.</p><h3>Leibnizian equality</h3><p>A famous mathematician called Leibniz described a form of equality in which two things (<em>a</em> and <em>b</em>) can be considered to be equal if every predicate that holds for <em>a</em> also holds for <em>b</em> (and vice versa).</p><p>In TypeScript, we can express this as</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/0003891a80c301954c22135f2ae89276/href\">https://medium.com/media/0003891a80c301954c22135f2ae89276/href</a></iframe><p>Two types A and B are equal if every function that maps A to B is also a mapping from B to A. You can see that it’s only possible to construct such a function if A is equal to B. In that case Leibniz&lt;A, B&gt; collapses to type Leibniz&lt;A, A&gt; = (a: A) =&gt; A (in other words, it is our identity function).</p><p>Leibniz is a formalization of the technique we used in the previous section with a HOC:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/b8e604fad0b336ff9bd6690a6144f3d7/href\">https://medium.com/media/b8e604fad0b336ff9bd6690a6144f3d7/href</a></iframe><p>By requiring a Leibniz&lt;OuterProps&lt;InnerProps&gt; &amp; TimeAxisProps, InnerProps&gt; this function expresses that it can only do its job if OuterProps&lt;InnerProps&gt; &amp; TimeAxisProps and InnerProps are equal.</p><p>Because Leibniz&lt;...&gt; serves as our type constraint, we can even drop the extends from InnerProps extends TimeAxisProps. This is no real loss as that extends wasn’t doing a very good job anyways.</p><h3>Conclusion</h3><p>Sometimes we need something stricter than extends, or we’d like to constrict the type parameter in the other direction (number extends T instead of T extends number). In those cases Leibniz&lt;...&gt; can be your friend. In my experience using a Leibniz&lt;...&gt; improves the readability of your type constraints when those constraints get more complicated (or include three or more different types).</p><h3>Afterthoughts</h3><p>This technique was first used in <a href=\"http://portal.acm.org/citation.cfm?id=583852.581494\">Typing Dynamic Typing (Baars and Swierstra, ICFP 2002)</a> but I haven’t seen it used in TypeScript anywhere yet. I’m really interested to hear how you would tackle the problem addressed in this post without using a Leibniz&lt;...&gt; or if you’ve seen it used in similar (or different!) places. Let me know!</p><p>[1]: Omit will be introduced in TypeScript 3.5. In the meantime, you can define it yourself as type Omit&lt;O, K extends keyof O&gt; = Pick&lt;O, Exclude&lt;keyof O, K&gt;&gt; .</p><p>[2]: We’ve defined OuterProps in terms of InnerProps. Like in mathematics, where you can express <em>y</em> in terms of <em>x</em> (<em>y</em> = 2<em>x</em>) or <em>x</em> in terms of <em>y</em> (<em>x</em> = <em>y</em> / 2), TypeScript allows me to reverse this relationship. We get</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/6b167f9d1d20ec94c10cea7fd2c316c6/href\">https://medium.com/media/6b167f9d1d20ec94c10cea7fd2c316c6/href</a></iframe><p>No need for complicated tricks like Omit&lt;...&gt;. Unfortunately, this doesn’t work. Because we start out with an Inner-component, from which we generate an Outer-component, we should start out with an InnerProps, from which we derive the OuterProps. If we would reverse this relationship by writing</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/40fbe7040d4bd177462b93777724ce0a/href\">https://medium.com/media/40fbe7040d4bd177462b93777724ce0a/href</a></iframe><p>we’d lose the ability for TypeScript to correctly infer the right types:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/930/1*JmOikDAspLJuHPY07W1-Lw.png\" /></figure><p>In our example, the compiler would infer OuterProps to be equal to GraphProps, which includes dayStart, dayEnd, onZoomIn and onZoomOut so when you try to use the resulting component you are still asked to provide those props (even though they will by overwritten by the ones the HOC provides).</p><p>If you don’t mind helping the compiler a hand by providing the type yourself (instead of letting TypeScript infer it) then this is a very nice way of writing HOC’s and you needn’t read the rest of the blog.</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=2aeff1303749\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/codestar-blog/leibniz-equality-in-typescript-2aeff1303749\">Leibniz equality in TypeScript</a> was originally published in <a href=\"https://medium.com/codestar-blog\">Codestar blog</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"
  },
  {
    "id": "https://medium.com/p/6a3f4b167852",
    "title": "Event sourcing with Akka Persistence",
    "author": "Nick ten Veen",
    "latestPublishedAt": "Fri, 07 Jun 2019 12:40:24 GMT",
    "uniqueSlug": "https://medium.com/codestar-blog/event-sourcing-with-akka-persistence-6a3f4b167852?source=rss----ea5cff13e3c9---4",
    "paragraphs": "<h4>Asynchronous pains</h4><p>In one of our projects at the Port of Rotterdam we do a lot of stream processing where we require intermediate state. We are using Event Sourcing with <a href=\"https://doc.akka.io/docs/akka/current/typed/persistence.html\">Akka Persistence</a>. It allows us to create robust stateful streaming applications that can maintain state between application restarts. We were struggling a bit writing our command handlers since we do a bunch of asynchronous operations. Akka Persistence does not allow you to handle command asynchronously which means you need to deal with this yourself. Let us explore the problem in a simplified event sourcing application.</p><h4>Event Sourcing</h4><p>Let us create a simple implementation of an event sourcing system. A simple calculator that can add and subtract values. First we define our state, which is simply an integer value:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/5d07332ecc9f80747f4ccc337a8273ac/href\">https://medium.com/media/5d07332ecc9f80747f4ccc337a8273ac/href</a></iframe><p>The state can only be modified by firing events. Let us create two possible operations, adding and subtracting from the state:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/62541bf29f1b3892b120aff8034bd4cd/href\">https://medium.com/media/62541bf29f1b3892b120aff8034bd4cd/href</a></iframe><p>Now that we have a definition for our state and possible events, we can write a handler that will process these events:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/f977354dda7e13ecde4eab9931c297fb/href\">https://medium.com/media/f977354dda7e13ecde4eab9931c297fb/href</a></iframe><p>We can test the event handler to verify that the events are processed correctly:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/25740c4cfde538c6c2e06eba4ee7d9be/href\">https://medium.com/media/25740c4cfde538c6c2e06eba4ee7d9be/href</a></iframe><h4>Commands</h4><p>In event sourcing, events are immutable facts that happened. These events should be handled deterministically without any side effect. However, sometimes we need to perform side effects. For example when we need to query a database to check if an operation is allowed. We can use the command abstraction for this purpose. A command is a request to do something. Requests can be accepted or denied, or even transformed. They are also allowed to perform side effects. We can define commands for addition and subtraction:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/3a0d54d783a9e5785f1147b8029cae28/href\">https://medium.com/media/3a0d54d783a9e5785f1147b8029cae28/href</a></iframe><p>A command handler can process these commands and decide to fire zero or more events:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/1ad75d70e2dab02037a5928bb1d9b459/href\">https://medium.com/media/1ad75d70e2dab02037a5928bb1d9b459/href</a></iframe><p>We can test the command handler to verify it will fire events accordingly:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/ab4957892a4c78e046c24a2df851293c/href\">https://medium.com/media/ab4957892a4c78e046c24a2df851293c/href</a></iframe><p>The command handler and event handler can be folded together to calculate the state for a given list of commands:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/e2ec3d55ea53da5bc06bc02461c379ec/href\">https://medium.com/media/e2ec3d55ea53da5bc06bc02461c379ec/href</a></iframe><p>This all works fine, but if we want to recover the state during a crash or restart, we also need to store the events that we persist. We need a function that accumulates the events while calculating the state:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/0b2e607e74d6a86c575971d4c57df104/href\">https://medium.com/media/0b2e607e74d6a86c575971d4c57df104/href</a></iframe><p>We can keep the accumulated state in memory during processing and at the same time persist the generated events somewhere. On restarts we can replay these events with the eventHandler to restore our state.</p><h4>Akka Persistence</h4><p>This pattern is encoded in Akka Persistence and allows us to have actors with state that can be recovered after crashes and restarts. The command handler is a little bit different. Instead of returning a list of events that happened, you can specify an Effect. These effects are simply an encoding of possible actions a persistent actor can do after receiving a command:</p><ul><li>Persist an event</li><li>Stop the actor</li><li>Stash the command</li><li>Do nothing</li></ul><p>These effects can be composed together to (for example) persist multiple events. In our example we can write a simple command handler:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/f6718504ef695cb7e2ce9e4380fba243/href\">https://medium.com/media/f6718504ef695cb7e2ce9e4380fba243/href</a></iframe><h4>Asynchronous command handling</h4><p>One issue about the commandHandler is that it is synchronous. <a href=\"https://github.com/akka/akka/issues/25650\">There are currently no plans for aynchronous command handlers in akka</a> persistence.<br>If you want to do some asynchronous processing before deciding to persist an event, you need to introduce extra commands. For example, lets say we want to have a check if a specific addition or subtraction is allowed before we emit an event. We really need to do this asynchronously for some reason, so lets create a definition of our permission check:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/c1b62ffb83ccde773ba063938dbb57a8/href\">https://medium.com/media/c1b62ffb83ccde773ba063938dbb57a8/href</a></iframe><p>To be able to add this to our command handler, we need an extra command that is fired after validation. We also group our previous commands into a subtype so it can be a parameter of our new command:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/92c2de50dc026f7ea003117690b031a7/href\">https://medium.com/media/92c2de50dc026f7ea003117690b031a7/href</a></iframe><p>With this definition we can rewrite our event handler to take this check into account:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/d76cbff50bb56201bf8a9976137b8d60/href\">https://medium.com/media/d76cbff50bb56201bf8a9976137b8d60/href</a></iframe><p>This does work, however we lost a property that might be important to us. <br>The order in which the algebraic commands are processed is lost due to the asynchronous boundary. Say our check is really slow for some specific elements. Other elements that arrived later might have been processed already and arrive out of order:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/eb9dc629dd33e621c308219abece7984/href\">https://medium.com/media/eb9dc629dd33e621c308219abece7984/href</a></iframe><p>If we would process the following commands in order, the outcome might have a different order:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/d8fcebd84408bd53f03f8673ca48c98c/href\">https://medium.com/media/d8fcebd84408bd53f03f8673ca48c98c/href</a></iframe><p>You could fix this by storing inflight messages in some (non-persistent) state, <br>or by using the ask pattern and waiting for replies before sending each command. Currently (as far as I am aware) you are unable to store volatile state in a persistent actor. This means that if you want to store messages that are in flight, you need to use persistence for this. We can extend the state to store this along with a persistent event to signal inflight messages:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/137c495e4617b589ec586093539a0d8a/href\">https://medium.com/media/137c495e4617b589ec586093539a0d8a/href</a></iframe><p>Previously we only fired a command if an operation is allowed, but since we also need to unstash if an operation is not allowed, we always need to fire a command for a result. So we need to modify our OperationAllowed command:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/77909a2f33d897027ea29e5f37aa5589/href\">https://medium.com/media/77909a2f33d897027ea29e5f37aa5589/href</a></iframe><p>Our event handler is now responsible for handling this extra event and cleaning up after a command has been successfully processed:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/7939bcca43e31638fea8c1f3601a5b7c/href\">https://medium.com/media/7939bcca43e31638fea8c1f3601a5b7c/href</a></iframe><p>Finally we need to rewrite our command handler to stash incoming commands as long as there is still a message in flight.<br>After a command is successfully processed, we need to unstash to continue processing potentially stashed commands:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/0a0f3a59d6fd65959ce18f46fe0d0e43/href\">https://medium.com/media/0a0f3a59d6fd65959ce18f46fe0d0e43/href</a></iframe><p>After all this there are still a few concerns with this implementation. <br>What if checkPermission fails? We would need to extend the example to deal with failing futures as well. Moreover, we persist the state of inflight messages so it survives restarts. However after a restart this message is not in flight and we might wait for eternity for it to resolve. This example illustrates that you can handle commands asynchronously, but in order to ensure messages are processed in the correct order, we needed to add error-prone synchronisation code.</p><h4>Conclusion</h4><p>You can do asynchronous command handling with Akka Persistence. It does however require you to write some error-prone boilerplate code. Can we do better? Are persistent actors the correct approach for this problem? Maybe we can express the problem in a different paradigm where we still have the nice property of state recovery, while also allowing us to handle commands asynchronously. Maybe we could use stream processing to have a cleaner solution to our problem. But that is for another blog post.</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=6a3f4b167852\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/codestar-blog/event-sourcing-with-akka-persistence-6a3f4b167852\">Event sourcing with Akka Persistence</a> was originally published in <a href=\"https://medium.com/codestar-blog\">Codestar blog</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"
  },
  {
    "id": "https://medium.com/p/9790212aa211",
    "title": "How we automated our Angular updates",
    "author": "Bjorn ‘Bjeaurn’",
    "latestPublishedAt": "Tue, 21 May 2019 13:37:13 GMT",
    "uniqueSlug": "https://medium.com/codestar-blog/how-we-automated-our-angular-updates-9790212aa211?source=rss----ea5cff13e3c9---4"
  },
  {
    "id": "https://medium.com/p/f81434f6f8d7",
    "title": "Apollo Client in Practice",
    "author": "mdworld",
    "latestPublishedAt": "Thu, 02 May 2019 18:24:29 GMT",
    "uniqueSlug": "https://medium.com/codestar-blog/apollo-client-in-practice-f81434f6f8d7?source=rss----ea5cff13e3c9---4",
    "paragraphs": "<p>Some time ago I joined a team that is working on a search application. The application takes search terms and displays the results in a table with potentially dozens of columns and hundreds of rows, even before pagination. It is implemented in React and uses <a href=\"https://www.apollographql.com/\">Apollo</a> for GraphQL calls. I was surprised to find it noticeably slow when a lot of search results were retrieved. React is well-known for leveraging virtual DOM to optimize performance and GraphQL should even be able to add caching to further optimize performance on the side of network requests.</p><p>Looking into the performance tab of Chrome dev tools lead me to believe the performance problems were caused by computations in the bottom components (e.g. formatting in cells). Because there are so many and they are re-rendered quite often, this approach is quite intensive on resources.</p><p>Besides that, the application had obvious state synchronization problems. When moving between views it was not maintaining the same state of selected rows. Even though Redux was used to store application state and communicate it between components, it was not used consistently. There were still plenty of React class components that stored some parts of the state locally.</p><p>To summarize, there were two issues that needed to be solved:</p><ol><li>Poor performance due to excessive re-rendering</li><li>Loss of application state when navigating views due to decentralized state stores</li></ol><p>Since both issues were caused by (a lack of) architecture, we redesigned the structure of the application. The original implementation used:</p><ul><li><a href=\"https://www.apollographql.com\">Apollo Client</a> as a GraphQL client</li><li><a href=\"https://github.com/axios/axios\">Axios</a> as an HTTP client for REST endpoints</li><li><a href=\"https://redux.js.org\">Redux</a> and <a href=\"https://reactjs.org/docs/hooks-reference.html#usestate\">React local state</a> to manage the state between components</li></ul><p>It used Apollo, but by <a href=\"https://www.apollographql.com/docs/react/essentials/queries#manual-query\">manually firing</a> client.query() and after processing the response, it stored the result in the Redux store.</p><h3>Fixing application state with Apollo Local State</h3><p>When restructuring the application, Apollo Client was updated to 2.5. This version has a built-in <a href=\"https://www.apollographql.com/docs/react/essentials/local-state\">local state manager</a> (formerly <em>apollo-link-state</em>) and it supports REST calls with the <a href=\"https://www.apollographql.com/docs/link/links/rest\">apollo-link-rest</a> plugin. The <a href=\"https://github.com/apollographql/apollo-client/tree/master/packages/apollo-boost\">apollo-boost</a> package contains the client and several useful plugins. Adopting these means that both Redux and Axios can be removed and Apollo will be used as a single source of truth. If there is a single store for the data, there is no need for synchronization and with that one of the issues is solved.</p><p>The way we used Apollo Client was also updated, to create a better separation of UI and data. Instead of using client.query() directly in the component lifecycle methods, components are split into a presentational component and enhanced with the <a href=\"https://www.apollographql.com/docs/react/api/react-apollo#graphql\">graphql()</a> HOC to add data from remote (i.e. GraphQL back-end) or local fields. Both utilize the Apollo cache, which fulfills multiple functions, one of them an application local state store.</p><p>Example of wrapping a component in a Query HOC:</p><pre>const Books = ({ data: { books } }) =&gt; (<br>  &lt;ul&gt;<br>    {books.map(book =&gt; &lt;li&gt;{book.title}&lt;/li&gt;}<br>  &lt;/ul&gt;);</pre><pre>export graphql({ query: gql`<br>  query($author: String!) {<br>    books(author: $author) {<br>     title<br>    }<br>  }`, <br>  variables: { author: &quot;Mickiewicz&quot; })(Books);</pre><p>Apollo reactively updates when using Query as a container, basically like the connect HOC in Redux. When the variables prop on the Query component is updated, it will automatically re-query. It uses the cache if possible and falls back to a network call if needed, although this behavior can be configured.</p><h3>Improving performance with Local Field Resolvers</h3><p>Having a single source of truth fixes the state synchronization problem. It also paves the way for improving the performance. In general, when a lot of data enters the application, it is a good idea to format it once and cascade the formatted data down to the components and it’s descendants with as little transformations to the data itself. This reduces the amount of computations in the lower components, which solves our other issue.</p><p>When using Redux, a common way to transform data in the store is using <a href=\"https://github.com/reduxjs/reselect\">Reselect</a>, which computes derived data from the Redux store with selectors. For Apollo this is done by:</p><ul><li>wrapping the table in a Query that queries a local prop rows @client, using the <a href=\"https://www.apollographql.com/docs/react/essentials/local-state\">@client</a> directive</li><li>making client side resolvers for rows that queries GraphQL endpoint</li><li>mapping the data in a resolver from a raw format to a format ready for the table components, e.g.:</li></ul><p>from a data object</p><pre>{ <br>  author: &quot;Mickiewicz&quot;, <br>  publications: [ <br>    { <br>      title: &quot;Pan Tadeusz&quot;,<br>      date: -4291747200 <br>    } <br>  ] <br>}</pre><p>to an array rows of cells</p><pre>[<br>  [ &quot;Mickiewicz&quot;, &quot;Pan Tadeusz&quot;, &quot;January 1834&quot; ]<br>]</pre><h3>Next steps</h3><p>Apollo is excellent for merging data from multiple sources (in this case GraphQL, REST, local state and cache) and functions as a “single source of truth” which should solve the state synchronization problems. The local fields that Apollo uses in its local state manager can derive data, moving expensive operations from component render functions to resolvers in its application level cache. Although the issues mentioned in the introduction are now dealt with, we did encounter plenty of other issues I may dive into later. However, these are some things that you might want to take into account when working with Apollo Client:</p><p>Outside of restructuring the application, we improved performance with <a href=\"https://github.com/bvaughn/react-virtualized\">react-virtualized</a> which speeds up rendering large tables. Apollo also offers GraphQL pagination. We did not use that, as we have to do our pagination on the client side to keep the sorting feature of react-virtualized in tact.</p><p>Apollo Client offers support for TypeScript, it is even possible to generate queries and typed React components from GraphQL schemas with <a href=\"https://graphql-code-generator.com/\">@graphql-codegen/cli</a>.</p><p>Also definitely use the <a href=\"https://jimkyndemeyer.github.io/js-graphql-intellij-plugin/\">JS GraphQL IntelliJ Plugin</a> because it will not only auto complete queries, but it will help you think about (client side) schema’s.</p><p>When the Query component mounts, it creates an observable that subscribes to the query in the query prop. This encourages reactive behavior like RxJS (which can also be used as a <a href=\"https://github.com/mdvanes/realtime-planner\">state store</a>). However, it seems that Apollo offers much less fine-grained control over the observables than what RxJS provides. And considering observables, Apollo Client effortlessly <a href=\"https://www.apollographql.com/docs/link/links/ws\">scales to web sockets</a>!</p><p>Are you looking for inspiration on how Apollo client can be applied? I can recommend <a href=\"https://www.youtube.com/watch?v=g6Mhm9W76jY\">this talk by Uri Goldshtein</a> and this <a href=\"https://www.youtube.com/watch?v=2RvRcnD8wHY\">introduction to Apollo state management by Sara Vieira</a>.</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=f81434f6f8d7\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/codestar-blog/apollo-client-in-practice-f81434f6f8d7\">Apollo Client in Practice</a> was originally published in <a href=\"https://medium.com/codestar-blog\">Codestar blog</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"
  },
  {
    "id": "https://medium.com/p/b561e8cfbcfa",
    "title": "Sharing is Caring! Domain objects in BOTH Scala and R with GraalVM Polyglot bindings.",
    "author": "Nathan Perdijk",
    "latestPublishedAt": "Wed, 01 May 2019 07:53:54 GMT",
    "uniqueSlug": "https://medium.com/codestar-blog/sharing-is-caring-domain-objects-in-both-scala-and-r-with-graalvm-polyglot-bindings-b561e8cfbcfa?source=rss----ea5cff13e3c9---4",
    "paragraphs": "<p><strong>In any domain that goes beyond a sample project, it becomes almost inevitable that you want to use objects that accurately represent that domain. GraalVM does an adequate job of converting datastructures from R to JVM languages and back by using sensible defaults, but what do you do when the sensible defaults are not sufficient? Given that GraalVM can perform translation between its multitude of supported languages, is it possible to define a “Domain” that can be accessed by all?</strong></p><p><strong>This is, of course, a rhetorical question and the answer is “Yes”.</strong></p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/proxy/1*LPCG2xlLiUdqcYJulzxvmw.png\" /></figure><p>In this article I’ll demonstrate how to share domain objects between JVM languages and guest languages on the GraalVM platform. I’m using Scala domain objects (because Scala is awesome), but you could do the same with, for instance, Java or Kotlin.</p><p>(If you’re new to GraalVM Polyglot abilities, consider also reading my previous article on the subject: <a href=\"https://medium.com/codestar-blog/in-search-of-the-holy-graalvm-putting-the-r-in-scala-or-java-or-b057494f77\">using GraalVM to execute R files from Scala</a>.)</p><h3>The Problem</h3><p>To demonstrate the problem we are trying to solve, we first need a pretend domain. Let’s do something with Weather Forecasts, because people always talk about the weather!</p><p>Creating weather forecasts is the kind of terribly complicated modelling business that could be built in R, but luckily we don’t actually <em>need </em>a<em> </em>working model for this article. So let’s just pretend we already have this awesome R functionality that creates weather forecasts, cleanly abstracted away in a separate file called fun_MagicHappensHere.R:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/e5c3b681f21a734cde53718097b48260/href\">https://medium.com/media/e5c3b681f21a734cde53718097b48260/href</a></iframe><p>When brought into scope with R’ssource the above file will yield a magicHappensHere function that can be called and returns a data.frame with some weather forecast information. We can then return the result to Scala by simply making it the return of our R function:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/2c7e7eec84737fdd738af52569b5b619/href\">https://medium.com/media/2c7e7eec84737fdd738af52569b5b619/href</a></iframe><p>Wow, that doesn’t look too bad! This won’t get many complaints from the Data Scientist, I reckon.</p><blockquote>So, what’s wrong with this? What’s the problem?</blockquote><p>I’m glad you asked, <a href=\"https://www.dictionary.com/browse/interlocutor\">interlocutor</a>! Let’s take a look on the Scala/JVM side of this equation, to see what the Data Engineer has to deal with:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/ec12de6f2b6c4cac4c2a8bdd2f083906/href\">https://medium.com/media/ec12de6f2b6c4cac4c2a8bdd2f083906/href</a></iframe><p>Whoa… creating the Graal Context and Source is trivial, but look at the nasty type signature on that call to R! Let’s pick it apart for a bit:</p><ul><li>A Map that contains Lists of each data.frame row keyed by its name… That makes sense, well done Graal! It’s just too bad it’s Stringly typed, rather than actual methods on an actual class, so any typo will mess us up at runtime.</li><li>Unknown content type of the Lists?… That’s unfortunate, we know that some rows should only contain String, while others contain Int but this information is lost in conversion… We have to do a bunch of casting!</li><li>The returned Collections are Java? That’s just sad! The polyglot representation of collections doesn’t transfer to Scala, but Scala Map and List are much more powerful than their Java equivalent, so we’ll have to convert the Java equivalents!</li><li>Every element of each List doesn’t actually belong to the rest of the List, but instead should be combined with each corresponding position in every other List to actually make a WeatherReport… (The first entry of “humidities”, should be paired with the first entry of “temperatures” etc.)</li></ul><p>Let’s see what this means when we try to use the output of this function:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/c0596dc510b7e5f8a31583fe7a18ee86/href\">https://medium.com/media/c0596dc510b7e5f8a31583fe7a18ee86/href</a></iframe><p>I don’t know about you, but I’d feel quite uncomfortable at the thought of maintaining the code above. It’s verbose, error prone, brittle, annoying and it fails at the wrong spot if any mistakes are introduced (namely at the place of conversion, rather than the place of programming error). I wish the R function would just return a Set of WeatherForecast!</p><p>Whoops, hold on… Wait a minute…</p><p>Why don’t we just <strong><em>make it do that?</em></strong></p><h3><strong>The Solution: Bindings</strong></h3><p>GraalVM comes with an option that makes it possible to explicitly share instances of code across the language divide. It makes it possible to add symbols to bindings that are accessible to other languages. The Graal Context has two functions that can be used to do this in a very similar way:</p><ul><li><a href=\"https://www.graalvm.org/sdk/javadoc/org/graalvm/polyglot/Context.html#getPolyglotBindings--\">getPolyglotBindings()</a></li><li><a href=\"https://www.graalvm.org/sdk/javadoc/org/graalvm/polyglot/Context.html#getBindings-java.lang.String-\">getBindings(“nameOfLanguage&quot;)</a></li></ul><p>In this article I will be using getBindings, because it doesn’t require an explicit import on the side of the using language and it allows you to limit which languages you are exposing each binding to. Using getPolyglotBindings() is almost identical from a coding perspective though, so pick the one you like best.</p><h4>Using Domain objects on both sides of the language divide</h4><p>This is what our Domain object looks like:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/49e56d665f505d7658635c3908f18293/href\">https://medium.com/media/49e56d665f505d7658635c3908f18293/href</a></iframe><p>Domain is basically a factory that can be used to spawn new instances of all the domain classes that we want to share. The classDomain itself is immutable! (As it happens, the spawned instances are too.)</p><blockquote><strong>WARNING</strong>: You probably don’t want to put a mutable object into bindings. If you do, this object can be mutated <strong>from any language that can reach it</strong>. Just as you don’t want multiple threads to tangle with the same mutable object, you don’t want multiple languages to access the same mutable state! (Really! Imagine having to debug race conditions across language boundaries...)</blockquote><p>Any instance of the Domain class provides methods to spawn new instances of the following domain case classes:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/7e5132cb958ccf0a06cd9e1c9f11781c/href\">https://medium.com/media/7e5132cb958ccf0a06cd9e1c9f11781c/href</a></iframe><p>Let’s put an instance of our Domain class into the bindings for R, so it can be accessed from the R guest language context:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/5393f68ce45968ecfb3227cf89c4f771/href\">https://medium.com/media/5393f68ce45968ecfb3227cf89c4f771/href</a></iframe><p>Easy peasy. From R, the new object will simply be known as Domain and its methods will be accessible like this: Domain$methodName(arguments)</p><p>We turn a new R file, that uses this binding, into our newest Source:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/92c7888cae1e6b4a450d20944457369d/href\">https://medium.com/media/92c7888cae1e6b4a450d20944457369d/href</a></iframe><p>And then we define the function:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/fb46db7c7465f5e596e35b2a8d0bc399/href\">https://medium.com/media/fb46db7c7465f5e596e35b2a8d0bc399/href</a></iframe><p>Now that this is our return type, all we need to do to work with the returned WeatherForecasts is this:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/7f28f8cfe8bd2c744ec6326a1fb9417e/href\">https://medium.com/media/7f28f8cfe8bd2c744ec6326a1fb9417e/href</a></iframe><p>That is one very happy Data Engineer! (Don’t forget to compare with the incomplete parsing above.)</p><p>Now, let’s see the impact on the DataScientist side:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/15fe0238001746bf073b808472cb29cc/href\">https://medium.com/media/15fe0238001746bf073b808472cb29cc/href</a></iframe><p>As we can see, the code has become more verbose (although it’s actually quite efficient still, if you take out all the clarifying comments I put in), but not quite as bad as in the previous solution:</p><p>In this R file, we now need to convert the data.frame to proper WeatherForecast instances to be added to the WeatherForecastList we also got from Domain. But rather than doing a Parse &amp; Pray, as we had to do with the no-bindings solution, we can now use proper constructors that will fail with intelligible errors if we make a mistake. (Sadly still only at runtime, because this is still R.) Cleanly taking values out of the data.frame is also better supported by its native language and we could add more convenience methods to more succinctly create the domain classes if we wanted to. If we have direct control over the function that creates the weather forecasts, we can even skip the data.frame altogether and exclusively use WeatherForecastList, which eliminates the extra code seen above.</p><p>The biggest advantage, though, is that we now have a very clearly defined interface. Any user can open up the Domain.scala file to see what methods are available, what parameters they take and what things they return.</p><h3><strong>Conclusion</strong></h3><p>Using Bindings to provide a clean shared domain between guest languages (like R or Python) and JVM languages (like Scala, Java or Kotlin) in GraalVM is pretty easy and gets rid of a lot of ugly and fault-sensitive parsing. It also provides a crucial stepping stone for further integration of functionalities across language boundaries.</p><p><strong>PS</strong>: I could have added a factory for each separate domain class to the bindings, instead of giving them a shared factory. This can make the code on the R side a little shorter, but creates a less clean interface (at least to my taste).</p><h3><strong>Sourcecode</strong></h3><p>I have reused the example project from my previous article on <a href=\"https://medium.com/codestar-blog/in-search-of-the-holy-graalvm-putting-the-r-in-scala-or-java-or-b057494f77\">using GraalVM to execute R files from Scala</a>) and branched it for this article. The source code can be found <a href=\"https://github.com/NRBPerdijk/example-graalvm-r-scala/tree/usingBindingsToShareDomain\">here</a>. The snippets above are taken from the linked project and altered to better fit the sizing of the article.</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=b561e8cfbcfa\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/codestar-blog/sharing-is-caring-domain-objects-in-both-scala-and-r-with-graalvm-polyglot-bindings-b561e8cfbcfa\">Sharing is Caring! Domain objects in BOTH Scala and R with GraalVM Polyglot bindings.</a> was originally published in <a href=\"https://medium.com/codestar-blog\">Codestar blog</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"
  },
  {
    "id": "https://medium.com/p/cd7456268dc5",
    "title": "Using generative art to create a pulsating SVG star",
    "author": "Hamza Haiken",
    "latestPublishedAt": "Fri, 12 Apr 2019 09:39:17 GMT",
    "uniqueSlug": "https://medium.com/codestar-blog/using-generative-art-to-create-a-pulsating-svg-star-cd7456268dc5?source=rss----ea5cff13e3c9---4",
    "paragraphs": "<h4>Part 1 — Intro</h4><p>I recently created a new design for our recruitment campaign at Codestar. It represents a burning star, with <a href=\"https://www.ucl.ac.uk/news/sites/news/files/corona-web.jpg\">corona-like features</a>, represented in an abstract way, aiming to make it feel like a pulsating stream of data (The original artist for the star is <a href=\"https://www.shutterstock.com/g/GarryKillian\">Garry Killian</a>).</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*lY5WPHYbCz_PDY-PaxTa0A.png\" /><figcaption>We’re very big on only hiring Latin speakers</figcaption></figure><p>The rest of the team enjoyed it, and we nicknamed this design <em>“the code star”</em>. It was then suggested that we could try and recreate this as an animation for our website, or to simply just to generate as many different static stars as we want: a teammate’s name could be used as a random seed, and they would be given their own special code star.</p><p>In this series of blog posts, I will endeavor to explain my process in taking on this challenge, going through various subjects, in particular <em>generative art</em> and <em>SVG animation.</em></p><p>Our goal in this series will be to re-create the above visual in SVG, and animate it to make it slowly pulsate, like the sun’s corona.</p><h3>What is generative art?</h3><p>The term <a href=\"https://en.wikipedia.org/wiki/Generative_art\">“generative art”</a> (or also “procedural art”) refers the making of art algorithmically, typically relying on fractals and randomness.</p><p>Famous examples of this include: <a href=\"https://i.imgur.com/gV0cxPU.jpg\">that one album cover that everybody wears on a t-shirt</a>, <a href=\"https://i.imgur.com/smNksSJ.jpg\">Minecraft’s infinitely expanding worlds</a>, <a href=\"https://www.rockpapershotgun.com/images/16/aug/nmsg8s.jpg\">No Man’s Sky’s universe and planets</a>, and many more.</p><p>For further learning about getting started in generative art (after reading this of course!), I recommend as starting points <a href=\"https://generativeartistry.com\">Generative Artistry</a> and <a href=\"https://www.youtube.com/channel/UCvjgXvBlbQiydffZU7m1_aw\">The Coding Train</a> YouTube channel, which often takes on generative art challenges.</p><h3>Noise</h3><p>One commonly used tool in the field of generative art is <em>noise</em> — in particular, <a href=\"https://en.wikipedia.org/wiki/Perlin_noise\">Perlin</a>, or <a href=\"https://en.wikipedia.org/wiki/Simplex_noise\">Simplex noise</a> (which is more suited for animations since it has a lower overhead). It is used for a variety of results: terrain, smoke, clouds, textures.</p><p>This kind of noise is obtained by overlaying noise at different frequencies on top of each other, forming a cloud-like texture that expands infinitely in any direction. The nice thing about this method of constructing noise is that it can be expanded to support any number of required dimensions (in our case, a 3D space).</p><p>In a nutshell, Perlin noise is constructed by averaging noise rendered at several scales (bilinear interpolation is used to smooth out the lower frequencies):</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/801/1*upB28P_sCBlqPhXgWO15Zw.png\" /><figcaption>Image source: <a href=\"https://medium.com/100-days-of-algorithms/day-88-perlin-noise-96d23158a44c\">https://medium.com/100-days-of-algorithms/day-88-perlin-noise-96d23158a44c</a></figcaption></figure><p>When averaging all of these (using some kind of weighted distribution), the following natural, cloudy texture is obtained:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/511/1*WHpL6IJd_gUROUmBUlXWnQ.png\" /><figcaption>Could this image just be the “cloud” filter in Photoshop? Who knows</figcaption></figure><p>Used creatively, this noise can be used to create impressive results, like this <a href=\"https://skybase.wordpress.com/2012/01/26/how-to-creating-super-simple-procedural-wood-textures-in-filter-forge/\">wood texture</a> for example (and again, given the nature of Perlin noise, this texture can expand seamlessly in any direction).</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*zlgGPvL70VCc9cOf5VFBsA.jpeg\" /><figcaption>Sitting atop a mathematically generated hill is a big dream of mine</figcaption></figure><p><a href=\"https://i.redd.it/rq3ptj8i75b21.jpg\">And here</a> is an example from the game “No Man’s Sky”. The mountains in such a landscape are created using low-frequency noise (big features), the smaller hills on top of that come from the middle range of noise frequencies, and if you zoom in even closer the small dirt bumps are added on top of the hills by adding in the values of a higher frequency (this is like a fractal). Additionally, the noise formula can also be (and was) manipulated in such a way as to seamlessly wrap around a sphere.</p><h3>Using noise</h3><p>One of the big advantages of Perlin noise: by traveling along its plane, the intensity values increase and decrease <strong>continuously</strong>. This is not only very useful for terrain generation for creating hills and valleys, but also for <em>animation</em>, providing offsets that will smoothly increase or decrease randomly in a natural way.</p><p>We will use <a href=\"https://github.com/jwagner/simplex-noise.js\">simplex-noise.js</a> for generating our noise. This is not Perlin but Simplex noise; it looks less detailed, and is faster to compute. The library provides a simple API: just instantiate a noise object with a <a href=\"https://en.wikipedia.org/wiki/Random_seed\">random seed</a>, which you can then use for getting noise values in 2D, 3D or 4D:</p><pre>let simplex = new SimplexNoise(&quot;tutorial seed&quot;);<br>let value = simplex.noise2D(0.42, 13.37);</pre><p>Precision can be as small as needed, effectively zooming in on the noise, and the whole 2D plane that can be represented with JavaScript numbers is available to us.</p><p>Here is a simple demo on how to use Simplex noise. Feel free to play around with the sliders, particularly with the z-axis (slowly).</p><iframe src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fcodepen.io%2FTenchi2xh%2Fembed%2Fpreview%2FZVdLOo%3Fheight%3D600%26slug-hash%3DZVdLOo%26default-tabs%3Djs%2Cresult%26host%3Dhttps%3A%2F%2Fcodepen.io&amp;url=https%3A%2F%2Fcodepen.io%2FTenchi2xh%2Fpen%2FZVdLOo&amp;image=https%3A%2F%2Fscreenshot.codepen.io%2F273979.ZVdLOo.small.4ab4ffde-92ca-4056-abc1-9a1f71fb3192.png&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=codepen\" width=\"800\" height=\"600\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/7d32cde0d50fcb456ebd1d75717334b2/href\">https://medium.com/media/7d32cde0d50fcb456ebd1d75717334b2/href</a></iframe><p>Moving along the X- and Y-axes feels natural to us humans — it just looks like standard translation — but it shows us that the noise is indeed continuous.</p><p>Moving along the Z-axis, however, gives a totally different feeling, exposing the vertical continuity of the noise by showing us slices of what seems to be an animation.</p><p>The color values at a given pixel coordinates change continuously and smoothly while navigating along the Z direction.</p><p>This is a big clue; by using the Z-axis to represent time, we can now animate things.</p><p>But before we can animate, we will first need a drawing!</p><h3>Coming up in this series</h3><p>Stick around on the Codestar blog to catch the next parts in this series:</p><ul><li>Drawing the basis for the SVG star: basic <a href=\"http://snapsvg.io/\">Snap.svg</a> tutorial</li><li>Mapping star element coordinates using the Simplex noise as a displacement map: some trigonometry and calculus</li><li>Animation: bringing everything together, and using <a href=\"https://cocopon.github.io/tweakpane\">Tweakpane</a> for playing around with the settings</li><li>Making a tool for outputting static SVG images using a string seed for generating a random star</li></ul><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=cd7456268dc5\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/codestar-blog/using-generative-art-to-create-a-pulsating-svg-star-cd7456268dc5\">Using generative art to create a pulsating SVG star</a> was originally published in <a href=\"https://medium.com/codestar-blog\">Codestar blog</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"
  },
  {
    "id": "https://medium.com/p/b057494f77",
    "title": "In Search of the Holy GraalVM, putting the R in Scala (or Java, or…)",
    "author": "Nathan Perdijk",
    "latestPublishedAt": "Fri, 22 Mar 2019 14:06:44 GMT",
    "uniqueSlug": "https://medium.com/codestar-blog/in-search-of-the-holy-graalvm-putting-the-r-in-scala-or-java-or-b057494f77?source=rss----ea5cff13e3c9---4",
    "paragraphs": "<p><em>Imagine this</em>:</p><p><strong>You have a domain that requires fixing some interesting problems. The good news? You know that there are good solutions for these problems! The bad news? They are all in different languages! Maybe in R or Python, while the rest of your app (or microservice, or whatever) is written in Java or Scala!</strong></p><p><strong>THE HORROR!</strong></p><p><strong>How on earth are you going to tie the solutions together without creating a metaphorical (or actual) dragon out of the different configurations and services that have to be kept in sync? What do you tell your Data Scientist? That they “better learn a decent language and reinvent the wheel”? Or that they “should become an expert in their language specific service-framework, whilst running Docker-apps and mastering network configurations across the board”? Or do you say: “That R-file? Oh sure, we’ll just run it from this JVM-app!” That last one sounds good doesn’t it? But wait, R on the JVM… Is that even possible?!</strong></p><p>Well…</p><p><strong>[SPOILER ALERT]</strong></p><p>It is, with GraalVM!</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/proxy/1*LPCG2xlLiUdqcYJulzxvmw.png\" /></figure><p><strong>Running an R file from Scala code</strong></p><p>First a little disclaimer: At the time of writing, GraalVM does not have a 1.0.0 version yet. The most recent version is 1.0.0-RC14, which is the one I’ve used for the following examples. This means that you can still run into bugs and compatibility issues, <a href=\"https://github.com/oracle/fastr/issues/46\">I</a> <a href=\"https://github.com/oracle/fastr/issues/49\">know</a> <a href=\"https://github.com/oracle/fastr/issues/62\">I</a> <a href=\"https://github.com/oracle/fastr/issues/64\">did</a>! But don’t let this deter you! The team behind GraalVM responds quickly to new issues and will do their best to resolve them.</p><h4>Installing GraalVM and FastR</h4><p>You need to <a href=\"https://github.com/oracle/graal/releases\">download</a> and unpack GraalVM. This will provide you with a GraalVM installation. The default GraalVM installation doesn’t come with R, but it does come with a way of installing it. Simply go to the folder where you installed GraalVM and dig down to /Contents/Home/bin (on MacOS), or simply /bin (on Linux). There you can install R by executing the following command: gu install r</p><p>From now on, you can execute R using the R command in your Graal bin folder and it will start up FastR. “Wait, FastR?” you say? Yes, FastR is the GraalVM implementation of R, based on GNU R. It aims “<a href=\"https://www.graalvm.org/docs/reference-manual/languages/r/\">to be fully compatible with GNU R, including its native interface as used by R packages</a>.” Sadly some R packages rely on unspecified behaviour or implementation details of GNU R, which means that <a href=\"https://www.graalvm.org/docs/reference-manual/compatibility/\">not all R packages are supported</a>.</p><p>But enough chit-chat! Time for some code!</p><h4>Setting up the Scala project</h4><p>Let’s make ourselves a nice little Scala project. In this example I will be using maven, but sbt should work just fine.</p><p>Add the dependency for GraalVM to your pom.xml :</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/32951ebc8fe33accac2c68e3635dbc0a/href\">https://medium.com/media/32951ebc8fe33accac2c68e3635dbc0a/href</a></iframe><p>Make sure you use your new GraalVM Home as the SDK, so that your IDE uses the bin/java command that comes with GraalVM to execute the project (a regular JVM will be unable to start a Graal application). Also, add a Scala SDK to your project library (for obvious reasons).</p><p>Now we are going to create an R file.</p><p>We are going to make it do something we couldn’t possible use any other language for: we’re going to print “Hello, World!” when it is executed.</p><p>Original! Yes, I know!</p><p>Here’s the R file in question:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/126d708761a1352a3387e0042190d6a5/href\">https://medium.com/media/126d708761a1352a3387e0042190d6a5/href</a></iframe><p>Nifty!</p><p>Place it in your resources folder, for easy access from the JVM side.</p><p>Now we can create a Main as usual and we’ll use Graal to execute the R file:</p><iframe src=\"\" width=\"0\" height=\"0\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/fea617971e6c9928c5e935928ad53eaf/href\">https://medium.com/media/fea617971e6c9928c5e935928ad53eaf/href</a></iframe><p>The comments in the above Main.scala file should explain what it does, but TL;DR: it uses GraalVM to run an R file, that prints “Hello, World!” and then returns a String, which is then printed by Scala.</p><p>Tadaa, we have just executed R code from a Scala project! You can also do this from Java, or any other JVM language, or from JVM frameworks such as Spring Boot.</p><h4>Conclusion</h4><p>Embedding R code in a Scala/JVM project can be an excellent way to use the powerful data processing packages accessible in R (OCR processing, for instance) while using a language more suitable for integration in a services landscape to take care of integration with other moving parts. It’s also possible to <a href=\"https://www.graalvm.org/docs/reference-manual/languages/r/#graalvm-integration\">directly embed R code</a> in Scala files, but the benefit of embedding complete R files rather than code snippets is that R code stays in its own files. This means you (or your Data Scientist) can use a specialised editor (e.g. RStudio) to create the R side of your functionality, while you can use your own favourite editor for the JVM side (e.g. IntelliJ).</p><p><strong>REMINDER</strong>: as stated at the start of this piece, GraalVM and its moving parts (like FastR) are still under development. If you start using more advanced R packages, you may run into incompatibility issues, or bugs. It is worth trying out, though! Quite a few of them work!</p><blockquote><strong>Edit 3 May 2019:</strong> Checkout my article on <a href=\"https://medium.com/codestar-blog/sharing-is-caring-domain-objects-in-both-scala-and-r-with-graalvm-polyglot-bindings-b561e8cfbcfa\">sharing Domain objects across GraalVM languages</a> using Polyglot bindings (example languages: Scala, R).</blockquote><p>Github example project: <a href=\"https://github.com/NRBPerdijk/example-graalvm-r-scala\">https://github.com/NRBPerdijk/example-graalvm-r-scala</a></p><p><a href=\"https://www.graalvm.org/docs/getting-started/#running-java\">Click here</a> to see the other languages that GraalVM supports.</p><p><a href=\"https://chrisseaton.com/truffleruby/tenthings/\">Click here</a> to see what other use cases GraalVM has practical applications for.</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=b057494f77\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/codestar-blog/in-search-of-the-holy-graalvm-putting-the-r-in-scala-or-java-or-b057494f77\">In Search of the Holy GraalVM, putting the R in Scala (or Java, or…)</a> was originally published in <a href=\"https://medium.com/codestar-blog\">Codestar blog</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"
  }
]
